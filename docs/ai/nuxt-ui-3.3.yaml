nuxt_ui:
  title: "Nuxt UI 3.3"
  description: >
    TT Panel projesinde yalnızca @nuxt/ui 3.3.2 sürümündeki bileşenler kullanılacaktır.
    Her yeni UI bileşeni için öncelik @nuxt/ui bileşen ailesidir.
    Güncel resmi liste: https://ui.nuxt.com/components
  features:
    - "Vue 3 ve Composition API ile tam uyum"
    - "TailwindCSS ile entegre, özelleştirilebilir stil seçenekleri"
    - "Modüler yapı: Sadece ihtiyaç duyulan bileşenler projeye eklenir"
    - "TypeScript desteğiyle güvenli geliştirme"
  getting_started:
    - name: "introduction"
      title: "Giriş"
      content: |
        Nuxt UI, Reka UI, Tailwind CSS v4 ve Tailwind Variants’ın gücünü birleştirerek modern, hızlı ve erişilebilir arayüzler geliştirmeyi kolaylaştırır.

        - **Reka UI**: 55+ temel Vue bileşeni, güçlü erişilebilirlik ve aktif geliştirme.
        - **Tailwind CSS v4**: Hızlı derleme, modern CSS özellikleri, doğrudan CSS üzerinden yapılandırma.
        - **Tailwind Variants**: Bileşen varyantlarında tip güvenliği, kolay tema yönetimi.
        - **TypeScript Desteği**: Tüm Nuxt UI bileşenlerinde tam otomatik tamamlama ve güvenli tip kullanımı.
        - **Vue Uyumluluğu**: Nuxt UI artık Nuxt dışında, saf Vue 3 projelerinde de kullanılabilir.
        - **Nuxt Devtools**: Bileşenleri canlı olarak incele, kodunu anında üret.

        > Nuxt UI v3, v2’ye göre tamamen yenilenmiş bir kütüphanedir. Geçiş için [göç rehberini](/getting-started/migration) inceleyin.

        Sıkça Sorulanlar:
          - **Vue ile uyumlu mu?** Evet, saf Vue projelerinde de kullanılabilir.
          - **UnoCSS desteği var mı?** Hayır, sadece Tailwind CSS desteklenir.
          - **Erişilebilirlik nasıl?** Reka UI ile otomatik ARIA ve klavye erişimi sağlanır, kendi testlerinizi yapın.
    - name: "theme"
      title: "Tema Yönetimi"
      content: |
        Nuxt UI teması, **Tailwind CSS v4**, CSS değişkenleri ve Tailwind Variants ile kolayca yönetilir ve özelleştirilebilir.

        - **Tailwind CSS v4**: Artık temayı doğrudan `@theme` CSS direktifiyle tanımlarsın. (Örn: ana renkler, font, breakpoint gibi tasarım değişkenleri.)
        - **Renk Sistemi**:
          - `primary`, `secondary`, `success`, `info`, `warning`, `error`, `neutral` gibi renk takma adları kullanılır.
          - Renkleri app.config.ts veya main.css içinde hızlıca özelleştirebilirsin.
          - Tüm renkler hem açık hem koyu modda otomatik yönetilir.
        - **Örnek ana dosya:**
          ```css
          @import "tailwindcss";
          @import "@nuxt/ui";

          @theme static {
            --color-primary: #00DC82;
            --color-secondary: #2563eb;
            --font-sans: 'Public Sans', sans-serif;
          }
          ```
        - **Renk ve tema alias’larını değiştirme:**
          ```ts
          // app.config.ts
          export default defineAppConfig({
            ui: {
              colors: {
                primary: 'blue',
                neutral: 'zinc'
              }
            }
          })
          ```
        - **Border radius, container genişliği, metin & arka plan renkleri** gibi tüm temel stiller, CSS değişkenleriyle ayarlanır.
        - **Bileşen teması ve varyantlar**: Tüm Nuxt UI component’leri, tema yapısına ve Tailwind Variants API’sine uygun olarak özelleştirilebilir. İstersen app.config.ts veya direkt bileşende `ui` ve `class` prop’larıyla override edebilirsin.
          - **Global override:** app.config.ts içinden yapılır.
          - **Component bazlı override:** `ui` prop’u ile slot-class’ları, `class` prop’u ile kök class’ı değiştirirsin.

        > Kendi marka renklerini ve stil varyantlarını projeye uygun şekilde hızlıca ekleyebilir, tüm arayüzde merkezi şekilde uygulayabilirsin.

        Ekstra:
        - **Detaylı renk sistemi ve örnekler için:** [Tailwind CSS renkler dökümanı](https://tailwindcss.com/docs/customizing-colors#color-palette-reference)
        - **@theme hakkında daha fazla bilgi için:** [Tailwind theme docs](https://tailwindcss.com/docs/theme)
    - name: "icons"
      title: "Icon Kullanımı"
      content: |
        Nuxt UI, **Nuxt Icon** modülünü otomatik olarak kurar ve Iconify üzerinden 200.000+ ikona erişim sağlar.

        - **Kullanım:**
          Her yerde `<UIcon name="i-lucide-lightbulb" class="size-5" />` şeklinde ikon kullanabilirsin.
          - Tüm ikon isimlerini ve koleksiyonları [icones.js.org](https://icones.js.org) üzerinden görebilirsin.
        - **Component icon prop:**
          Birçok Nuxt UI bileşeninde (`Button`, `Avatar`, vb.) doğrudan `icon` prop'u ile ikon gösterebilirsin.

        - **Yerel ikon koleksiyonu:**
          Kendi SVG ikonlarını `/app/assets/icons` dizinine koyup, `nuxt.config.ts` içinde custom koleksiyon olarak ekleyebilirsin.
          ```ts
          // nuxt.config.ts
          icon: {
            customCollections: [{
              prefix: 'custom',
              dir: './app/assets/icons'
            }]
          }
          ```
          Sonra: `<UIcon name="i-custom-add" />`

        - **Performans önerisi:**
          SSR veya client tarafında daha hızlı ikon yüklemek için ihtiyacın olan koleksiyonu projeye ekle:
          ```bash
          pnpm i @iconify-json/{koleksiyon_adi}
          ```
          (örn: `@iconify-json/uil`)

        - **Bileşenlerin varsayılan ikonları** `app.config.ts` içinden değiştirilebilir.

        > Daha fazla detay ve ileri kullanım için: [@nuxt/icon dökümanı](https://github.com/nuxt/icon)
    - name: "fonts"
      title: "Font Yönetimi"
      content: |
        Nuxt UI, **Nuxt Fonts** modülünü otomatik olarak kurar ve kullanıma hazır hale getirir.

        - **Kullanım:**
          Herhangi bir fontu direkt olarak main.css içinde tanımlayabilirsin:
          ```css
          @import "tailwindcss";
          @import "@nuxt/ui";
          @theme {
            --font-sans: 'Public Sans', sans-serif;
          }
          ```
          Tanımladığın font, otomatik olarak optimize edilip yüklenir.

        - **Devre dışı bırakmak için:**
          Eğer bu özelliği kapatmak istersen, nuxt.config.ts içinde şu şekilde ayarlayabilirsin:
          ```ts
          export default defineNuxtConfig({
            ui: {
              fonts: false
            }
          })
          ```

        > Kendi fontunu kolayca ekleyebilir ve projende performanslı şekilde kullanabilirsin.
    - name: "color-mode"
      title: "Aydınlık/Karanlık Mod (Color Mode)"
      content: |
        Nuxt UI, **Nuxt Color Mode** modülünü otomatik kurar ve aydınlık/karanlık tema arasında kolayca geçiş yapmanı sağlar.

        - **Kullanım:**
          `useColorMode` composable ile tema modunu kontrol edebilirsin:
          ```vue
          <script setup>
          const colorMode = useColorMode()
          const isDark = computed({
            get: () => colorMode.value === 'dark',
            set: val => colorMode.preference = val ? 'dark' : 'light'
          })
          </script>
          <template>
            <UButton
              :icon="isDark ? 'i-lucide-moon' : 'i-lucide-sun'"
              color="neutral"
              variant="ghost"
              @click="isDark = !isDark"
            />
          </template>
          ```

        - **Devre dışı bırakmak için:**
          Eğer bu özelliği kapatmak istersen, nuxt.config.ts içinde şu şekilde ayarlayabilirsin:
          ```ts
          export default defineNuxtConfig({
            ui: {
              colorMode: false
            }
          })
          ```

        > Karanlık ve aydınlık mod desteği Nuxt UI'da varsayılan olarak aktiftir.
    - name: "i18n"
      title: "Çoklu Dil (i18n)"
      content: |
        Nuxt UI ile çoklu dil ve yön (LTR/RTL) desteği kolayca eklenir.

        - **Kullanım:**
          Uygulamayı <UApp> componenti ile sarmala ve `locale` prop'u ile istediğin dili ekle:
          ```vue
          <script setup lang="ts">
          import { tr } from '@nuxt/ui/locale'
          </script>
          <template>
            <UApp :locale="tr">
              <NuxtPage />
            </UApp>
          </template>
          ```

        - **Kendi locale'ını eklemek:**
          `defineLocale` fonksiyonuyla yeni bir locale tanımlayabilirsin.

        - **Mevcut locale'i özelleştirmek:**
          `extendLocale` ile mevcut dildeki mesajları veya kodu güncelleyebilirsin.

        - **Dinamik dil değiştirme:**
          Nuxt I18n modülünü kurarak kullanıcıya dil değiştirme imkânı sunabilirsin.
          - `useI18n` ile aktif dili alıp, uygun locale ile <UApp>’a bağla.

        - **Yön Desteği (LTR/RTL):**
          Her locale için `dir` özelliği (örn: `'ltr'`, `'rtl'`) otomatik olarak tüm bileşenlere uygulanır.

        - **HTML etiketinde lang ve dir dinamiği:**
          `useHead` ile aktif dil ve yönü html etiketine yansıtabilirsin.

        > Türkçe dahil pek çok dil için hazır locale dosyaları gelir. Kendi projen için özel çeviriler ve yön ayarları kolayca yapılabilir.
  composables:
    - name: "defineShortcuts"
      link: "https://ui.nuxt.com/composables/define-shortcuts"
      usage: >
        Uygulama genelinde veya bileşen bazında klavye kısayolları tanımlamak için kullanılır.
        Kısayollar otomatik olarak platforma göre (meta/ctrl) uyarlanır ve keydown event'leri VueUse'un useEventListener fonksiyonuyla yönetilir.
        Özellikle hızlı erişim, komut paleti, modal tetikleme, navigasyon ve form işlemlerinde tercih edilir.
      params:
        - name: "config"
          type: "ShortcutsConfig"
          description: "Kısayol tanımlarını içeren obje (ör: { 'meta_k': handler })."
        - name: "options"
          type: "ShortcutsOptions (isteğe bağlı)"
          description: "Kısayol davranışına ilişkin ayarlar (örn: chainDelay). Varsayılan: 250ms"
      returns:
        - type: "void"
          description: "Kısayollar tanımlanır ve dinlenmeye başlanır."
      example: |
        <script setup lang="ts">
        const open = ref(false)

        defineShortcuts({
          meta_k: () => {
            open.value = !open.value
          }
        })
        </script>
      notes:
        - "Kısayol tanımları; tek tuş ('a'), kombinasyon ('meta_k'), dizi ('g-d') şeklinde yapılabilir."
        - "meta: macOS'ta ⌘, diğer platformlarda Ctrl anlamına gelir."
        - "Shortcut config fonksiyonu veya aşağıdaki gibi bir obje olabilir:"
        - |
          interface ShortcutConfig {
            handler: () => void
            usingInput?: boolean | string
          }
        - "`usingInput: false` (default) → input fokus yokken tetiklenir; `true` ise input fokusluyken de tetiklenir; `string` olarak input adı verilirse sadece o input fokusluyken çalışır."
        - "Escape, Enter, arrowleft, arrowright gibi özel tuşlar doğrudan tanımlanabilir."
        - "Kısayollar platform bağımsızdır; meta otomatik olarak ctrl'ye çevrilir."
        - "Menü itemlarından otomatik shortcut çıkarmak için `extractShortcuts` fonksiyonu ile kullanılabilir."
        - "Klavye tuşlarının tamamı için: https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values"
        - "Kısayolları UI'da göstermek için Kbd component dökümanına bakınız."
        - "VueUse kullanır, side-effect yoktur."
    - name: "useOverlay"
      link: "https://ui.nuxt.com/composables/use-overlay"
      usage: >
        Uygulama içinde Modal ve Slideover gibi overlay bileşenlerini programatik olarak kontrol etmek için kullanılır.
        useOverlay composable'ı createSharedComposable ile tanımlanmıştır; böylece uygulamanın her yerinden ortak overlay state yönetimi sağlar.
        Modals, slideovers ve benzeri overlay UI'larını açmak, kapatmak, güncellemek ve sonuç beklemek için tercih edilir.
      params: []
      returns:
        - type: "OverlayController"
          description: >
            Overlay kontrol ve fabrika fonksiyonlarını içeren nesne döner.
            Temel metotlar: create, open, close, patch, unmount, isOpen, overlays.
      methods:
        - name: "create"
          signature: "create(component: T, options?: OverlayOptions): OverlayInstance"
          description: >
            Bir overlay (ör: Modal/Slideover) oluşturur ve instance döner.
            - component: Overlay olarak açılacak bileşen.
            - options: defaultOpen, props, destroyOnClose gibi ayarlar.
        - name: "open"
          signature: "open(id: symbol, props?: ComponentProps<T>): OpenedOverlay<T>"
          description: >
            ID ile overlay'ı açar. Props ile bileşene yeni props geçebilir.
        - name: "close"
          signature: "close(id: symbol, value?: any): void"
          description: >
            ID ile overlay'ı kapatır. value ile modal sonucu dönebilir (await desteği).
        - name: "patch"
          signature: "patch(id: symbol, props: ComponentProps<T>): void"
          description: >
            ID ile overlay'ın props'unu günceller.
        - name: "unmount"
          signature: "unmount(id: symbol): void"
          description: >
            ID ile overlay'ı DOM'dan tamamen kaldırır.
        - name: "isOpen"
          signature: "isOpen(id: symbol): boolean"
          description: >
            Overlay'ın açık/kapalı durumunu kontrol eder.
        - name: "overlays"
          signature: "overlays: Overlay[]"
          description: >
            Bellekteki tüm overlay listesi.
      instance_api:
        - name: "open"
          signature: "open(props?: ComponentProps<T>): Promise<OpenedOverlay<T>>"
          description: "Overlay'ı açar, opsiyonel props geçer. Promise ile sonuç döner (close ile resolve edilir)."
        - name: "close"
          signature: "close(value?: any): void"
          description: "Overlay'ı kapatır, value ile modal sonucunu resolve eder."
        - name: "patch"
          signature: "patch(props: ComponentProps<T>)"
          description: "Overlay'ın props'unu günceller."
      example: |
        <script setup lang="ts">
        import { ModalA, ModalB, SlideoverA } from '#components'
        const overlay = useOverlay()
        // ModalA default props ile oluşturuldu
        const modalA = overlay.create(ModalA, { title: 'Welcome' })
        const modalB = overlay.create(ModalB)
        const slideoverA = overlay.create(SlideoverA)
        const openModalA = () => {
          modalA.open({ title: 'Hello' })
        }
        const openModalB = async () => {
          const modalBInstance = modalB.open()
          const input = await modalBInstance
          slideoverA.open({ input })
        }
        </script>
        <template>
          <button @click="openModalA">Open Modal</button>
        </template>
      notes:
        - "Overlay state uygulama genelinde ortaktır. useOverlay() her çağrıldığında aynı instance döner."
        - "Her overlay create ile oluşturulur, sonra open/close/patch/unmount ile yönetilir."
        - "open metodu promise döner; modal kapatıldığında await ile değer alınabilir. (Overlay'in close event'i emit etmesi gerekir.)"
        - "Overlay bileşenine provide/inject ile değer aktarmak doğrudan desteklenmez; props ile veri iletmek önerilir."
        - "Slideover, modal ve diğer overlay pattern'lerinde senkron ve asenkron kullanım mümkündür."
        - "DestroyOnClose ile kapatılan overlay hafızadan otomatik temizlenebilir."
        - "Bellekteki tüm overlay'lara overlay.overlays dizisiyle erişilebilir."
        - "Props güncellemeleri patch ile yapılır, kapalı overlay tekrar açıldığında güncel props geçerlidir."
    - name: "useToast"
      link: "https://ui.nuxt.com/composables/use-toast"
      usage: >
        Uygulama genelinde toast bildirimleri (başarı, hata, uyarı, info vs.) göstermek için kullanılır.
        Toast state'i Nuxt'un useState ile yönetilir ve uygulama genelinde reaktiftir.
        Aynı anda maksimum 5 toast gösterilir; yeni toast eklendiğinde limit aşılırsa en eski toast otomatik kaldırılır.
        Toast silindiğinde animasyonlar için 200ms gecikme uygulanır.
      params: []
      returns:
        - type: "ToastController"
          description: >
            Toast ekleme, güncelleme, silme, temizleme ve reaktif toast listesine erişim için metotlar içerir.
      methods:
        - name: "add"
          signature: "add(toast: Partial<Toast>): Toast"
          description: >
            Yeni bir toast bildirimi ekler.
            - toast: id (isteğe bağlı, verilmezse timestamp), open (varsayılan true), ve Toast arayüzündeki diğer alanlar.
            - Dönen değer: Eklenen tam Toast objesi.
        - name: "update"
          signature: "update(id: string | number, toast: Partial<Toast>): void"
          description: >
            Belirli bir toast bildiriminin alanlarını günceller.
            - id: Toast'un benzersiz kimliği.
            - toast: Güncellenecek alanlar.
        - name: "remove"
          signature: "remove(id: string | number): void"
          description: >
            Belirli bir toast bildirimini kaldırır. 200ms sonra state'den tamamen silinir (animasyon için).
        - name: "clear"
          signature: "clear(): void"
          description: "Tüm toast bildirimlerini bir anda temizler."
        - name: "toasts"
          signature: "toasts: Ref<Toast[]>"
          description: "Aktif olan tüm toast bildirimlerini reaktif dizi olarak döner."
      example: |
        <script setup lang="ts">
        const toast = useToast()
        function showToast() {
          toast.add({
            title: 'Başarılı!',
            description: 'İşleminiz başarıyla tamamlandı.',
            color: 'success'
          })
        }
        function updateToast(id) {
          toast.update(id, {
            title: 'Güncellendi',
            description: 'Toast bildirimi güncellendi.'
          })
        }
        function removeToast(id) {
          toast.remove(id)
        }
        function clearAllToasts() {
          toast.clear()
        }
        </script>
      notes:
        - "Uygulamanın kökünde (app.vue/layout) <UApp> ile sarmalama ve Toaster componentinin ekli olması gerekir."
        - "Aynı anda en fazla 5 toast görüntülenir. Limit aşılırsa en eski toast otomatik silinir."
        - "Toast silerken 200ms gecikme (exit animasyonu) uygulanır."
        - "Her toast eklerken id vermezsen timestamp ile otomatik id atanır."
        - "Toastların görünüm ve davranışlarını özelleştirmek için Toast component dökümanına bakınız."
        - "Tüm işlemler reaktif Ref<Toast[]> dizisinden takip edilebilir."
        - "useToast composable'ı ile global, modüler ve context bağımsız toast kontrolü mümkündür."
  components:
    - name: "UApp"
      link: "https://ui.nuxt.com/components/app"
      usage: >
        Uygulamanın kökünde (app.vue) kullanılarak, global context ve konfigürasyon sağlar.
        Tüm Nuxt UI componentleri, tema (dark/light), locale (i18n), global toasts, tooltips, modals ve slideover davranışları burada yönetilir.
        <UApp> ile sarmalanmamış bir uygulamada @nuxt/ui context özellikleri ve bazı gelişmiş UI özellikleri aktif olmaz.
        Genellikle şöyle kullanılır:
          <UApp>
            <NuxtPage />
          </UApp>
      props:
        - name: "tooltip"
          type: "TooltipProviderProps"
          default: "undefined"
          description: "Global tooltip davranışlarını yönetmek için ayar nesnesi."
        - name: "toaster"
          type: "ToasterProps | null"
          default: "undefined"
          description: "Global toast bildirimlerinin yönetimi için ayar nesnesi."
        - name: "locale"
          type: "Locale<Messages>"
          default: "undefined"
          description: "Uygulamanın varsayılan i18n dil ayarı (örn: 'tr', 'en')."
        - name: "portal"
          type: "string | HTMLElement"
          default: '"body"'
          description: "Global portal mount noktası (genellikle body)."
        - name: "scrollBody"
          type: "boolean | ScrollBodyOption"
          default: "undefined"
          description: "Body scroll davranışını (body lock) kontrol eder."
        - name: "nonce"
          type: "string"
          default: "undefined"
          description: "CSP (Content Security Policy) nonce değeri. Güvenlik için."
      slots:
        - name: "default"
          type: "VNode"
          description: "Uygulamanın ana içerik alanı. Tüm children burada render edilir."
      example: |
        <template>
          <UApp>
            <NuxtPage />
          </UApp>
        </template>
      notes:
        - "Slot desteğiyle hem tüm panel, hem de tek tek item içeriği (body, content) özelleştirilebilir."
        - "Çoklu panel açmak için type='multiple' kullanılmalı."
        - "Global trailingIcon app.config.ts veya vite.config.ts ile değiştirilebilir."
        - "items içindeki her nesneye disabled, trailingIcon, slot gibi özel property eklenebilir."
        - "Tasarım ve animasyonlar (ör: accordion-down) Tailwind + Nuxt UI theme ile yönetilir."
    - name: "UAccordion"
      link: "https://ui.nuxt.com/components/accordion"
      usage: >
        Çoklu panel açma/kapama ihtiyacı için kullanılır. Her panel, başlık ve içerik olarak yapılandırılır.
        Genellikle menü, SSS (FAQ), detaylı içerik veya filtre bloklarında tercih edilir.
        items prop'u ile başlık/icon/içerik ayarlanır; slot desteğiyle tam özelleştirilebilir yapı sunar.
        "type" ile tekli (single) ya da çoklu (multiple) açılır panel seçilebilir.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "Accordion'ın hangi HTML elementiyle render edileceği."
        - name: "items"
          type: "AccordionItem[]"
          default: "undefined"
          description: "Accordion satırlarını tanımlayan nesne dizisi."
        - name: "trailingIcon"
          type: "string"
          default: "'i-lucide-chevron-down'"
          description: "Başlık yanında gösterilecek sağ ikon (varsayılan chevron)."
        - name: "labelKey"
          type: "string"
          default: "'label'"
          description: "Başlık için kullanılacak key."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Accordion'ın tema ve stil konfigürasyonu (örn: header, content, body, icon vs.)"
        - name: "collapsible"
          type: "boolean"
          default: "true"
          description: "Aktif paneli tekrar tıklayınca kapatılabilir olmasını kontrol eder."
        - name: "defaultValue"
          type: "string | string[]"
          default: "undefined"
          description: "Varsayılan açık item değeri (index veya value ile)."
        - name: "modelValue"
          type: "string | string[]"
          default: "undefined"
          description: "Açık panel değerini dışarıdan kontrol etmek için (v-model ile bağlanır)."
        - name: "type"
          type: "'single' | 'multiple'"
          default: "'single'"
          description: "Aynı anda birden fazla panelin açılıp açılamayacağını belirler."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Accordion'ı veya tek tek item'ları devre dışı bırakır."
        - name: "unmountOnHide"
          type: "boolean"
          default: "true"
          description: "Kapalı item'ın içeriği DOM'dan tamamen kaldırılır mı?"
      slots:
        - name: "leading"
          type: "VNode"
          description: "Başlık önüne özel ikon veya içerik eklemek için."
        - name: "default"
          type: "VNode"
          description: "Accordion'un ana içeriği."
        - name: "trailing"
          type: "VNode"
          description: "Başlık sonuna özel ikon veya içerik eklemek için."
        - name: "content"
          type: "VNode"
          description: "Panelin içerik slotu; tam özelleştirilmiş içerik."
        - name: "body"
          type: "VNode"
          description: "Panelin body slotu; default style ile geliyor, içerik için."
      emits:
        - name: "update:modelValue"
          payload: "[value: string | string[] | undefined]"
          description: "Açık olan item(lar) değiştiğinde tetiklenir."
      example: |
        <script setup lang="ts">
        import type { AccordionItem } from '@nuxt/ui'

        const items = ref<AccordionItem[]>([
          {
            label: 'Icons',
            icon: 'i-lucide-smile',
            content: 'You have nothing to do, @nuxt/icon will handle it automatically.',
          },
          {
            label: 'Colors',
            icon: 'i-lucide-swatch-book',
            content: 'Choose a primary and a neutral color from your Tailwind CSS theme.',
          },
          {
            label: 'Components',
            icon: 'i-lucide-box',
            content: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.',
          },
        ])
        </script>

        <template>
          <UAccordion :items="items" />
        </template>
    - name: "UAlert"
      link: "https://ui.nuxt.com/components/alert"
      usage: >
        Kullanıcıya önemli bir durumu, başarı/uyarı/hata bilgisini ya da harekete geçirici mesajı göstermek için kullanılır.
        Başlık, açıklama, ikon, renk, variant ve aksiyon butonları ile tamamen özelleştirilebilir.
        Sıkça: form uyarıları, işlem sonuçları, info kutuları ve onay mesajlarında tercih edilir.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "Hangi HTML elementiyle render edileceği."
        - name: "title"
          type: "string"
          default: "undefined"
          description: "Alert başlık metni."
        - name: "description"
          type: "string"
          default: "undefined"
          description: "Açıklama/metin alanı."
        - name: "icon"
          type: "string"
          default: "undefined"
          description: "Başlık başında ikon gösterimi."
        - name: "avatar"
          type: "AvatarProps"
          default: "undefined"
          description: "Başlık başında avatar göstermek için."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Alert’in tema rengi."
        - name: "variant"
          type: "'solid' | 'outline' | 'soft' | 'subtle'"
          default: "'solid'"
          description: "Arka plan, kenarlık ve dolgu tarzı."
        - name: "orientation"
          type: "'vertical' | 'horizontal'"
          default: "'vertical'"
          description: "İçerik ve aksiyonların yönü."
        - name: "actions"
          type: "ButtonProps[]"
          default: "undefined"
          description: "Alert altında gösterilecek aksiyon butonları dizisi."
        - name: "close"
          type: "boolean | Partial<ButtonProps>"
          default: "false"
          description: "Alert’in sağında kapat düğmesi göstermek için."
        - name: "closeIcon"
          type: "string"
          default: "'i-lucide-x'"
          description: "Kapat düğmesinin ikonunu özelleştir."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots:
        - name: "leading"
          type: "VNode"
          description: "Başlık başına ikon, avatar veya custom içerik eklemek için."
        - name: "title"
          type: "VNode"
          description: "Başlık slotu (override için)."
        - name: "description"
          type: "VNode"
          description: "Açıklama slotu (override için)."
        - name: "actions"
          type: "VNode"
          description: "Aksiyon butonları için slot."
        - name: "close"
          type: "VNode"
          description: "Kapatma ikonunu/elementini override için slot."
      emits:
        - name: "update:open"
          payload: "[value: boolean]"
          description: "Alert kapatıldığında tetiklenir."
      example: |
        <template>
          <UAlert
            title="Heads up!"
            description="You can change the primary color in your app config."
            color="neutral"
            variant="outline"
            icon="i-lucide-terminal"
            close
          />
        </template>
      notes:
        - "Başlık, açıklama ve ikon birlikte veya ayrı ayrı kullanılabilir."
        - "close ve closeIcon ile Alert’i kullanıcıya kapattırabilir, ikonunu özelleştirebilirsin."
        - "actions ile bir veya birden fazla buton (örn: onay, iptal) ekleyebilirsin."
        - "orientation ile Alert’in layout’unu dikey veya yatay yapabilirsin."
        - "Renkler, variant ve ikon gibi stil değişiklikleri Tailwind ve Nuxt UI theme ile merkezi yönetilir."
        - "ui ve class prop’larıyla slot/alan bazında style override yapılabilir."
    - name: "UAvatar"
      link: "https://ui.nuxt.com/components/avatar"
      usage: >
        Kullanıcı profil fotoğrafı, kullanıcı/kişi/hesap göstergesi veya görsel temsili için kullanılır.
        Nuxt Image ile uyumlu, yoksa standart <img> ile render edilir.
        Fallback olarak ikon, metin veya alt bilgisinden otomatik baş harfler gösterir.
      props:
        - name: "as"
          type: "any"
          default: "'span'"
          description: "Avatar’ın hangi HTML elementiyle render edileceği."
        - name: "src"
          type: "string"
          default: "undefined"
          description: "Görselin URL adresi."
        - name: "alt"
          type: "string"
          default: "undefined"
          description: "Görsel için alternatif metin (fallback ve erişilebilirlik için)."
        - name: "icon"
          type: "string"
          default: "undefined"
          description: "Görsel yüklenemezse/boşsa fallback ikon göstermek için."
        - name: "text"
          type: "string"
          default: "undefined"
          description: "Görsel yüklenemezse/boşsa fallback text göstermek için."
        - name: "size"
          type: "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl'"
          default: "'md'"
          description: "Avatar boyutu (responsive, tailwind size ile tam uyumlu)."
        - name: "chip"
          type: "boolean | ChipProps"
          default: "false"
          description: "Avatar etrafında renkli bir chip/rozet göstermek için."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots: []
      emits: []
      example: |
        <template>
          <UAvatar
            src="https://github.com/benjamincanac.png"
            alt="Benjamin Canac"
            size="xl"
          />
        </template>
      notes:
        - "Nuxt Image yüklüyse otomatik olarak <NuxtImg> ile kullanılır; yoksa <img> ile render edilir."
        - "Görsel gelmezse/fail olursa önce icon, o yoksa text, en son alt bilgisinin baş harfleri gösterilir."
        - "Boyutlandırma size prop’u ile kolayca yapılır, responsive ve arayüz teması ile tam entegre."
        - "chip ile kullanıcı durum göstergesi (online/offline/durum rozeti) eklenebilir."
        - "Tüm <img> HTML attribute’ları (alt, loading, vs.) prop olarak iletilebilir."
        - "ui prop’u ile slot bazlı tasarım override edilebilir."
    - name: "UAvatarGroup"
      link: "https://ui.nuxt.com/components/avatar-group"
      usage: >
        Birden fazla kullanıcıyı/grubu, ekip üyelerini veya görsel katılımcıları bir arada, üst üste veya yan yana göstermek için kullanılır.
        İçerisine birden fazla <UAvatar> eklenir, taşan sayılar için otomatik "+N" avatar gösterimi desteği bulunur.
        Sıkça: ekip listesi, proje üyeleri, kullanıcı etkileşim alanları ve yorum bloklarında tercih edilir.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "Avatar grubunun hangi HTML elementiyle render edileceği."
        - name: "size"
          type: "'md' | '3xs' | '2xs' | 'xs' | 'sm' | 'lg' | 'xl' | '2xl' | '3xl'"
          default: "'md'"
          description: "Tüm avatarların boyutu (tek bir yerden topluca ayarlanır)."
        - name: "max"
          type: "string | number"
          default: "undefined"
          description: "Ekranda gösterilecek maksimum avatar sayısı; fazlası '+N' olarak gösterilir."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots:
        - name: "default"
          type: "VNode"
          description: "Tüm avatar itemlarını (UAvatar) içine alır."
      emits: []
      example: |
        <template>
          <UAvatarGroup size="xl" :max="2">
            <UAvatar src="https://github.com/benjamincanac.png" alt="Benjamin Canac" />
            <UAvatar src="https://github.com/romhml.png" alt="Romain Hamel" />
            <UAvatar src="https://github.com/noook.png" alt="Neil Richter" />
          </UAvatarGroup>
        </template>
      notes:
        - "İçine birden fazla <UAvatar> veya slot ile özelleştirilmiş avatarlar eklenebilir."
        - "max ile gruptaki avatar sayısı limiti belirlenir; fazlası '+N' olarak kısaltılır."
        - "Tooltip, Chip, Link gibi wrapper componentler ile birlikte kullanılırsa en dışa UAvatarGroup yazılır."
        - "size ile tüm avatarlar topluca, tek bir noktadan boyutlandırılır."
        - "Görsel veya fallback için UAvatar’ın tüm yetenekleri geçerlidir."
        - "ui prop’u ile slot bazlı tasarım override edilebilir."
    - name: "UBadge"
      link: "https://ui.nuxt.com/components/badge"
      usage: >
        Kısa bir metin, sayı veya durum göstergesi olarak kullanılır. Etiket, kategori, durum, sayaç veya bilgi amaçlı ikon/metin/renkli badge alanlarında tercih edilir.
        Slot veya label prop’u ile içerik tanımlanır. Sıkça: durum etiketi, kullanıcı rolü, bildirim sayacı veya kategori belirteci olarak kullanılır.
      props:
        - name: "as"
          type: "any"
          default: "'span'"
          description: "Badge’in hangi HTML elementiyle render edileceği."
        - name: "label"
          type: "string | number"
          default: "undefined"
          description: "Badge’in içerik metni (alternatif olarak default slot ile de verilebilir)."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Badge’in renk teması."
        - name: "variant"
          type: "'solid' | 'outline' | 'soft' | 'subtle'"
          default: "'solid'"
          description: "Badge’in dolgu/kenarlık tarzı."
        - name: "size"
          type: "'md' | 'xs' | 'sm' | 'lg' | 'xl'"
          default: "'md'"
          description: "Badge’in boyutu."
        - name: "square"
          type: "boolean"
          default: "false"
          description: "Badge’i tam kare yapmak için."
        - name: "icon"
          type: "string"
          default: "undefined"
          description: "Badge içinde bir ikon göstermek için."
        - name: "avatar"
          type: "AvatarProps"
          default: "undefined"
          description: "Badge içinde bir avatar göstermek için."
        - name: "leading"
          type: "boolean"
          default: "false"
          description: "İkonun badge’in solunda gösterilmesini sağlar."
        - name: "leadingIcon"
          type: "string"
          default: "undefined"
          description: "Sol tarafa özel ikon eklemek için."
        - name: "trailing"
          type: "boolean"
          default: "false"
          description: "İkonun badge’in sağında gösterilmesini sağlar."
        - name: "trailingIcon"
          type: "string"
          default: "undefined"
          description: "Sağ tarafa özel ikon eklemek için."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots:
        - name: "leading"
          type: "VNode"
          description: "Badge’in solunda özel ikon/avatar gösterimi için slot."
        - name: "default"
          type: "VNode"
          description: "Badge’in ana içerik slotu."
        - name: "trailing"
          type: "VNode"
          description: "Badge’in sağında özel ikon/avatar gösterimi için slot."
      emits: []
      example: |
        <template>
          <UBadge color="primary" size="md" variant="solid" icon="i-lucide-rocket">
            Badge
          </UBadge>
        </template>
      notes:
        - "Kısa etiket, sayı veya durum göstergesi için slot veya label prop’u kullanılabilir."
        - "Renk, boyut, dolgu ve kare yapı gibi stil özellikleri hızlıca prop üzerinden değiştirilebilir."
        - "İkon/avatar badge’in başına, sonuna veya her ikisine eklenebilir; leading/trailing prop’ları ile pozisyon ayarlanır."
        - "Slotlar ile badge’in sol/sağ/orta kısmı tamamen özelleştirilebilir."
        - "ui prop’u ile slot bazında style/class override yapılabilir."
    - name: "UBreadcrumb"
      link: "https://ui.nuxt.com/components/breadcrumb"
      usage: >
        Uygulama veya web sitesinde sayfa hiyerarşisini, üstten alta giden gezinme yolunu göstermek için kullanılır.
        Genellikle sayfa başında, kullanıcıya mevcut konumu ve hızlı geri dönüş (navigasyon) imkanı sunar.
        items prop’u ile her adımın başlık, ikon, link ve isteğe bağlı custom içeriği ayarlanabilir.
      props:
        - name: "as"
          type: "any"
          default: "'nav'"
          description: "Breadcrumb’ın hangi HTML elementiyle render edileceği."
        - name: "items"
          type: "BreadcrumbItem[]"
          default: "undefined"
          description: "Geçerli breadcrumb yolunu oluşturan adım nesneleri dizisi."
        - name: "separatorIcon"
          type: "string"
          default: "'i-lucide-chevron-right'"
          description: "Adımlar arası ayraç (ikon) - varsayılan chevron."
        - name: "labelKey"
          type: "string"
          default: "'label'"
          description: "Breadcrumb item için başlık/key alanı."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots:
        - name: "item"
          type: "VNode"
          description: "Her adımın tamamını override etmek için slot."
        - name: "item-leading"
          type: "VNode"
          description: "Adım başında özel ikon/avatar göstermek için slot."
        - name: "item-label"
          type: "VNode"
          description: "Adım başlığını özel içerik ile override etmek için slot."
        - name: "item-trailing"
          type: "VNode"
          description: "Adım sonunda özel ikon/avatar göstermek için slot."
        - name: "separator"
          type: "VNode"
          description: "Adımlar arası özel ayraç göstermek için slot."
      emits: []
      example: |
        <script setup lang="ts">
        import type { BreadcrumbItem } from '@nuxt/ui'
        const items = ref<BreadcrumbItem[]>([
          { label: 'Home', icon: 'i-lucide-house' },
          { label: 'Components', icon: 'i-lucide-box', to: '/components' },
          { label: 'Breadcrumb', icon: 'i-lucide-link', to: '/components/breadcrumb' },
        ])
        </script>

        <template>
          <UBreadcrumb :items="items" separator-icon="i-lucide-arrow-right" />
        </template>
      notes:
        - "items dizisinde her adım için label, icon, avatar, to (link) gibi özellikler kullanılabilir."
        - "Varsayılan olarak to olmayan adımlar span olarak render edilir, to varsa link olarak."
        - "separatorIcon ile ayraç ikonunu değiştirebilir, separator slot ile tamamen özelleştirebilirsin."
        - "Custom slot ve slot key desteğiyle dropdown, tooltip, avatar gibi gelişmiş yapı kurabilirsin."
        - "ui prop’u ile slot bazlı tasarım override yapılabilir."
    - name: "UButton"
      link: "https://ui.nuxt.com/components/button"
      usage: >
        Bir eylemi tetiklemek veya link olarak başka sayfaya yönlendirmek için kullanılır.
        Slot veya label prop’u ile içerik verilebilir.
        Farklı renk, boyut, variant ve ikon/avatar desteğiyle tamamen özelleştirilebilir.
        Hem buton hem de link olarak davranabilir, loading ve disabled durumları destekler.
      props:
        - name: "label"
          type: "string"
          default: "undefined"
          description: "Buton metni; default slot ile de içerik verilebilir."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Butonun renk teması."
        - name: "activeColor"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "undefined"
          description: "Aktif durumda farklı renk temasını ayarlamak için."
        - name: "variant"
          type: "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost'"
          default: "'solid'"
          description: "Butonun stil/variant türü."
        - name: "activeVariant"
          type: "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost'"
          default: "undefined"
          description: "Aktif durumda farklı variant ayarlamak için."
        - name: "size"
          type: "'md' | 'xs' | 'sm' | 'lg' | 'xl'"
          default: "'md'"
          description: "Buton boyutu."
        - name: "square"
          type: "boolean"
          default: "false"
          description: "Butonun tam kare görünmesini sağlar."
        - name: "block"
          type: "boolean"
          default: "false"
          description: "Butonun %100 genişlikte olmasını sağlar."
        - name: "loading"
          type: "boolean"
          default: "false"
          description: "Butonun yüklenme/işlemde olduğunu gösterir, disabled olur."
        - name: "loadingAuto"
          type: "boolean"
          default: "false"
          description: "Tıklama sonrası promise dönüyorsa otomatik loading animasyonu başlatır."
        - name: "loadingIcon"
          type: "string"
          default: "'i-lucide-loader-circle'"
          description: "Yüklenme animasyonunda gösterilecek ikon."
        - name: "icon"
          type: "string"
          default: "undefined"
          description: "Butonun içinde ikon göstermek için."
        - name: "avatar"
          type: "AvatarProps"
          default: "undefined"
          description: "Butonun içinde avatar göstermek için."
        - name: "leading"
          type: "boolean"
          default: "false"
          description: "İkon/avatarı sol tarafa sabitlemek için."
        - name: "leadingIcon"
          type: "string"
          default: "undefined"
          description: "Sol tarafa özel ikon göstermek için."
        - name: "trailing"
          type: "boolean"
          default: "false"
          description: "İkon/avatarı sağ tarafa sabitlemek için."
        - name: "trailingIcon"
          type: "string"
          default: "undefined"
          description: "Sağ tarafa özel ikon göstermek için."
        - name: "type"
          type: "'reset' | 'submit' | 'button'"
          default: "'button'"
          description: "Butonun HTML type değeri."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Butonun devre dışı olup olmayacağını ayarlar."
        - name: "to"
          type: "string | object"
          default: "undefined"
          description: "Butonu router-link veya harici link olarak kullanmak için (örn: /home, https://...)."
        - name: "target"
          type: "string"
          default: "undefined"
          description: "Harici linklerde target özniteliği."
        - name: "active"
          type: "boolean"
          default: "false"
          description: "Aktif durumu elle kontrol etmek için."
        - name: "activeClass"
          type: "string"
          default: "undefined"
          description: "Buton aktifken eklenecek özel CSS class."
        - name: "inactiveClass"
          type: "string"
          default: "undefined"
          description: "Buton aktif değilken eklenecek özel CSS class."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots:
        - name: "leading"
          type: "VNode"
          description: "Butonun sol tarafına özel ikon/avatar eklemek için slot."
        - name: "default"
          type: "VNode"
          description: "Buton metni (ya da ikon-only kullanımlarında boş bırakılabilir)."
        - name: "trailing"
          type: "VNode"
          description: "Butonun sağ tarafına özel ikon/avatar eklemek için slot."
      emits: []
      example: |
        <template>
          <UButton color="primary" size="md" variant="solid" icon="i-lucide-rocket">
            Button
          </UButton>
        </template>
      notes:
        - "Buton slot ile ya da label prop’u ile doldurulabilir; slot varsa prop öncelikli değildir."
        - "Farklı renk, boyut, variant ile (örn: ghost, link, outline, solid) görsel uyum sağlayabilirsin."
        - "İkon veya avatar sol/sağda, tek başına ya da metinle birlikte gösterilebilir."
        - "Link olarak davranabilmesi için to/target prop’u kullanılabilir."
        - "loading ve loadingAuto ile animasyonlu yüklenme/işlemde durumu yönetilir."
        - "active/activeClass ile router linklerde aktif state manuel/otomatik yönetilir."
        - "ui prop’u ile slot bazında style/class override yapılabilir."
    - name: "UButtonGroup"
      link: "https://ui.nuxt.com/components/button-group"
      usage: >
        Birden fazla buton veya buton benzeri componenti yatay ya da dikey şekilde gruplayarak aralarındaki görsel ve yapısal bütünlüğü sağlar.
        Sıkça: filtreler, toolbar, tab, form aksiyonları, input kombinasyonları gibi durumlarda tercih edilir.
        İçine sadece UButton değil, Input, Badge, DropdownMenu, Tooltip gibi diğer UI elementleri de eklenebilir.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "Buton grubunun hangi HTML elementiyle render edileceği."
        - name: "size"
          type: "'md' | 'xs' | 'sm' | 'lg' | 'xl'"
          default: "'md'"
          description: "Tüm child butonların ve içeriklerin boyutu topluca ayarlanır."
        - name: "orientation"
          type: "'horizontal' | 'vertical'"
          default: "'horizontal'"
          description: "Buton grubunun yatay veya dikey dizilimini belirler."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots:
        - name: "default"
          type: "VNode"
          description: "Grup içeriği; UButton, Input, Badge ve diğer custom bileşenler burada yer alır."
      emits: []
      example: |
        <template>
          <UButtonGroup size="xl" orientation="horizontal">
            <UButton color="neutral" variant="subtle" label="Button" />
            <UButton color="neutral" variant="outline" icon="i-lucide-chevron-down" />
          </UButtonGroup>
        </template>
      notes:
        - "UButton, UInput, UBadge, UDropdownMenu, UTooltip gibi birden fazla farklı component grupta beraber kullanılabilir."
        - "Tasarımda köşe yuvarlatma, aralıklama ve kenar stili otomatik olarak yönetilir."
        - "orientation ile yatay (horizontal) veya dikey (vertical) grup yapılabilir."
        - "size ile gruptaki tüm child componentler aynı boyutta gösterilir."
        - "ui prop’u ile grup stil ve yapısı override edilebilir."
    - name: "UCalendar"
      link: "https://ui.nuxt.com/components/calendar"
      usage: >
        Takvim üzerinden tekli, çoklu veya aralıklı (range) tarih seçimi için kullanılır.
        v-model ile tarih kontrolü, props ile çok sayıda görsel ve fonksiyonel özelleştirme yapılabilir.
        Sıkça: formlar, date-picker, tarih filtreleme, etkinlik ve rezervasyon seçimlerinde kullanılır.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "Takvimin hangi HTML elementiyle render edileceği."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Takvimde seçili günlerin ve aksanların renk teması."
        - name: "size"
          type: "'md' | 'xs' | 'sm' | 'lg' | 'xl'"
          default: "'md'"
          description: "Takvimin genel boyutu ve font büyüklüğü."
        - name: "range"
          type: "boolean"
          default: "false"
          description: "Tarih aralığı (date range) seçimine izin verir."
        - name: "multiple"
          type: "boolean"
          default: "false"
          description: "Çoklu tarih seçimine izin verir."
        - name: "modelValue"
          type: "DateValue | DateRange | DateValue[] | null | undefined"
          default: "undefined"
          description: "Seçili tarihi v-model ile bağlamak için."
        - name: "defaultValue"
          type: "DateValue | DateRange | DateValue[]"
          default: "undefined"
          description: "Varsayılan başlangıç değeri."
        - name: "monthControls"
          type: "boolean"
          default: "true"
          description: "Ay değiştirme kontrollerini göster/gizle."
        - name: "yearControls"
          type: "boolean"
          default: "true"
          description: "Yıl değiştirme kontrollerini göster/gizle."
        - name: "numberOfMonths"
          type: "number"
          default: "1"
          description: "Aynı anda gösterilecek ay sayısı."
        - name: "fixedWeeks"
          type: "boolean"
          default: "true"
          description: "Her zaman 6 hafta (sabit grid) göster."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Takvim tamamen devre dışı (kullanılamaz) olur."
        - name: "readonly"
          type: "boolean"
          default: "false"
          description: "Takvim sadece okunabilir (seçim yapılamaz) olur."
        - name: "minValue"
          type: "DateValue"
          default: "undefined"
          description: "Seçilebilecek minimum tarih."
        - name: "maxValue"
          type: "DateValue"
          default: "undefined"
          description: "Seçilebilecek maksimum tarih."
        - name: "nextYearIcon"
          type: "string"
          default: "undefined"
          description: "Sonraki yıl butonu için ikon."
        - name: "nextYear"
          type: "ButtonProps"
          default: "undefined"
          description: "Sonraki yıl butonunun yapılandırılması."
        - name: "nextMonthIcon"
          type: "string"
          default: "undefined"
          description: "Sonraki ay butonu için ikon."
        - name: "nextMonth"
          type: "ButtonProps"
          default: "undefined"
          description: "Sonraki ay butonunun yapılandırılması."
        - name: "prevYearIcon"
          type: "string"
          default: "undefined"
          description: "Önceki yıl butonu için ikon."
        - name: "prevYear"
          type: "ButtonProps"
          default: "undefined"
          description: "Önceki yıl butonunun yapılandırılması."
        - name: "prevMonthIcon"
          type: "string"
          default: "undefined"
          description: "Önceki ay butonu için ikon."
        - name: "prevMonth"
          type: "ButtonProps"
          default: "undefined"
          description: "Önceki ay butonunun yapılandırılması."
        - name: "isDateDisabled"
          type: "Matcher"
          default: "undefined"
          description: "Belirli günleri devre dışı bırakmak için fonksiyon."
        - name: "isDateUnavailable"
          type: "Matcher"
          default: "undefined"
          description: "Belirli günleri ‘unavailable’ olarak işaretlemek için fonksiyon."
        - name: "isDateHighlightable"
          type: "Matcher"
          default: "undefined"
          description: "Belirli günleri vurgulamak için fonksiyon."
        - name: "minValue"
          type: "DateValue"
          default: "undefined"
          description: "Seçilebilecek minimum tarih."
        - name: "maxValue"
          type: "DateValue"
          default: "undefined"
          description: "Seçilebilecek maksimum tarih."
        - name: "weekStartsOn"
          type: "0 | 1 | 2 | 3 | 4 | 5 | 6"
          default: "undefined"
          description: "Haftanın hangi günle başlayacağını belirler (0: Pazar, 1: Pazartesi vs)."
        - name: "allowNonContiguousRanges"
          type: "boolean"
          default: "false"
          description: "Range seçerken ‘unavailable’ günler araya girebilir mi?"
        - name: "pagedNavigation"
          type: "boolean"
          default: "false"
          description: "Sonraki/önceki butonları birden çok ayı birlikte değiştirir."
        - name: "preventDeselect"
          type: "boolean"
          default: "false"
          description: "Seçili tarihi kaldırmayı engeller."
        - name: "maximumDays"
          type: "number"
          default: "undefined"
          description: "Range seçiminde maksimum gün sayısı."
        - name: "disableDaysOutsideCurrentView"
          type: "boolean"
          default: "false"
          description: "Görünürdeki ay dışındaki günler seçilemez olur."
        - name: "fixedDate"
          type: "'start' | 'end'"
          default: "undefined"
          description: "Range seçiminde sabitlenmiş uç (başlangıç/bitis)."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots:
        - name: "heading"
          type: "VNode"
          description: "Takvimin üst başlığını override etmek için slot."
        - name: "day"
          type: "VNode"
          description: "Her bir günün hücresini özelleştirmek için slot."
        - name: "week-day"
          type: "VNode"
          description: "Haftanın gün adlarını özelleştirmek için slot."
      emits:
        - name: "update:modelValue"
          payload: "[date: DateValue | DateRange | DateValue[] | null | undefined]"
          description: "Tarih seçimi değiştiğinde tetiklenir (v-model ile)."
        - name: "update:placeholder"
          payload: "[date: DateValue]"
          description: "Görüntülenen placeholder ay/tarih değişince tetiklenir."
        - name: "update:startValue"
          payload: "[date: DateValue | undefined]"
          description: "Range başı değiştiğinde tetiklenir."
      example: |
        <script setup lang="ts">
        import { CalendarDate } from '@internationalized/date'
        const value = ref(new CalendarDate(2022, 2, 3))
        </script>
        <template>
          <UCalendar v-model="value" color="primary" size="md" />
        </template>
      notes:
        - "v-model ile seçili tarih veya aralık dışarıdan kontrol edilebilir."
        - "range ve multiple ile çoklu ya da aralıklı seçim kolayca yapılır."
        - "minValue/maxValue ile sınırlandırılmış günler; isDateDisabled/isDateUnavailable ile özel logic uygulanabilir."
        - "numberOfMonths ile çoklu ay gösterimi; weekStartsOn ile ilk gün seçimi yapılabilir."
        - "Takvimdeki her günü, başlık ve hafta adlarını ilgili slotlar ile override edebilirsin."
        - "UI ve tüm renk, boyut varyantları merkezi theme yönetimiyle özelleştirilebilir."
        - "Uluslararası date logic’i için @internationalized/date paketi kullanılır."
    - name: "UCard"
      link: "https://ui.nuxt.com/components/card"
      usage: >
        İçerikleri bölmek, gruplamak veya vurgulamak için kutu (card) şeklinde kullanılan bileşendir.
        Başlık (header), ana içerik (body) ve alt alan (footer) ile üç ana yapıda çalışır.
        Dashboard, profil, ürün kutusu, bilgi kutusu ve özet bölümlerinde sıklıkla tercih edilir.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "Card'ın hangi HTML elementiyle render edileceği."
        - name: "variant"
          type: "'solid' | 'outline' | 'soft' | 'subtle'"
          default: "'outline'"
          description: "Card'ın genel görünüm ve stil varyantı."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots:
        - name: "header"
          type: "VNode"
          description: "Card'ın üst kısmı (başlık ve aksiyonlar için)."
        - name: "default"
          type: "VNode"
          description: "Card'ın ana içeriği (body)."
        - name: "footer"
          type: "VNode"
          description: "Card'ın alt kısmı (ek bilgi, butonlar veya notlar için)."
      emits: []
      example: |
        <template>
          <UCard variant="subtle">
            <template #header>
              <Placeholder class="h-8" />
            </template>
            <Placeholder class="h-32" />
            <template #footer>
              <Placeholder class="h-8" />
            </template>
          </UCard>
        </template>
      notes:
        - "Card, header/body/footer olmak üzere üç ana bölüme slot ile içerik eklenerek özelleştirilebilir."
        - "variant ile kartın arka planı, kenarlık ve gölgelendirme tarzı hızlıca değiştirilebilir."
        - "Dışarıdan verilen class ve ui prop’ları ile slot bazında stiller merkezi olarak override edilebilir."
        - "Tüm içerik alanları responsive ve padding’li olarak gelir, ekstra layout’a gerek yoktur."
    - name: "UCarousel"
      link: "https://ui.nuxt.com/components/carousel"
      usage: >
        Yatay veya dikey kaydırmalı/slaytlı içerik galerisi oluşturmak için kullanılır.
        Swipe, touch, drag, ok tuşları ve dots ile kontrol edilebilir.
        Görsel galeri, kart liste, ürün kaydırıcı, testimonial/yorum alanları gibi birçok senaryoda kullanılır.
        Embla Carousel altyapısını kullanır, gelişmiş plugin (autoplay, auto-scroll, fade, wheel, auto-height, class-names) ve tam özelleştirme imkanı sunar.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "Carousel'ın hangi HTML elementiyle render edileceği."
        - name: "items"
          type: "CarouselItem[]"
          default: "undefined"
          description: "Kaydırılacak/gösterilecek item'lar dizisi."
        - name: "orientation"
          type: "'horizontal' | 'vertical'"
          default: "'horizontal'"
          description: "Carousel'ın yatay mı dikey mi olacağını belirler."
        - name: "arrows"
          type: "boolean"
          default: "false"
          description: "Önceki/sonraki ok butonlarını gösterir."
        - name: "prev"
          type: "ButtonProps"
          default: "undefined"
          description: "Önceki butonun tüm özelliklerini ayarlamak için."
        - name: "prevIcon"
          type: "string"
          default: "'i-lucide-arrow-left'"
          description: "Önceki buton ikonunu ayarla."
        - name: "next"
          type: "ButtonProps"
          default: "undefined"
          description: "Sonraki butonun tüm özelliklerini ayarlamak için."
        - name: "nextIcon"
          type: "string"
          default: "'i-lucide-arrow-right'"
          description: "Sonraki buton ikonunu ayarla."
        - name: "dots"
          type: "boolean"
          default: "false"
          description: "Alt tarafta slide'lar için dot (navigasyon) göster."
        - name: "autoplay"
          type: "boolean | object"
          default: "false"
          description: "Embla Autoplay plugin desteği (otomatik geçiş)."
        - name: "autoScroll"
          type: "boolean | object"
          default: "false"
          description: "Embla Auto Scroll plugin desteği (otomatik kaydırma)."
        - name: "autoHeight"
          type: "boolean | object"
          default: "false"
          description: "Embla Auto Height plugin desteği (en yüksek slide'a göre container yüksekliğini ayarla)."
        - name: "classNames"
          type: "boolean | object"
          default: "false"
          description: "Embla Class Names plugin desteği."
        - name: "fade"
          type: "boolean | object"
          default: "false"
          description: "Embla Fade plugin desteği (slide'lar fade animasyonu ile değişir)."
        - name: "wheelGestures"
          type: "any"
          default: "false"
          description: "Embla Wheel Gestures plugin desteği (mouse/trackpad ile scroll)."
        - name: "align"
          type: "AlignmentOptionType"
          default: "'center'"
          description: "Slide'ların hizalama ayarı (center, start, end, vs)."
        - name: "containScroll"
          type: "ScrollContainOptionType"
          default: "'trimSnaps'"
          description: "Kaydırmada slide'ların taşmasını kontrol eder."
        - name: "slidesToScroll"
          type: "SlidesToScrollOptionType"
          default: "1"
          description: "Bir seferde kaç slide ilerleyeceğini belirler."
        - name: "dragFree"
          type: "boolean"
          default: "false"
          description: "Slide'lar serbest (free scroll) kaydırılabilir mi?"
        - name: "dragThreshold"
          type: "number"
          default: "10"
          description: "Kullanıcı kaydırmayı başlatmadan önceki eşik."
        - name: "inViewThreshold"
          type: "number | number[]"
          default: "0"
          description: "Slide'ın görünür kabul edileceği oran."
        - name: "loop"
          type: "boolean"
          default: "false"
          description: "Slide'lar sonsuz döngü ile başa/sona tekrar bağlanır."
        - name: "skipSnaps"
          type: "boolean"
          default: "false"
          description: "Slide snap davranışını devre dışı bırakır."
        - name: "duration"
          type: "number"
          default: "25"
          description: "Geçiş animasyonlarının süresi (ms)."
        - name: "startIndex"
          type: "number"
          default: "0"
          description: "Başlangıçta gösterilecek slide indeksi."
        - name: "watchDrag"
          type: "boolean"
          default: "true"
          description: "Drag hareketleri izlenir mi?"
        - name: "watchResize"
          type: "boolean"
          default: "true"
          description: "Resize olaylarında carousel otomatik güncellenir mi?"
        - name: "watchSlides"
          type: "boolean"
          default: "true"
          description: "Slide içeriği değiştiğinde yeniden hesaplama yapılır mı?"
        - name: "watchFocus"
          type: "boolean"
          default: "true"
          description: "Odak değişimlerinde carousel kendini günceller mi?"
        - name: "active"
          type: "boolean"
          default: "true"
          description: "Carousel aktif mi (devre dışı bırakmak için false)?"
        - name: "breakpoints"
          type: "object"
          default: "{}"
          description: "Farklı ekran boyutları için responsive ayarlar."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots:
        - name: "default"
          type: "VNode"
          description: "Her bir slide için item'ı render eden ana slot (item prop'u ile kullanılır)."
      emits:
        - name: "select"
          payload: "[selectedIndex: number]"
          description: "Kullanıcı bir slide seçtiğinde tetiklenir."
      example: |
        <script setup lang="ts">
        const items = [
          'https://picsum.photos/640/640?random=1',
          'https://picsum.photos/640/640?random=2',
          'https://picsum.photos/640/640?random=3'
        ]
        </script>
        <template>
          <UCarousel v-slot="{ item }" :items="items" arrows dots class="w-full max-w-xs mx-auto">
            <img :src="item" width="320" height="320" class="rounded-lg">
          </UCarousel>
        </template>
      notes:
        - "items prop'u ile string veya object olarak slide içeriği verilebilir, her biri default slotta item olarak erişilir."
        - "orientation ile yatay (horizontal) veya dikey (vertical) kaydırıcı kolayca oluşturulur."
        - "arrows ve dots ile tam navigasyon deneyimi sağlanır, tüm kontrol butonları slot/prop ile özelleştirilebilir."
        - "Embla Carousel'in tüm plugin'leri props ile etkinleştirilebilir: autoplay, auto-scroll, fade, wheelGestures, autoHeight, classNames."
        - "Carousel responsive ve touch/swipe desteğiyle mobil uyumludur, container ve item'a özel class verilebilir."
        - "ui prop’u ile slot bazlı stil ve yapı override edilebilir."
    - name: "UCheckbox"
      link: "https://ui.nuxt.com/components/checkbox"
      usage: >
        Kullanıcıdan onay, çoklu seçim veya “okudum/kabul ettim” gibi durumları almak için kullanılır.
        v-model veya default-value ile checked/unchecked/indeterminate (kararsız) durumlarını kolayca kontrol edebilirsin.
        Sıkça: form onayı, ayar listeleri, toplu seçim, veri filtreleme gibi alanlarda kullanılır.
      props:
        - name: "as"
          type: "any"
          default: "'input'"
          description: "Checkbox’ın hangi HTML elementiyle render edileceği."
        - name: "label"
          type: "string"
          default: "undefined"
          description: "Checkbox yanındaki açıklama metni."
        - name: "description"
          type: "string"
          default: "undefined"
          description: "Label altında açıklayıcı kısa metin."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Checkbox’ın renk teması."
        - name: "variant"
          type: "'card' | 'list'"
          default: "'list'"
          description: "Checkbox’ın kutu (card) veya satır (list) görünümünde olması."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Checkbox ve metinlerin boyutu."
        - name: "indicator"
          type: "'start' | 'end' | 'hidden'"
          default: "'start'"
          description: "İşaret kutusunun pozisyonu veya gizli olması."
        - name: "icon"
          type: "string"
          default: "'i-lucide-check'"
          description: "Checked durumunda gösterilecek ikon."
        - name: "indeterminateIcon"
          type: "string"
          default: "'i-lucide-minus'"
          description: "Kararsız (indeterminate) durumda gösterilecek ikon."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Checkbox’ın devre dışı bırakılması."
        - name: "value"
          type: "any"
          default: "undefined"
          description: "Checkbox’ın form submit sırasında göndereceği değer."
        - name: "name"
          type: "string"
          default: "undefined"
          description: "Form gönderiminde kullanılacak name attribute’u."
        - name: "required"
          type: "boolean"
          default: "false"
          description: "Checkbox’ın zorunlu olup olmadığı."
        - name: "id"
          type: "string"
          default: "undefined"
          description: "Checkbox için unique id değeri."
        - name: "defaultValue"
          type: "boolean | 'indeterminate'"
          default: "undefined"
          description: "Varsayılan seçim durumu (checked, unchecked, indeterminate)."
        - name: "modelValue"
          type: "boolean | 'indeterminate'"
          default: "undefined"
          description: "Checked/unchecked/indeterminate durumu v-model ile kontrol edilir."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots:
        - name: "label"
          type: "VNode"
          description: "Checkbox yanına özel içerik/etiket eklemek için slot."
        - name: "description"
          type: "VNode"
          description: "Label altında açıklama göstermek için slot."
      emits:
        - name: "change"
          payload: "[event: Event]"
          description: "Kullanıcı seçim değişikliğinde tetiklenir."
        - name: "update:modelValue"
          payload: "[value: boolean | 'indeterminate']"
          description: "Checkbox’ın checked durumu değiştiğinde tetiklenir (v-model ile)."
      example: |
        <template>
          <UCheckbox
            label="Kabul ediyorum"
            description="Gizlilik politikasını okudum, kabul ediyorum."
            color="primary"
            variant="card"
            default-value
            required
          />
        </template>
      notes:
        - "label ve description ile checkbox’ın yanına başlık ve alt açıklama eklenebilir."
        - "indeterminateIcon ve icon ile işaret ve kararsız ikonları özelleştirilebilir."
        - "indicator ile işaret kutusunun başta/sonda/gizli olmasını sağlayabilirsin."
        - "required ile formda zorunlu alan olarak işaretlenebilir, yanında * gösterilir."
        - "Formlarda toplu seçim ve parent-child mantığıyla indeterminate state için uygundur."
        - "ui prop’u ile slot bazlı tasarım override yapılabilir."
    - name: "UCheckboxGroup"
      link: "https://ui.nuxt.com/components/checkbox-group"
      usage: >
        Birden fazla seçenekten çoklu seçim yapılmasını sağlar.
        Formlarda, filtrelerde veya checklist türü arayüzlerde, seçenekleri tek tek checkbox şeklinde sunar.
        items prop’u ile dizi ya da nesne olarak seçenekler tanımlanabilir. v-model veya default-value ile kontrol edilir.
      props:
        - name: "as"
          type: "any"
          default: "'fieldset'"
          description: "CheckboxGroup’un hangi HTML elementiyle render edileceği."
        - name: "legend"
          type: "string"
          default: "undefined"
          description: "Checkbox grubunun başlığı (legend alanı)."
        - name: "items"
          type: "CheckboxGroupItem[]"
          default: "undefined"
          description: "Seçenekleri (checkbox) oluşturacak dizi/string/number/nesne."
        - name: "valueKey"
          type: "string"
          default: "'value'"
          description: "Dizideki nesne için value olarak hangi key'in kullanılacağını belirler."
        - name: "labelKey"
          type: "string"
          default: "'label'"
          description: "Dizideki nesne için başlık olarak hangi key'in kullanılacağını belirler."
        - name: "descriptionKey"
          type: "string"
          default: "'description'"
          description: "Dizideki nesne için açıklama olarak hangi key'in kullanılacağını belirler."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Tüm checkboxların ve metinlerin boyutu."
        - name: "variant"
          type: "'table' | 'list' | 'card'"
          default: "'list'"
          description: "Checkboxların görsel düzeni (liste, kart, tablo)."
        - name: "orientation"
          type: "'vertical' | 'horizontal'"
          default: "'vertical'"
          description: "Seçeneklerin yatay ya da dikey olarak sıralanması."
        - name: "defaultValue"
          type: "any[]"
          default: "undefined"
          description: "Varsayılan seçili değerler."
        - name: "modelValue"
          type: "any[]"
          default: "undefined"
          description: "Seçili değerler (v-model ile bağlanır)."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Checkbox grubunu ve içindeki tüm seçenekleri devre dışı bırakır."
        - name: "loop"
          type: "boolean"
          default: "false"
          description: "Klavye ile navigasyonda ilk/son seçenekler arasında döngü oluşturur."
        - name: "name"
          type: "string"
          default: "undefined"
          description: "Form submit sırasında gönderilecek field adı."
        - name: "required"
          type: "boolean"
          default: "false"
          description: "Grubun form gönderiminde zorunlu olup olmadığını belirler."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Checkboxların renk teması."
        - name: "indicator"
          type: "'start' | 'end' | 'hidden'"
          default: "'start'"
          description: "İşaret kutusunun başta, sonda ya da gizli olması."
        - name: "icon"
          type: "string"
          default: "undefined"
          description: "Seçili checkboxlarda gösterilecek ikon."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots:
        - name: "legend"
          type: "VNode"
          description: "Checkbox grubunun başlığını (legend) override etmek için slot."
        - name: "label"
          type: "VNode"
          description: "Her bir checkbox için başlık slotu."
        - name: "description"
          type: "VNode"
          description: "Her bir checkbox için açıklama slotu."
      emits:
        - name: "change"
          payload: "[event: Event]"
          description: "Seçili değerler değiştiğinde tetiklenir."
        - name: "update:modelValue"
          payload: "[value: any[]]"
          description: "v-model ile seçili değerler güncellendiğinde tetiklenir."
      example: |
        <script setup lang="ts">
        const items = [
          { label: 'Sistem', value: 'system' },
          { label: 'Açık', value: 'light' },
          { label: 'Koyu', value: 'dark' }
        ]
        </script>
        <template>
          <UCheckboxGroup legend="Tema" :items="items" v-model="selectedThemes" />
        </template>
      notes:
        - "items prop'u ile dizi/string/number ya da nesne olarak seçenekler tanımlanabilir."
        - "v-model veya default-value ile birden fazla seçenek seçilebilir, sonuç bir dizi olarak alınır."
        - "legend ile grubun başlığı ve açıklama slotları ile detaylı bilgi sunulabilir."
        - "Dizideki nesne yapısı tamamen özelleştirilebilir, valueKey/labelKey/descriptionKey ile kontrol edilir."
        - "variant ve orientation ile görünüm ve sıralama kolayca değiştirilebilir."
        - "ui prop’u ile slot bazında stil ve yapı override edilebilir."
    - name: "UChip"
      link: "https://ui.nuxt.com/components/chip"
      usage: >
        Sayı, durum veya kısa bir bilgi göstergesi olarak kullanılır.
        Herhangi bir UI elemanının (buton, avatar, menü, vs.) üstünde/dışında görsel badge veya state etiketi gibi davranır.
        Sıkça: bildirim, online/away durumu, yeni/aktif etiketleri, sayaç veya state için tercih edilir.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "Chip’in hangi HTML elementiyle render edileceği."
        - name: "text"
          type: "string | number"
          default: "undefined"
          description: "Chip içinde gösterilecek metin veya sayı."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Chip’in renk teması."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl' | '3xs' | '2xs' | '2xl' | '3xl'"
          default: "'md'"
          description: "Chip’in boyutu."
        - name: "position"
          type: "'top-right' | 'bottom-right' | 'top-left' | 'bottom-left'"
          default: "'top-right'"
          description: "Chip’in, parent’a göre konumu."
        - name: "inset"
          type: "boolean"
          default: "false"
          description: "Chip’in parent içinde, köşeye gömülü gösterilmesini sağlar."
        - name: "standalone"
          type: "boolean"
          default: "false"
          description: "Chip’i inline ve bağımsız göstermek için (örn: input içinde)."
        - name: "show"
          type: "boolean"
          default: "true"
          description: "Chip’in görünürlüğünü kontrol eder."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots:
        - name: "default"
          type: "VNode"
          description: "Chip’in parent/çevrelediği ana içerik (örn: button, avatar, icon vs.)."
        - name: "content"
          type: "VNode"
          description: "Chip içinde gösterilecek özel içerik (custom badge içeriği)."
      emits: []
      example: |
        <template>
          <UChip :text="5" color="warning" size="3xl" position="top-right">
            <UButton icon="i-lucide-mail" color="neutral" variant="subtle" />
          </UChip>
        </template>
      notes:
        - "Herhangi bir bileşenin üstünde/dışında konumlandırılabilir; en sık button, avatar veya menüde kullanılır."
        - "text ile sayı veya kısa bilgi badge’i olarak kullanılabilir."
        - "inset ile parent’ın içinde (iç köşe), standalone ile inline yerleşim sağlanabilir."
        - "show ile dinamik olarak görünürlük (örn: duruma göre state) kontrol edilebilir."
        - "color, size ve position ile tam uyumlu ve özelleştirilebilir yapı sunar."
        - "ui prop’u ile slot bazında stil override edilebilir."
    - name: "UCollapsible"
      link: "https://ui.nuxt.com/components/collapsible"
      usage: >
        İçeriğin açılıp kapanabilmesini sağlayan, basit ve özelleştirilebilir bir collapse/expand bileşenidir.
        Sıkça: SSS (FAQ), detayları göster/gizle, ayar blokları veya herhangi bir içeriği “daha fazla” aç/kapat gibi alanlarda kullanılır.
        Trigger olarak buton, başlık veya başka bir UI elemanı kullanılabilir.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "Collapsible’ın hangi HTML elementiyle render edileceği."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Collapsible’ın devre dışı bırakılması."
        - name: "defaultOpen"
          type: "boolean"
          default: "false"
          description: "İlk renderda açık (expanded) olup olmayacağını belirler."
        - name: "open"
          type: "boolean"
          default: "undefined"
          description: "Açık/kapalı state’i dışarıdan (v-model:open ile) kontrol etmek için."
        - name: "unmountOnHide"
          type: "boolean"
          default: "true"
          description: "Kapatıldığında içeriğin DOM’dan tamamen kaldırılıp kaldırılmayacağı."
      slots:
        - name: "default"
          type: "VNode"
          description: "Açma/kapatma tetikleyicisi (örn: buton, başlık vs.)"
        - name: "content"
          type: "VNode"
          description: "Açıldığında görünen içerik alanı."
      emits:
        - name: "update:open"
          payload: "[value: boolean]"
          description: "Açık/kapalı durumu değiştiğinde tetiklenir (v-model:open ile)."
      example: |
        <template>
          <UCollapsible default-open class="flex flex-col gap-2 w-48">
            <UButton label="Aç/Kapat" color="neutral" variant="subtle" trailing-icon="i-lucide-chevron-down" block />
            <template #content>
              <Placeholder class="h-48" />
            </template>
          </UCollapsible>
        </template>
      notes:
        - "defaultOpen veya v-model:open ile açık/kapalı state kontrol edilir."
        - "Kapatıldığında içerik DOM’dan tamamen kalkar (unmountOnHide = true), istersen devre dışı bırakabilirsin."
        - "İçerik alanı slot ile istediğin gibi özelleştirilebilir; buton dışında başka elementlerle de aç/kapat tetiklenebilir."
        - "disabled ile tamamı devre dışı bırakılabilir."
        - "ui prop’u ile slot bazlı stil override edilebilir."
    - name: "UColorPicker"
      link: "https://ui.nuxt.com/components/color-picker"
      usage: >
        Kullanıcıdan renk seçimini almak için kullanılır.
        HEX, RGB, HSL, CMYK ve LAB gibi farklı renk formatlarını destekler.
        v-model veya default-value ile kolayca kontrol edilir; throttle ile performans, size ile boyut ayarı yapılabilir.
        Sıkça: profil ayarı, tema seçimi, renk filtreleri, custom UI builder’larda tercih edilir.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "ColorPicker’ın hangi HTML elementiyle render edileceği."
        - name: "throttle"
          type: "number"
          default: "50"
          description: "Renk seçicide throttle (ms); performans ayarı."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "ColorPicker’ı devre dışı bırakmak için."
        - name: "defaultValue"
          type: "string"
          default: "'#FFFFFF'"
          description: "Varsayılan başlangıç rengi."
        - name: "format"
          type: "'hex' | 'rgb' | 'hsl' | 'cmyk' | 'lab'"
          default: "'hex'"
          description: "Renk değerinin formatı."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "ColorPicker’ın boyutu."
        - name: "modelValue"
          type: "string"
          default: "undefined"
          description: "Seçili rengi v-model ile bağlamak için."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
      slots: []
      emits:
        - name: "update:modelValue"
          payload: "[value: string | undefined]"
          description: "Renk seçildiğinde yeni değer ile tetiklenir (v-model ile)."
      example: |
        <template>
          <UColorPicker format="rgb" v-model="color" size="lg" />
        </template>
      notes:
        - "v-model ve default-value ile renk kontrolü sağlanabilir."
        - "format prop’u ile hex, rgb, hsl, cmyk veya lab formatında renk seçilebilir."
        - "throttle ile değişim aralığı kontrol edilir (ör: canlı renk seçici performansı)."
        - "disabled ile seçim devre dışı bırakılabilir."
        - "Popover ve Button ile birlikte kullanıldığında mini color picker UI’ı oluşturulabilir."
        - "ui prop’u ile slot bazında stil override yapılabilir."
    - name: "UCommandPalette"
      link: "https://ui.nuxt.com/components/command-palette"
      usage: >
        Uygulama içi komut arama ve hızlı eylem başlatmak için, gelişmiş tam metin arama ve fuzzy matching (Fuse.js) desteğiyle kullanılır.
        Gruplar (groups) ve iç içe menüler, klavye kısayolları, dinamik fetch ve özelleştirilebilir ikonlarla gelişmiş komut deneyimi sunar.
        Sıkça: uygulama komutları, navigation, global arama, dosya/üye/ayar seçici, VSCode benzeri “komut paleti” için idealdir.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "CommandPalette’ın hangi HTML elementiyle render edileceği."
        - name: "icon"
          type: "string"
          default: "'i-lucide-search'"
          description: "Arama inputunda gözüken ikon."
        - name: "selectedIcon"
          type: "string"
          default: "'i-lucide-check'"
          description: "Seçili itemda gösterilen ikon."
        - name: "trailingIcon"
          type: "string"
          default: "'i-lucide-chevron-right'"
          description: "Alt menülü itemlarda gösterilen ikon."
        - name: "placeholder"
          type: "string"
          default: "undefined"
          description: "Arama kutusunda gösterilecek placeholder metni."
        - name: "autofocus"
          type: "boolean"
          default: "true"
          description: "Bileşen açılırken input otomatik focus olsun mu?"
        - name: "close"
          type: "boolean | object"
          default: "false"
          description: "Input içinde kapat (close) butonu gösterilsin mi? Buton props ile özelleştirilebilir."
        - name: "closeIcon"
          type: "string"
          default: "'i-lucide-x'"
          description: "Close butonunda gösterilecek ikon."
        - name: "back"
          type: "boolean | object"
          default: "true"
          description: "Alt menüdeyken geri butonunu gösterir veya özelleştirir."
        - name: "backIcon"
          type: "string"
          default: "'i-lucide-arrow-left'"
          description: "Geri butonunda gösterilecek ikon."
        - name: "groups"
          type: "CommandPaletteGroup<CommandPaletteItem>[]"
          default: "undefined"
          description: "Komut paletinde gruplandırılmış komut/öğe dizisi."
        - name: "fuse"
          type: "object"
          default: "{ fuseOptions: { ignoreLocation: true, threshold: 0.1, keys: ['label', 'suffix'] }, resultLimit: 12, matchAllWhenSearchEmpty: true }"
          description: "Fuse.js arama algoritmasının opsiyonları."
        - name: "labelKey"
          type: "string"
          default: "'label'"
          description: "items içinde label olarak hangi key'in kullanılacağını belirler."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/alan bazında özel style/class ayarı."
        - name: "multiple"
          type: "boolean"
          default: "false"
          description: "Çoklu seçim yapılabilsin mi?"
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Paleti devre dışı bırakır."
        - name: "modelValue"
          type: "any | any[]"
          default: "undefined"
          description: "Seçili item(lar)ı v-model ile kontrol etmek için."
        - name: "defaultValue"
          type: "any | any[]"
          default: "undefined"
          description: "Varsayılan seçili değer(ler)."
        - name: "highlightOnHover"
          type: "boolean"
          default: "undefined"
          description: "Hover ile item vurgulansın mı?"
        - name: "selectionBehavior"
          type: "'toggle' | 'replace'"
          default: "undefined"
          description: "Çoklu seçimde nasıl davranacağını belirler."
        - name: "loading"
          type: "boolean"
          default: "false"
          description: "Yükleme animasyonu gösterilsin mi?"
        - name: "loadingIcon"
          type: "string"
          default: "'i-lucide-loader-circle'"
          description: "Yükleme durumunda gösterilecek ikon."
        - name: "searchTerm"
          type: "string"
          default: "''"
          description: "Arama inputundaki metin (v-model:search-term ile kontrol edilir)."
      slots:
        - name: "empty"
          type: "VNode"
          description: "Sonuç yoksa gösterilecek özel içerik."
        - name: "footer"
          type: "VNode"
          description: "Palet altındaki alan; ekstra aksiyonlar, klavye kısayolları için."
        - name: "back"
          type: "VNode"
          description: "Back (geri) butonunu override etmek için slot."
        - name: "close"
          type: "VNode"
          description: "Close (kapat) butonunu override etmek için slot."
        - name: "item"
          type: "VNode"
          description: "Tüm komut/öğe satırı için slot."
        - name: "item-leading"
          type: "VNode"
          description: "Öğenin solundaki ikon/avatar/chip gibi içerik için slot."
        - name: "item-label"
          type: "VNode"
          description: "Öğe başlığını özelleştirmek için slot."
        - name: "item-trailing"
          type: "VNode"
          description: "Öğenin sağındaki içerik (örn: klavye kısayolu, ikon vs.) için slot."
      emits:
        - name: "update:modelValue"
          payload: "[value: CommandPaletteItem]"
          description: "Seçili item(lar) değiştiğinde tetiklenir (v-model ile)."
        - name: "highlight"
          payload: "[{ ref: HTMLElement; value: CommandPaletteItem; } | undefined]"
          description: "Bir item vurgulandığında tetiklenir."
        - name: "entryFocus"
          payload: "[event: CustomEvent<any>]"
          description: "Palet odaklandığında tetiklenir."
        - name: "leave"
          payload: "[event: Event]"
          description: "Paletten çıkıldığında tetiklenir."
        - name: "update:open"
          payload: "[value: boolean]"
          description: "Açılıp kapanma state’i değiştiğinde tetiklenir."
        - name: "update:searchTerm"
          payload: "[value: string]"
          description: "Arama kutusundaki metin değiştiğinde tetiklenir (v-model:search-term ile)."
      example: |
        <script setup lang="ts">
        const groups = [
          {
            id: 'actions',
            items: [
              { label: 'Yeni dosya', icon: 'i-lucide-file-plus', kbds: ['meta', 'N'] },
              { label: 'Ayarlar', icon: 'i-lucide-settings', kbds: ['meta', ','] }
            ]
          }
        ]
        </script>
        <template>
          <UCommandPalette :groups="groups" placeholder="Komut ara..." />
        </template>
      notes:
        - "groups prop'u ile gruplandırılmış komut ve iç içe menüler tanımlanabilir."
        - "Fuse.js (fuse prop'u) ile gelişmiş tam metin/fuzzy search destekler, API'dan dinamik fetch ile de kullanılabilir."
        - "multiple ile çoklu seçim yapılabilir; v-model veya default-value ile kontrol edilir."
        - "footer, item, item-leading, item-label, item-trailing gibi slotlarla tamamen özelleştirilebilir."
        - "loading, loadingIcon ile API sorgularında loading state kolayca gösterilebilir."
        - "close, back, selectedIcon, trailingIcon, icon gibi props ile ikonlar tamamen özelleştirilebilir."
        - "v-model:search-term ile anlık arama metni dinamik kontrol edilebilir."
        - "Modal, Drawer, Popover gibi bileşenlerin içinde veya tam ekran kullanılabilir."
    - name: "UContainer"
      link: "https://ui.nuxt.com/components/container"
      usage: >
        Sayfanın içeriğini ortalamak ve maksimum genişliğini kısıtlamak için kullanılır.
        Responsive olarak padding ve genişlik kontrolü sağlar.
        Sıkça: ana içerik bloklarını, section ve page layout'larını ortalamak ve kenarlardan boşluk bırakmak için tercih edilir.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "Container’ın hangi HTML elementiyle render edileceği."
      slots:
        - name: "default"
          type: "VNode"
          description: "Container içinde gösterilecek ana içerik."
      emits: []
      example: |
        <template>
          <UContainer>
            <Placeholder class="h-32" />
          </UContainer>
        </template>
      notes:
        - "Sayfa içeriklerini ortalamak ve belirli bir maksimum genişlikte tutmak için idealdir."
        - "Responsive padding ve max-width değerleri theme üzerinden (app.config.ts) yönetilebilir."
        - "as prop'u ile farklı HTML tag’leriyle kullanılabilir."
    - name: "UContextMenu"
      link: "https://ui.nuxt.com/components/context-menu"
      usage: >
        Bir elementi sağ tıklayınca açılan aksiyon menüsü.
        Menü öğeleri ve gruplarını dinamik olarak `items` ile tanımlayabilirsin.
        Nested children desteğiyle çok seviyeli context menu yapılabilir.
      props:
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Menü ve öğe boyutlarını ayarlar."
        - name: "items"
          type: "ContextMenuItem[] | ContextMenuItem[][]"
          default: "[]"
          description: "Menüde listelenecek aksiyonlar. Tek veya grup (array içinde array) destekler."
        - name: "checkedIcon"
          type: "string"
          default: "undefined"
          description: "Checkbox türü öğeler için işaretli ikon."
        - name: "loadingIcon"
          type: "string"
          default: "undefined"
          description: "Yükleniyor durumunda gösterilecek ikon."
        - name: "externalIcon"
          type: "string | boolean"
          default: "true"
          description: "Dış linklerde gösterilecek ikon veya gizleme (false)."
        - name: "content"
          type: "object"
          default: "undefined"
          description: "Menü içeriğine ek ayar nesnesi."
        - name: "portal"
          type: "string | boolean | HTMLElement"
          default: "true"
          description: "Menünün hangi DOM node'da render edileceğini belirler."
        - name: "labelKey"
          type: "string"
          default: "'label'"
          description: "Menü item'ında label olarak hangi key'in kullanılacağı."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Menüyü ve tüm öğelerini devre dışı bırakır."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot ve bileşen classlarını özelleştirme."
        - name: "modal"
          type: "boolean"
          default: "true"
          description: "Menü açıldığında diğer elementlerle etkileşimi engeller."
      slots:
        - name: "default"
          type: "VNode"
          description: "Sağ tıklanacak ana içeriği temsil eder."
        - name: "item"
          type: "Function"
          description: "Tüm item’ların custom render’ı için slot."
        - name: "item-leading"
          type: "Function"
          description: "Item başındaki özel alan."
        - name: "item-label"
          type: "Function"
          description: "Item ana label'ı."
        - name: "item-trailing"
          type: "Function"
          description: "Item sonundaki özel alan."
        - name: "content-top"
          type: "VNode"
          description: "Menünün en üst kısmı."
        - name: "content-bottom"
          type: "VNode"
          description: "Menünün en alt kısmı."
      emits:
        - name: "update:open"
          payload: "[boolean]"
          description: "Menü açık/kapalı durumunu izleme event’i."
      example: |
        <script setup lang="ts">
        import type { ContextMenuItem } from '@nuxt/ui'

        const items = ref<ContextMenuItem[]>([
          { label: 'Görüntüle', icon: 'i-lucide-eye' },
          { label: 'Düzenle', icon: 'i-lucide-pencil' },
          { label: 'Sil', icon: 'i-lucide-trash', color: 'error' }
        ])
        </script>

        <template>
          <UContextMenu :items="items">
            <div class="border rounded-md p-6 text-center w-64">
              Sağ tıklayın!
            </div>
          </UContextMenu>
        </template>
      notes:
        - "items prop'u array veya array of array ile grup ayrımı destekler."
        - "children ve slot alanlarıyla nested ve custom menüler oluşturulabilir."
        - "type: 'checkbox' ile checkbox menü öğesi eklenebilir, checked/onUpdateChecked ile kontrol edilir."
        - "Klavye kısayolları için kbds alanı ve defineShortcuts entegrasyonu vardır."
        - "Size, color, disabled, separator, icon gibi gelişmiş özellikler desteklenir."
    - name: "UDrawer"
      link: "https://ui.nuxt.com/components/drawer"
      usage: >
        Ekranın bir kenarından (alt, üst, sağ, sol) kayan, açılıp-kapanabilen drawer (çekmece) paneli.
        İçine istediğin componentleri, formları, listeleri veya CommandPalette gibi özel içerikleri slot ile ekleyebilirsin.
      props:
        - name: "title"
          type: "string"
          default: "undefined"
          description: "Drawer başlığını belirler. #header slotu yoksa header'a otomatik eklenir."
        - name: "description"
          type: "string"
          default: "undefined"
          description: "Drawer başlığı altı açıklama."
        - name: "direction"
          type: "'top' | 'bottom' | 'left' | 'right'"
          default: "'bottom'"
          description: "Çekmecenin hangi kenardan açılacağını belirler."
        - name: "inset"
          type: "boolean"
          default: "false"
          description: "Drawer'ı kenarlardan biraz içeride, yuvarlatılmış şekilde gösterir."
        - name: "overlay"
          type: "boolean"
          default: "true"
          description: "Açıldığında arka plana koyu bir overlay ekler."
        - name: "handle"
          type: "boolean"
          default: "true"
          description: "Drawer'ın tutma (drag) çubuğunu gösterir."
        - name: "handleOnly"
          type: "boolean"
          default: "false"
          description: "Sadece handle ile sürüklenip kapatılmasını sağlar."
        - name: "shouldScaleBackground"
          type: "boolean"
          default: "false"
          description: "Drawer açılınca arka planı küçültüp derinlik efekti verir."
        - name: "setBackgroundColorOnScale"
          type: "boolean"
          default: "undefined"
          description: "Arka plan ölçeklenirken arka plan rengini değiştirir."
        - name: "dismissible"
          type: "boolean"
          default: "true"
          description: "Dışarı tıklayınca veya ESC ile drawer'ın kapanmasını sağlar."
        - name: "modal"
          type: "boolean"
          default: "true"
          description: "Modal olarak davranır, arka plan ile etkileşimi engeller."
        - name: "nested"
          type: "boolean"
          default: "false"
          description: "İç içe (nested) drawer kullanımında aktif edilir."
        - name: "fixed"
          type: "boolean"
          default: "undefined"
          description: "Drawer'ın yukarı hareket etmeden, sabit kalmasını sağlar."
        - name: "open"
          type: "boolean"
          default: "undefined"
          description: "Drawer açık/kapalı kontrolü için."
        - name: "defaultOpen"
          type: "boolean"
          default: "undefined"
          description: "İlk yüklemede drawer'ın açık gelmesini sağlar."
        - name: "activeSnapPoint"
          type: "string | number | null"
          default: "undefined"
          description: "Aktif snap point (drawer yüksekliği) değeri."
        - name: "closeThreshold"
          type: "number"
          default: "undefined"
          description: "Drawer'ı kapatmak için gereken sürükleme yüzdesi."
        - name: "snapPoints"
          type: "string[] | number[]"
          default: "undefined"
          description: "Drawer'ın gidebileceği yüzde veya piksel snap noktaları."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Tüm slot ve içerik class'larını özelleştirme."
        - name: "content"
          type: "object"
          default: "undefined"
          description: "Drawer içeriğine özel ayarlar."
        - name: "portal"
          type: "string | boolean | HTMLElement"
          default: "true"
          description: "Drawer'ın hangi DOM node'da render edileceği."
        - name: "noBodyStyles"
          type: "boolean"
          default: "undefined"
          description: "Drawer body’sine Vaul tarafından class eklenmesini engeller."
        - name: "preventScrollRestoration"
          type: "boolean"
          default: "undefined"
          description: "Çekmece kapatıldığında scroll pozisyonunun sıfırlanmasını engeller."
        - name: "scrollLockTimeout"
          type: "number"
          default: "undefined"
          description: "Scroll içeriğinde sürükleme sonrası drag lock süresi (ms)."
      slots:
        - name: "default"
          type: "VNode"
          description: "Drawer'ı tetikleyen buton veya custom element."
        - name: "content"
          type: "VNode"
          description: "Drawer açıkken görünen ana içerik."
        - name: "header"
          type: "VNode"
          description: "Header alanı. title/description kullanılmazsa custom ekler."
        - name: "title"
          type: "VNode"
          description: "Header’da başlık slotu."
        - name: "description"
          type: "VNode"
          description: "Header’da açıklama slotu."
        - name: "body"
          type: "VNode"
          description: "Ana içerik alanı. Header ve footer arasında yer alır."
        - name: "footer"
          type: "VNode"
          description: "Drawer'ın alt kısmı (aksiyon butonları gibi)."
      emits:
        - name: "close"
          payload: "[]"
          description: "Drawer kapatıldığında tetiklenir."
        - name: "drag"
          payload: "[percentageDragged: number]"
          description: "Drawer sürüklenirken tetiklenir."
        - name: "release"
          payload: "[open: boolean]"
          description: "Drawer drag sonrası açık/kapalı bilgisini verir."
        - name: "update:open"
          payload: "[open: boolean]"
          description: "Drawer'ın açık/kapalı state'i değiştiğinde."
        - name: "update:activeSnapPoint"
          payload: "[val: string | number]"
          description: "Aktif snap point güncellendiğinde."
        - name: "animationEnd"
          payload: "[open: boolean]"
          description: "Drawer açma/kapama animasyonu bitince."
      example: |
        <template>
          <UDrawer title="Başlık" direction="right" :overlay="true">
            <UButton label="Aç" color="neutral" variant="subtle" trailing-icon="i-lucide-chevron-right" />
            <template #body>
              <Placeholder class="h-32 m-4" />
            </template>
            <template #footer>
              <UButton label="Kapat" @click="$emit('close')" />
            </template>
          </UDrawer>
        </template>
      notes:
        - "direction prop'u ile drawer kenarı değiştirilebilir: top, right, bottom, left."
        - "Header, body, footer slotları ile tam özelleştirme."
        - "overlay, handle, dismissible, inset gibi props ile davranış ve stil tamamen kontrol edilebilir."
        - "Arka planı scale etme, snap points, nested drawer, command palette, form, modal entegrasyonu ile tam esneklik."
        - "Kapatma, sürükleme, açık/kapalı state event'leri ile Vue Store/Pinia ile kolay entegre olur."
    - name: "UDropdownMenu"
      link: "https://ui.nuxt.com/components/dropdown-menu"
      usage: >
        Bir buton ya da herhangi bir elemente tıklanınca açılan, aksiyon/bağlantı/ayar menüsü. Menü içeriği için dizi halinde items (gruplu veya tekil) tanımlanır, checkbox, renkli uyarı, shortcut, nested menü gibi gelişmiş özellikler destekler.
      props:
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Menüdeki item ve padding boyutlarını ayarlar."
        - name: "items"
          type: "ArrayOrNested<DropdownMenuItem>"
          default: "undefined"
          description: "Menüde listelenecek itemlar. Gruplar için iç içe dizi olabilir."
        - name: "arrow"
          type: "boolean | object"
          default: "undefined"
          description: "Menünün açıldığı yere bir ok (arrow) ekler."
        - name: "content"
          type: "object"
          default: "undefined"
          description: "Menü konumu, hizalama, genişlik gibi içerik ayarları. (ör: align, side, class vs)"
        - name: "open"
          type: "boolean"
          default: "undefined"
          description: "Menünün açık/kapalı durumunu kontrol eder (v-model:open ile kullanılabilir)."
        - name: "defaultOpen"
          type: "boolean"
          default: "undefined"
          description: "İlk yüklemede menünün açık olmasını sağlar."
        - name: "disabled"
          type: "boolean"
          default: "undefined"
          description: "Menünün açılmasını tamamen devre dışı bırakır."
        - name: "checkedIcon"
          type: "string"
          default: "undefined"
          description: "Checkbox itemları için işaretli ikonunu değiştirir."
        - name: "loadingIcon"
          type: "string"
          default: "undefined"
          description: "Bir item loading durumundaysa gösterilecek ikon."
        - name: "externalIcon"
          type: "string | boolean"
          default: "true"
          description: "Harici linkleri göstermek için ikonu ya da false ile gizleme."
        - name: "labelKey"
          type: "string"
          default: "'label'"
          description: "Item objesinden label için hangi key kullanılacak."
        - name: "portal"
          type: "string | boolean | HTMLElement"
          default: "true"
          description: "Menünün hangi DOM node’a/elemente ekleneceğini belirler."
        - name: "modal"
          type: "boolean"
          default: "true"
          description: "Menü açıkken diğer elementlerle etkileşimi engeller (modal davranış)."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot ve item class'larını override etmek için özelleştirme."
      slots:
        - name: "default"
          description: "Menüyü açan buton veya custom tetikleyici element."
        - name: "item"
          description: "Tüm itemları özelleştirmek için kullanılır."
        - name: "item-leading"
          description: "Her bir itemın başındaki ikon/avatar slotu."
        - name: "item-label"
          description: "Her bir itemın label slotu."
        - name: "item-trailing"
          description: "Her bir itemın sonunda (sağda) ekstra slot."
        - name: "content-top"
          description: "Menü içeriğinin en üst kısmına ekstra alan."
        - name: "content-bottom"
          description: "Menü içeriğinin en alt kısmına ekstra alan."
      emits:
        - name: "update:open"
          payload: "[boolean]"
          description: "Menü açılıp kapandığında tetiklenir."
      example: |
        <template>
          <UDropdownMenu :items="items">
            <UButton label="Menüyü Aç" icon="i-lucide-menu" color="neutral" variant="outline" />
          </UDropdownMenu>
        </template>
      notes:
        - "items prop'u ile dizi içinde item objeleri verilir, ister tek ister çoklu grup (nested array) olabilir."
        - "type:'separator', type:'checkbox', disabled, checked, slot, children ile zengin içerik ve nested menü oluşturulabilir."
        - "content prop’u ile menünün yönünü, genişliğini, hizasını vb. kolayca ayarlayabilirsin."
        - "slot özelliği ile spesifik itemlarda özel ikon ya da template kolayca gösterilir."
        - "defineShortcuts + extractShortcuts ile kısayol tuşları eklenip, otomatik tetikleme sağlanır."
        - "arrow prop'u ile menünün açıldığı noktada görsel ok gösterilir."
        - "size prop'u butona otomatik geçmez, butonun boyutunu ayrıca ayarlamalısın."
        - "Harici linkler için externalIcon ikonu gösterilir veya false ile gizlenir."
    - name: "UFileUpload"
      link: "https://ui.nuxt.com/components/file-upload"
      usage: >
        Dosya yükleme (drag & drop ve tıklama desteği) için gelişmiş bileşen. Tekil veya çoklu dosya yüklenebilir, görsel önizleme, grid/list görünümü, varyant ve renk desteğiyle esnek bir dosya input'u sunar.
      props:
        - name: "multiple"
          type: "boolean"
          default: "false"
          description: "Birden fazla dosya seçilmesini sağlar."
        - name: "dropzone"
          type: "boolean"
          default: "true"
          description: "Alanı sürükle-bırak ile dosya bırakılabilir hale getirir."
        - name: "interactive"
          type: "boolean"
          default: "true"
          description: "Alan tıklanabilir ve dosya seçici açılır."
        - name: "accept"
          type: "string"
          default: '"*"'
          description: "İzin verilen dosya türlerini sınırlar. (MIME type veya uzantı; örn: image/png, .jpg)"
        - name: "label"
          type: "string"
          default: "undefined"
          description: "Bileşenin başlığı/yazısı."
        - name: "description"
          type: "string"
          default: "undefined"
          description: "Ek açıklama metni gösterir."
        - name: "icon"
          type: "string"
          default: "'i-lucide-upload'"
          description: "Dosya yükleme alanında gösterilecek ikon."
        - name: "color"
          type: "'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'neutral'"
          default: "'primary'"
          description: "Odak/kenar vurgusunda renk."
        - name: "variant"
          type: "'area' | 'button'"
          default: "'area'"
          description: "Görünümü değiştirir: büyük alan (area) veya sade buton (button)."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Alan ve içeriğin boyutu."
        - name: "layout"
          type: "'grid' | 'list'"
          default: "'grid'"
          description: "Yüklenen dosyaların görünümünü grid veya liste olarak ayarlar. (Yalnızca area varyantında çalışır.)"
        - name: "position"
          type: "'inside' | 'outside'"
          default: "'outside'"
          description: "Dosya önizlemelerinin alan içinde veya dışında görünmesini ayarlar. (Yalnızca list ve area varyantında.)"
        - name: "highlight"
          type: "boolean"
          default: "undefined"
          description: "Manuel olarak odak/validasyon vurgusu ekler."
        - name: "disabled"
          type: "boolean"
          default: "undefined"
          description: "Alanı tamamen devre dışı bırakır."
        - name: "required"
          type: "boolean"
          default: "undefined"
          description: "Formlarda zorunlu alan olarak işaretler."
        - name: "reset"
          type: "boolean"
          default: "false"
          description: "Dosya seçici her açıldığında input'u sıfırlar."
      slots:
        - name: "default"
          description: "Alanı tamamen özelleştirmek için kullanılır."
        - name: "label"
          description: "Başlık slotu."
        - name: "description"
          description: "Açıklama slotu."
        - name: "actions"
          description: "Dosya ekleme/çıkarma için özel butonlar eklenebilir."
        - name: "files"
          description: "Yüklenen dosya listesini özelleştirir."
        - name: "files-top"
          description: "Dosya listesinin üstüne içerik ekler."
        - name: "files-bottom"
          description: "Dosya listesinin altına içerik ekler."
        - name: "file"
          description: "Tekil dosya öğesini özelleştirir."
        - name: "file-leading"
          description: "Dosya öğesinin başında ekstra slot."
        - name: "file-name"
          description: "Dosya adını özelleştirir."
        - name: "file-size"
          description: "Dosya boyutu slotu."
        - name: "file-trailing"
          description: "Dosya öğesinin sonunda ekstra alan."
      emits:
        - name: "change"
          payload: "[Event]"
          description: "Dosya seçildiğinde ya da değiştiğinde tetiklenir."
        - name: "update:modelValue"
          payload: "[File | File[] | null]"
          description: "Seçili dosyalar değiştiğinde tetiklenir (v-model için)."
      example: |
        <template>
          <UFileUpload label="Resim yükle" accept="image/*" multiple class="w-96 min-h-48" />
        </template>
      notes:
        - "Tek dosya veya çoklu dosya yükleme (multiple) destekler."
        - "Alan tıklanabilir veya sadece drag & drop ile çalışabilir (interactive, dropzone)."
        - "Önizleme, dosya adı ve boyutu otomatik gösterilir."
        - "FormField ve validation ile doğrudan entegre çalışır."
        - "Slot'larla hem iç görünüm hem dosya renderı tamamen özelleştirilebilir."
    - name: "UForm"
      link: "https://ui.nuxt.com/components/form"
      usage: >
        Form kontrolleri, validasyon, hata yönetimi ve kolay submit işlemleri için ana form bileşenidir. Zod, Yup, Joi, Superstruct, Valibot gibi modern validasyon kütüphanelerini ve custom fonksiyonları destekler. Tüm inputlarınızı ve hata mesajlarını organize bir şekilde yönetir.
      props:
        - name: "state"
          type: "object"
          required: true
          description: "Formun reaktif state objesi (model)."
        - name: "schema"
          type: "object"
          description: "Zod, Yup, Joi, Valibot, Superstruct veya Standart Schema objesi. Otomatik validasyon sağlar."
        - name: "validate"
          type: "function"
          description: "Custom validasyon fonksiyonu (state parametresi ile çalışır)."
        - name: "validateOn"
          type: "array"
          default: "[ 'input', 'change', 'blur' ]"
          description: "Form validasyonunun hangi input eventlerinde tetikleneceğini belirler."
        - name: "disabled"
          type: "boolean"
          description: "Tüm form inputlarını devre dışı bırakır."
        - name: "validateOnInputDelay"
          type: "number"
          default: "300"
          description: "Input eventlerinde validasyon gecikme süresi (ms)."
        - name: "transform"
          type: "boolean"
          default: "true"
          description: "Submit sırasında schema transformasyonu uygular."
        - name: "attach"
          type: "boolean"
          default: "true"
          description: "Formu bir üst Form’a ekler; nested form senaryoları için."
        - name: "loadingAuto"
          type: "boolean"
          default: "true"
          description: "Submit sırasında tüm alanları otomatik disable eder."
        - name: "id"
          type: "string | number"
          description: "Form id’si."
      slots:
        - name: "default"
          description: "Tüm form içeriği burada yer alır."
      emits:
        - name: "submit"
          payload: "[FormSubmitEvent<T>]"
          description: "Form başarılı şekilde gönderildiğinde tetiklenir."
        - name: "error"
          payload: "[FormErrorEvent]"
          description: "Form gönderildiğinde validasyon hatası oluşursa tetiklenir."
      expose:
        - name: "submit"
          type: "Function"
          description: "Formu programatik olarak submit eder."
        - name: "validate"
          type: "Function"
          description: "Formu manuel olarak validasyon için tetikler."
        - name: "clear"
          type: "Function"
          description: "Belirli bir alanın ya da tüm formun hata mesajlarını temizler."
        - name: "getErrors"
          type: "Function"
          description: "Bir alan veya path için mevcut hata listesini döner."
        - name: "setErrors"
          type: "Function"
          description: "Bir veya daha fazla hata nesnesini (FormError) belirli bir alana veya tamamına set eder."
        - name: "errors"
          type: "Ref<FormError[]>"
          description: "Mevcut hata mesajlarına erişim sağlar."
        - name: "disabled"
          type: "Ref<boolean>"
          description: "Formun disabled state’i."
        - name: "dirty"
          type: "Ref<boolean>"
          description: "En az bir alan değiştiyse true olur."
        - name: "dirtyFields"
          type: "DeepReadonly<Set<keyof T>>"
          description: "Kullanıcı tarafından değiştirilen alanların set’i."
        - name: "touchedFields"
          type: "DeepReadonly<Set<keyof T>>"
          description: "Kullanıcı tarafından etkileşim olan alanların set’i."
        - name: "blurredFields"
          type: "DeepReadonly<Set<keyof T>>"
          description: "Kullanıcı tarafından blur edilen alanların set’i."
      example: |
        <script setup lang="ts">
        import * as z from 'zod'
        import type { FormSubmitEvent } from '@nuxt/ui'
        const schema = z.object({
          email: z.string().email('Invalid email'),
          password: z.string().min(8, 'Must be at least 8 characters')
        })
        type Schema = z.output<typeof schema>
        const state = reactive<Partial<Schema>>({
          email: undefined,
          password: undefined
        })
        async function onSubmit(event: FormSubmitEvent<Schema>) {
          console.log(event.data)
        }
        </script>
        <template>
          <UForm :schema="schema" :state="state" @submit="onSubmit">
            <UFormField label="Email" name="email">
              <UInput v-model="state.email" />
            </UFormField>
            <UFormField label="Password" name="password">
              <UInput v-model="state.password" type="password" />
            </UFormField>
            <UButton type="submit">
              Submit
            </UButton>
          </UForm>
        </template>
      notes:
        - "Validasyon için Zod, Yup, Joi, Superstruct, Valibot veya custom fonksiyon desteği."
        - "Nested (iç içe) form desteği."
        - "Otomatik hata yönetimi ve FormField ile hata mesajı eşleşmesi."
        - "Slot’larla tüm alanlar ve validasyon mesajları özelleştirilebilir."
        - "clear(), getErrors(), setErrors() ile gelişmiş hata kontrol API’si."
    - name: "UFormField"
      link: "https://ui.nuxt.com/components/form-field"
      usage: >
        Form elemanlarını (input, select, textarea vs.) saran, label, açıklama, yardım/hata mesajı ve validasyon görünürlüğünü otomatik yöneten yardımcı bileşen. UForm ile birlikte kullanıldığında hata yakalama ve gösterimi otomatikleşir.
      props:
        - name: "name"
          type: "string"
          description: "Form alanı adı. Validasyon ve hata eşleştirmede kullanılır."
        - name: "label"
          type: "string"
          description: "Alan başlığı (üstte gösterilir)."
        - name: "description"
          type: "string"
          description: "Label altında, ek bilgi için kullanılır."
        - name: "help"
          type: "string"
          description: "Input’un altında, küçük yardımcı metin olarak gösterilir."
        - name: "hint"
          type: "string"
          description: "Label yanında, kısa bilgi. Örneğin: ‘Opsiyonel’."
        - name: "error"
          type: "string | boolean"
          description: "Hata mesajı. UForm ile birlikte otomatik doldurulur, elle de verilebilir."
        - name: "errorPattern"
          type: "RegExp"
          description: "Hangi hata isimlerinin bu alanda gösterileceğini RegExp ile belirle."
        - name: "size"
          type: "xs | sm | md | lg | xl"
          description: "Alan ve iç elemanın büyüklüğü."
        - name: "required"
          type: "boolean"
          description: "Zorunlu alan, label yanına * ekler."
        - name: "eagerValidation"
          type: "boolean"
          description: "Input event’inde anında validasyon tetikler."
        - name: "validateOnInputDelay"
          type: "number"
          description: "Validasyon için input event gecikmesi (ms)."
        - name: "as"
          type: "any"
          description: "Root element veya özel component."
        - name: "ui"
          type: "object"
          description: "Tailwind veya CSS class özelleştirmeleri için."
      slots:
        - name: "label"
          description: "Label’ı özelleştirmek için slot."
        - name: "hint"
          description: "Hint metni için slot."
        - name: "description"
          description: "Açıklama metni için slot."
        - name: "help"
          description: "Yardım metni için slot."
        - name: "error"
          description: "Hata mesajı için slot."
        - name: "default"
          description: "Form input’unun kendisi (UInput, UTextarea, vb.) burada olmalı."
      usage_example: |
        <UFormField label="Email" name="email" required description="Mail adresinizi giriniz." hint="Zorunlu" help="Geçerli bir mail girin.">
          <UInput placeholder="john@example.com" v-model="state.email" />
        </UFormField>
      notes:
        - "Label ve input’u otomatik bağlar, id üretimiyle erişilebilirlik sağlar."
        - "Form ile beraber kullanılırsa validasyon ve hata mesajı gösterimi otomatikleşir."
        - "required ile zorunlu alan ve otomatik * işareti."
        - "error prop’u verilirse, help’in önüne geçer."
        - "Slot yapısıyla metinleri tamamen özelleştirilebilir."
    - name: "UIcon"
      link: "https://ui.nuxt.com/components/icon"
      usage: >
        Iconify tabanlı herhangi bir ikonu göstermek için kullanılır. Hem SVG hem de CSS modunda ikon desteği sağlar. Tüm Nuxt UI bileşenlerinde iconlar için temel komponenttir.
      props:
        - name: "name"
          type: "string"
          description: "Iconify formatında ikon adı (örn: 'i-lucide-lightbulb', 'i-mdi-check')."
        - name: "mode"
          type: "svg | css"
          description: "İkonun nasıl render edileceği (SVG veya CSS). Varsayılan: svg."
        - name: "size"
          type: "string | number"
          description: "İkonun boyutu. (örn: '20', '1.5rem', '24px')."
        - name: "customize"
          type: "function"
          description: "SVG içeriğini veya class'ı programatik olarak özelleştirmenizi sağlar."
      usage_example: |
        <UIcon name="i-lucide-lightbulb" class="size-5" />
        <UIcon name="i-mdi-check" size="32" />
      notes:
        - "Nuxt UI ile birlikte gelmez, ikon koleksiyonunu ayrıca kurmalısın."
        - "İkon adı başında 'i-' ile başlamalı. (örn: 'i-lucide-mail')"
        - "Class veya size ile responsive/küçük/büyük ikon kullanabilirsin."
        - "SVG mode ile renk ve boyut tailwind'den etkilenir."
    - name: "UInput"
      link: "https://ui.nuxt.com/components/input"
      usage: >
        Kullanıcıdan metin veya veri almak için temel input alanıdır. Tüm tiplerde (text, email, password, file, vs.) kullanılabilir. v-model ile kontrol edilir.
      props:
        - name: "v-model"
          type: "string | number | undefined"
          description: "Input değerini iki yönlü bağlamak için kullanılır."
        - name: "type"
          type: "text | password | email | file | ..."
          description: "Input türü. Varsayılan: text. (Tüm HTML input tiplerini destekler.)"
        - name: "placeholder"
          type: "string"
          description: "Input boşken görünen açıklama/metin."
        - name: "color"
          type: "primary | secondary | success | info | warning | error | neutral"
          description: "Odak (focus) rengini belirler."
        - name: "variant"
          type: "outline | soft | subtle | ghost | none"
          description: "Stil varyantı. (outline=çerçeveli, soft=yumuşak arka plan, subtle=sade, ghost=şeffaf, none=stil yok.)"
        - name: "size"
          type: "xs | sm | md | lg | xl"
          description: "Yüksekliği/boyutu ayarlar."
        - name: "icon"
          type: "string"
          description: "Solda ikon gösterir. (örn: i-lucide-search)"
        - name: "leading-icon"
          type: "string"
          description: "Solda farklı ikon göstermek için."
        - name: "trailing-icon"
          type: "string"
          description: "Sağda ikon göstermek için."
        - name: "loading"
          type: "boolean"
          description: "Yükleniyor animasyonu (spinner) gösterir."
        - name: "disabled"
          type: "boolean"
          description: "Input'u pasif hale getirir."
        - name: "highlight"
          type: "boolean"
          description: "Odaklandığında kenarlığı vurgular."
      usage_example: |
        <UInput v-model="email" type="email" placeholder="E-posta" icon="i-lucide-at-sign" />
        <UInput v-model="search" placeholder="Ara..." trailing-icon="i-lucide-search" />
        <UInput v-model="password" type="password" size="lg" :loading="isLoading" />
      notes:
        - "v-model zorunlu değil, model-value ile de kullanılabilir."
        - "icon, leading-icon ve trailing-icon aynı anda kullanılabilir."
        - "slot'larla içine buton, ikon veya özel içerik eklenebilir (#leading, #trailing, #default)."
        - "FormField ile birlikte kullanılırsa otomatik hata ve label yönetimi olur."
        - "Tailwind class'ları ile tamamen özelleştirilebilir."
    - name: "UInputMenu"
      link: "https://ui.nuxt.com/components/input-menu"
      usage: >
        Otomatik tamamlama (autocomplete) ve anlık önerilerle arama, seçim, tag, listeleme gibi işlemler için gelişmiş bir input menü. SelectMenu gibi çalışır fakat bir input alanı ile açılır.
      props:
        - name: "v-model"
          type: "string | object | array"
          description: "Seçilen değer. Tekli ya da çoklu seçimde array olarak tutulur."
        - name: "items"
          type: "string[] | object[] | array[]"
          description: "Seçenekler. Düz string ya da obje (label, value, icon, avatar, chip, vs.) veya gruplanmış array."
        - name: "multiple"
          type: "boolean"
          description: "Çoklu seçim için true yap. Seçimler tag gibi gösterilir."
        - name: "placeholder"
          type: "string"
          description: "Boşken görünen açıklama/metin."
        - name: "value-key"
          type: "string"
          description: "Obje array'lerinde hangi key'in değer olarak alınacağını belirtir. (örn: id, value)"
        - name: "label-key"
          type: "string"
          description: "Obje array'lerinde hangi key'in label olarak gösterileceğini belirtir."
        - name: "icon"
          type: "string"
          description: "Input'un solunda ikon gösterir."
        - name: "avatar"
          type: "object"
          description: "Input veya seçeneklerde avatar gösterir."
        - name: "trailing-icon"
          type: "string"
          description: "Sağda ikon gösterir. Varsayılan: i-lucide-chevron-down."
        - name: "selected-icon"
          type: "string"
          description: "Seçili item için gösterilen ikon."
        - name: "delete-icon"
          type: "string"
          description: "Çoklu seçimde tag'ı silmek için gösterilen ikon."
        - name: "size"
          type: "xs | sm | md | lg | xl"
          description: "Bileşenin yüksekliğini ayarlar."
        - name: "color"
          type: "primary | secondary | success | info | warning | error | neutral"
          description: "Odak ve vurgu rengini ayarlar."
        - name: "variant"
          type: "outline | soft | subtle | ghost | none"
          description: "Stil varyantı."
        - name: "highlight"
          type: "boolean"
          description: "Odak/focus sırasında kenarlığı vurgular."
        - name: "loading"
          type: "boolean"
          description: "Yükleniyor spinnerı gösterir."
        - name: "disabled"
          type: "boolean"
          description: "Input'u pasif yapar."
        - name: "create-item"
          type: "boolean | 'always'"
          description: "Kullanıcı yeni bir seçenek ekleyebilir (örn: etiketi listede yoksa oluştur)."
      usage_example: |
        <UInputMenu v-model="selected" :items="['Todo','Done','In Progress']" placeholder="Seçiniz..." />
        <UInputMenu v-model="pickedUser" :items="kullanicilar" value-key="id" label-key="name" icon="i-lucide-user" />
        <UInputMenu multiple v-model="labels" :items="etiketler" delete-icon="i-lucide-trash" />
        <UInputMenu v-model="arama" :items="veri" icon="i-lucide-search" loading />
      notes:
        - "Klasik Select yerine gelişmiş autocomplete ve çoklu seçim için tercih edilir."
        - "Seçenekler arasında ikon, avatar, chip, renk, label/separator gibi gelişmiş içerikler olabilir."
        - "Slot desteğiyle her parçası kolayca özelleştirilebilir."
        - "API ile fetch edilen verilerde de rahatlıkla kullanılabilir."
        - "FormField ile kullanıldığında validasyon ve hata yönetimi otomatik olur."
        - "Çoklu seçim için v-model dizi (array) olmalı!"
    - name: "UInputNumber"
      link: "https://ui.nuxt.com/components/input-number"
      usage: >
        Sayısal (integer/decimal) değer girişi için özel input. Hem artı/eksi butonlu, hem de direkt yazılabilir.
      props:
        - name: "v-model"
          type: "number"
          description: "Girilen veya seçilen sayısal değer."
        - name: "default-value"
          type: "number"
          description: "Başlangıç değeri."
        - name: "min"
          type: "number"
          description: "Minimum değer sınırı."
        - name: "max"
          type: "number"
          description: "Maksimum değer sınırı."
        - name: "step"
          type: "number"
          description: "Artış/azalış miktarı (varsayılan: 1)."
        - name: "placeholder"
          type: "string"
          description: "Boşken görünen açıklama/metin."
        - name: "orientation"
          type: "horizontal | vertical"
          description: "Butonların yatay ya da dikey görünümü."
        - name: "color"
          type: "primary | secondary | success | info | warning | error | neutral"
          description: "Odak ve vurgu rengi."
        - name: "variant"
          type: "outline | soft | subtle | ghost | none"
          description: "Stil varyantı."
        - name: "size"
          type: "xs | sm | md | lg | xl"
          description: "Bileşenin yüksekliği."
        - name: "highlight"
          type: "boolean"
          description: "Odak/focus sırasında kenarlığı vurgular."
        - name: "disabled"
          type: "boolean"
          description: "Input'u pasif yapar."
        - name: "required"
          type: "boolean"
          description: "Formda zorunlu alan."
        - name: "readonly"
          type: "boolean"
          description: "Değeri değiştirilemez."
        - name: "format-options"
          type: "object"
          description: "Intl.NumberFormat opsiyonları ile değer formatı (para, yüzde vs.)."
        - name: "increment-icon / decrement-icon"
          type: "string"
          description: "Buton ikonları (varsayılan: plus/minus)."
      usage_example: |
        <UInputNumber v-model="adet" :min="1" :max="10" step="1" />
        <UInputNumber v-model="oran" :step="0.01" :format-options="{ style: 'percent' }" />
        <UInputNumber v-model="tutar" :format-options="{ style: 'currency', currency: 'USD' }" />
        <UInputNumber v-model="puan" orientation="vertical" size="lg" color="success" />
      notes:
        - "Step değeri ondalık (0.1, 0.01) olabilir. Parasal/yüzde alanlar için uygundur."
        - "Klavye ile direkt değer girilebilir, yanındaki butonlar ile artırıp azaltılabilir."
        - "FormField ile beraber validasyon, hata ve label yönetimi otomatikleşir."
        - "Buton ikonları ve stilleri özelleştirilebilir."
        - "format-options ile yüzde, para birimi, binlik ayırıcı, ondalık gibi görünüm değiştirilebilir."
    - name: "UInputTags"
      link: "https://ui.nuxt.com/components/input-tags"
      usage: >
        Birden fazla etiket (tag, anahtar kelime, konu) girişi için özel input. Etiketler arayüzde chip olarak görüntülenir, silinebilir, klavye ile hızlı eklenebilir.
      props:
        - name: "v-model"
          type: "string[]"
          description: "Girilen etiketlerin dizisi (örn. ['nuxt', 'vue'])."
        - name: "placeholder"
          type: "string"
          description: "Input boşken görünen açıklama/metin."
        - name: "max-length"
          type: "number"
          description: "Her etiket için karakter limiti."
        - name: "max"
          type: "number"
          description: "Eklenebilecek toplam etiket sayısı."
        - name: "color"
          type: "primary | secondary | success | info | warning | error | neutral"
          description: "Odak ve vurgu rengi."
        - name: "variant"
          type: "outline | soft | subtle | ghost | none"
          description: "Stil varyantı."
        - name: "size"
          type: "xs | sm | md | lg | xl"
          description: "Input ve etiketlerin yüksekliği."
        - name: "delete-icon"
          type: "string"
          description: "Sil butonunun ikonu. (Varsayılan: i-lucide-x)"
        - name: "highlight"
          type: "boolean"
          description: "Odak/focus sırasında kenarlığı vurgular."
        - name: "disabled"
          type: "boolean"
          description: "Input'u pasif yapar."
        - name: "add-on-paste"
          type: "boolean"
          description: "Yapıştırma ile birden fazla etiket eklemeye izin verir."
        - name: "delimiter"
          type: "string | RegExp"
          description: "Etiket eklemede ayraç karakteri. (örn. virgül veya boşluk)"
      usage_example: |
        <UInputTags v-model="tags" placeholder="Etiket ekle..." />
        <UInputTags v-model="tags" :max="5" :max-length="10" color="info" variant="soft" />
        <UInputTags v-model="tags" add-on-paste :delimiter="','" />
      notes:
        - "Etiketler yazılıp enter, virgül veya belirlediğin delimiter ile hızlıca eklenir."
        - "Her etiketi çip/chip olarak gösterir, X ikonuyla silinebilir."
        - "FormField ile kullanılınca label, hata, açıklama yönetimi otomatikleşir."
        - "add-on-paste ile: kopyala/yapıştırda birden fazla etiket otomatik eklenir."
        - "max ve max-length ile sınır koyabilirsin."
    - name: "UKbd"
      link: "https://ui.nuxt.com/components/kbd"
      usage: >
        Klavye kısayol tuşlarını/tuş kombinasyonlarını stilize göstermek için kullanılır.
        Özellikle tooltip, shortcut, veya dokümantasyonlarda görsel bütünlük sağlar.
      props:
        - name: "value"
          type: "string"
          description: "Gösterilecek tuş ya da tuş kombinasyonu. (örn. K, meta, ctrl, shift, /)"
        - name: "color"
          type: "primary | secondary | success | info | warning | error | neutral"
          description: "Renk temasını değiştirir."
        - name: "variant"
          type: "outline | soft | subtle | solid"
          description: "Arka plan ve kenarlık stilini değiştirir."
        - name: "size"
          type: "sm | md | lg"
          description: "Kısayol kutusunun boyutu."
        - name: "class"
          type: "string"
          description: "Ekstra özel class eklenebilir."
      usage_example: |
        <UKbd value="meta" />   <!-- Mac: ⌘, Windows: Ctrl olarak görünür -->
        <UKbd value="shift" color="info" />
        <UKbd> / </UKbd>
        <UKbd value="K" color="success" variant="solid" size="lg" />
        <UKbd class="font-bold">A</UKbd>
      notes:
        - "value olarak 'meta', 'ctrl', 'alt', 'shift', 'esc', 'enter', 'tab' gibi özel isimler platforma göre otomatik gösterilir."
        - "Arka plan, kenarlık ve renk tamamen değiştirilebilir."
        - "Slot ile direkt içine <UKbd>K</UKbd> şeklinde de kullanılabilir."
        - "Sık kullanılan: shortcut anlatımlarında, buton üstü tooltiplerinde, yardım panelinde vs."
    - name: "ULink"
      link: "https://ui.nuxt.com/components/link"
      usage: >
        ULink, <NuxtLink> üzerine geliştirilmiş, ek özellikler sağlayan bir wrapper bileşenidir.
        inactive-class, active-class, exact, exact-query, exact-hash gibi Nuxt 2/Vue 2’deki API ile uyumlu ekstra prop’lar sunar.
        <a> etiketi (to varsa) veya <button> etiketi (to yoksa) olarak render edilir. as ile fallback tag değiştirilebilir.
        Varsayılan aktif/inaktif stiller theme ile gelir; raw ile tüm stiller override edilebilir.
      props:
        - name: "as"
          type: "any"
          default: '"button"'
          description: "to yoksa render edilecek element veya component."
        - name: "type"
          type: "'reset' | 'submit' | 'button' | undefined"
          default: '"button"'
          description: "Buton tipinde olduğunda button tipi."
        - name: "disabled"
          type: "boolean"
          default: "undefined"
          description: "Link veya butonu devre dışı bırakır."
        - name: "active"
          type: "boolean"
          default: "undefined"
          description: "Bağımsızca linki aktif yapmaya zorlar."
        - name: "exact"
          type: "boolean"
          default: "undefined"
          description: "Aktiflik için rotanın tam eşleşmesini zorunlu kılar."
        - name: "exactQuery"
          type: "boolean | 'partial' | undefined"
          default: "undefined"
          description: "Query tam veya kısmi eşleşme ile aktiflik kontrolü."
        - name: "exactHash"
          type: "boolean"
          default: "undefined"
          description: "Hash tam eşleşirse aktif sayılır."
        - name: "inactiveClass"
          type: "string"
          default: "undefined"
          description: "Link inaktifken uygulanacak class."
        - name: "custom"
          type: "boolean"
          default: "undefined"
          description: "v-slot ile özel içerik oluşturulurken a tagını kaldırır."
        - name: "raw"
          type: "boolean"
          default: "undefined"
          description: "Sadece class, activeClass, inactiveClass kullanılır, default stil uygulanmaz."
        - name: "to"
          type: "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
          default: "undefined"
          description: "Gitmek istenen route."
        - name: "href"
          type: "string | RouteLocationAsRelativeGeneric | RouteLocationAsPathGeneric | undefined"
          default: "undefined"
          description: "to’ya alternatif; birlikte kullanılırsa href yok sayılır."
        - name: "external"
          type: "boolean"
          default: "undefined"
          description: "Linkin harici (true) veya dahili (false) olduğunu zorlar."
        - name: "target"
          type: "'_blank' | '_parent' | '_self' | '_top' | string | null | undefined"
          default: "undefined"
          description: "Linkin hangi contextte açılacağını belirler."
        - name: "rel"
          type: "string | 'noopener' | 'noreferrer' | 'nofollow' | 'sponsored' | 'ugc' | null | undefined"
          default: "undefined"
          description: "rel attribute değeri (harici linklerde default: noopener noreferrer)."
        - name: "noRel"
          type: "boolean"
          default: "undefined"
          description: "true ise rel attribute'u eklenmez."
        - name: "prefetchedClass"
          type: "string"
          default: "undefined"
          description: "Prefetched linklerde uygulanacak class."
        - name: "prefetch"
          type: "boolean"
          default: "undefined"
          description: "Viewport'ta görünen linkin prefetch edilmesini sağlar."
        - name: "prefetchOn"
          type: "'visibility' | 'interaction' | object | undefined"
          default: "undefined"
          description: "Prefetch'in hangi durumda tetikleneceği."
        - name: "noPrefetch"
          type: "boolean"
          default: "undefined"
          description: "Prefetch özelliğini devre dışı bırakır."
        - name: "activeClass"
          type: "string"
          default: "undefined"
          description: "Aktif linkte uygulanacak class."
        - name: "exactActiveClass"
          type: "string"
          default: "undefined"
          description: "Tam aktif linkte uygulanacak class."
        - name: "ariaCurrentValue"
          type: "'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false' | undefined"
          default: '"page"'
          description: "Aria-current attribute değeri (tam aktif link için)."
        - name: "viewTransition"
          type: "boolean"
          default: "undefined"
          description: "router.push() promise'i ile document.startViewTransition() çağrılır."
        - name: "replace"
          type: "boolean"
          default: "undefined"
          description: "router.push yerine router.replace çağrılır."
      slots:
        - name: "default"
          type: "VNode"
          description: "Link’in veya butonun ana içeriği."
      example: |
        <template>
          <ULink to="/components/link">
            Link
          </ULink>
        </template>
      notes:
        - "to varsa <a>, yoksa <button> olarak render edilir."
        - "inactiveClass ve activeClass ile linkin aktiflik durumuna özel stil verilebilir."
        - "raw ile varsayılan tüm stiller devre dışı bırakılır, kendi class’ların geçerli olur."
        - "exact, exactQuery ve exactHash ile aktiflik kontrolünü detaylı yönetebilirsin."
        - "as ile fallback tag veya component seçebilirsin."
        - "Bu bileşen; Breadcrumb, Button, ContextMenu, DropdownMenu, NavigationMenu gibi birçok ana bileşende kullanılır."
        - "external, target ve rel ile harici/dahili link davranışlarını yönetebilirsin."
        - "prefetch ile linkler otomatik olarak önceden yüklenebilir."
    - name: "UModal"
      link: "https://ui.nuxt.com/components/modal"
      usage: >
        Mesaj göstermek, kullanıcıdan onay veya veri almak için kullanılan, odaklı ve açılır pencere (dialog) bileşenidir.
        Varsayılan olarak overlay ile birlikte gelir; başlık, açıklama, gövde ve footer alanları slot veya prop ile yönetilir.
        Programatik olarak veya doğrudan v-model ile açılıp kapatılabilir.
      props:
        - name: "title"
          type: "string"
          default: "undefined"
          description: "Modal başlığı (header alanı için)."
        - name: "description"
          type: "string"
          default: "undefined"
          description: "Başlığın altında açıklama metni gösterir."
        - name: "content"
          type: "object"
          default: "undefined"
          description: "Modalın ana içeriği (DialogContentProps, genelde slot ile kullanılır)."
        - name: "overlay"
          type: "boolean"
          default: "true"
          description: "Modal açıldığında arka planda karartma overlay gösterilir."
        - name: "transition"
          type: "boolean"
          default: "true"
          description: "Açılış ve kapanışta animasyon geçişi uygular."
        - name: "fullscreen"
          type: "boolean"
          default: "undefined"
          description: "Modal tam ekran olarak açılır."
        - name: "portal"
          type: "string | boolean | HTMLElement"
          default: "true"
          description: "Modalı belirli bir portal (HTML element) içinde render eder."
        - name: "close"
          type: "boolean | Partial<ButtonProps>"
          default: "true"
          description: "Header alanında kapat düğmesi gösterir, özelleştirilebilir veya tamamen gizlenebilir."
        - name: "closeIcon"
          type: "string"
          default: "'i-lucide-x'"
          description: "Kapat butonunda gösterilecek ikon."
        - name: "dismissible"
          type: "boolean"
          default: "true"
          description: "Dışarı tıklayınca/ESC ile modal kapatılabilir (false ise engellenir)."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot ve alan bazında özel stil/class ayarı."
        - name: "open"
          type: "boolean"
          default: "undefined"
          description: "Modal açık mı (v-model:open ile kontrol edilir)."
        - name: "defaultOpen"
          type: "boolean"
          default: "undefined"
          description: "İlk renderda modalın açık olması için."
        - name: "modal"
          type: "boolean"
          default: "true"
          description: "Modalite (açıkken dış elementi erişilmez yapar, screen reader uyumu)."
      slots:
        - name: "default"
          type: "VNode"
          description: "Modalı tetikleyen element veya buton (ör: UButton)."
        - name: "content"
          type: "VNode"
          description: "Modal açıldığında gösterilecek ana içerik (tam özelleştirme için)."
        - name: "header"
          type: "VNode"
          description: "Header alanı (başlık, açıklama ve kapat butonu dahil)."
        - name: "title"
          type: "VNode"
          description: "Başlık slotu (override için)."
        - name: "description"
          type: "VNode"
          description: "Açıklama slotu (override için)."
        - name: "actions"
          type: "VNode"
          description: "Header’da veya footer’da aksiyonlar için (deprecated, footer önerilir)."
        - name: "close"
          type: "VNode"
          description: "Kapat butonunu override etmek için slot."
        - name: "body"
          type: "VNode"
          description: "Ana içerik bölgesi (form, text vs. için)."
        - name: "footer"
          type: "VNode"
          description: "Body’den sonra, genelde butonlar veya notlar için alt alan."
      emits:
        - name: "after:leave"
          payload: "[]"
          description: "Modal kapandıktan sonra tetiklenir."
        - name: "after:enter"
          payload: "[]"
          description: "Modal açıldıktan sonra tetiklenir."
        - name: "close:prevent"
          payload: "[]"
          description: "dismissible=false iken dışarıdan kapanma denemesi olursa tetiklenir."
        - name: "update:open"
          payload: "[value: boolean]"
          description: "Açık/kapalı state’i v-model:open ile dışarıya aktarılır."
      example: |
        <template>
          <UModal title="Modal başlığı" description="Açıklama metni" close>
            <UButton label="Open" color="neutral" variant="subtle" />
            <template #body>
              <Placeholder class="h-48" />
            </template>
            <template #footer>
              <UButton label="İptal" color="neutral" variant="outline" />
              <UButton label="Kaydet" color="primary" />
            </template>
          </UModal>
        </template>
      notes:
        - "v-model:open ile veya defaultOpen ile modalın açık/kapalı durumu yönetilebilir."
        - "close prop’u ile header’daki kapat butonu özelleştirilebilir veya tamamen kaldırılabilir."
        - "fullscreen ile mobil veya desktopta tam ekran açılabilir."
        - "overlay, transition, dismissible gibi davranışlar props ile ayarlanır."
        - "Programatik kullanım için useOverlay composable’ı ile tetiklenebilir."
        - "Slot ile tüm alanlar override edilebilir; #header, #body, #footer esnek yapı sunar."
        - "Portal ile farklı DOM alanına render etmek mümkündür."
        - "Kapatma ikonu global olarak app.config.ts (Nuxt) veya vite.config.ts (Vue) ile özelleştirilebilir."
        - "Kapatma girişimi (dış tık/esc) engellenirse close:prevent eventiyle tetik alınabilir."
        - "Birçok ana Nuxt UI bileşeni ile tam uyumlu çalışır."
    - name: "UNavigationMenu"
      link: "https://ui.nuxt.com/components/navigation-menu"
      usage: >
        Dikey veya yatay olarak gösterilebilen, çok seviyeli ve badge/avatar/icon/tooltip desteği olan gelişmiş bir menü bileşeni.
        Menü öğeleri "items" array'i ile yönetilir. Her item'da children ile alt menüler ve çeşitli görsel/text özellikleri tanımlanabilir.
        collapse, tooltip, popover, highlight, renk, varyant gibi gelişmiş özelliklerle; sidebar, ana menü, uygulama içi gezinti gibi birçok kullanım için uygundur.
      props:
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Menünün hangi element/component olarak render edileceğini belirler."
        - name: "items"
          type: "ArrayOrNested<NavigationMenuItem>"
          default: "undefined"
          description: "Menüde gösterilecek öğe(ler). Alt dizilerle gruplama mümkündür."
        - name: "color"
          type: "'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'neutral'"
          default: "'primary'"
          description: "Menü rengi (aktif, highlight vb. için)."
        - name: "variant"
          type: "'pill' | 'link'"
          default: "'pill'"
          description: "Stil varyantı (düğme veya sade link görünümü)."
        - name: "orientation"
          type: "'horizontal' | 'vertical'"
          default: "'horizontal'"
          description: "Menü yönü. Dikeyde accordion/kollaps davranışı eklenir."
        - name: "collapsed"
          type: "boolean"
          default: "undefined"
          description: "Dikeyde sadece ikonlar (sidebar tarzı) gösterimini etkinleştirir."
        - name: "tooltip"
          type: "boolean | TooltipProps"
          default: "undefined"
          description: "Collapse modda öğelerin üzerine tooltip gösterir veya özelleştirilir."
        - name: "popover"
          type: "boolean | PopoverProps"
          default: "undefined"
          description: "Collapse modda alt menüleri popover olarak açar."
        - name: "highlight"
          type: "boolean"
          default: "undefined"
          description: "Aktif öğede kenarlık veya özel stil vurgusu gösterir."
        - name: "highlightColor"
          type: "'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'neutral'"
          default: "'primary'"
          description: "Highlight rengi (kenarlık/çizgi)."
        - name: "arrow"
          type: "boolean"
          default: "undefined"
          description: "Alt menüsü olan öğelerin açılır içeriğinde ok (arrow) gösterir."
        - name: "content"
          type: "object"
          default: "undefined"
          description: "Menü içeriği özelleştirmeleri (popover/viewport vb. için)."
        - name: "contentOrientation"
          type: "'horizontal' | 'vertical'"
          default: "'horizontal'"
          description: "Açılır içerik yönü (sadece yatay orientation için geçerli)."
        - name: "trailingIcon"
          type: "string"
          default: "'i-lucide-chevron-down'"
          description: "Alt menüsü olan item'larda gösterilecek varsayılan ikon."
        - name: "externalIcon"
          type: "string | boolean"
          default: "true"
          description: "Harici linklerde (target/_blank) ekstra ikon gösterimi (veya false ile kaldırılır)."
        - name: "labelKey"
          type: "string"
          default: "'label'"
          description: "Her item'da hangi key'in başlık olarak kullanılacağını belirler."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Stil ve layout için özelleştirme nesnesi."
        - name: "modelValue"
          type: "string"
          default: "undefined"
          description: "Açık (aktif) olan item değeri (v-model ile kontrol)."
        - name: "defaultValue"
          type: "string"
          default: "undefined"
          description: "İlk renderda aktif olacak item değeri."
        - name: "delayDuration"
          type: "number"
          default: "0"
          description: "Tooltip için gecikme süresi (ms)."
        - name: "disableClickTrigger"
          type: "boolean"
          default: "undefined"
          description: "Tıkla-aç özelliğini devre dışı bırakır."
        - name: "disableHoverTrigger"
          type: "boolean"
          default: "undefined"
          description: "Hover ile açma özelliğini devre dışı bırakır."
        - name: "skipDelayDuration"
          type: "number"
          default: "undefined"
          description: "Trigger'dan trigger'a geçerken yeni gecikme uygulanmaz."
        - name: "disablePointerLeaveClose"
          type: "boolean"
          default: "undefined"
          description: "Pointer menüden çıkınca kapama davranışını devre dışı bırakır."
        - name: "unmountOnHide"
          type: "boolean"
          default: "true"
          description: "Açılır içerik kapanınca DOM'dan kaldırılır."
        - name: "disabled"
          type: "boolean"
          default: "undefined"
          description: "Menüyü tamamen devre dışı bırakır."
        - name: "type"
          type: "'single' | 'multiple'"
          default: "'multiple'"
          description: "Aynı anda birden çok (multiple) veya tek (single) açık item olup olamayacağını belirler."
        - name: "collapsible"
          type: "boolean"
          default: "true"
          description: "Tek modda, açık item tekrar tıklanırsa kapanır."
      slots:
        - name: "item"
          type: "VNode"
          description: "Tüm menü öğelerini özelleştirir."
        - name: "item-leading"
          type: "VNode"
          description: "Her öğe başına ikon/avatar slotu."
        - name: "item-label"
          type: "VNode"
          description: "Öğenin başlık kısmı."
        - name: "item-trailing"
          type: "VNode"
          description: "Öğenin sonundaki alan (badge, ekstra ikon, vs.)."
        - name: "item-content"
          type: "VNode"
          description: "Alt menülerde açılır içerik slotu."
        - name: "list-leading"
          type: "VNode"
          description: "Önceki grup veya başlık alanı slotu."
        - name: "list-trailing"
          type: "VNode"
          description: "Son grup sonrası slot (ör: ekstra buton)."
      emits:
        - name: "update:modelValue"
          payload: "[value: string]"
          description: "Aktif item'ın değişimini dışarıya iletir (v-model ile kullanılır)."
      example: |
        <template>
          <UNavigationMenu orientation="horizontal" :items="items" class="w-full justify-center" highlight />
        </template>
      notes:
        - "Menüde her bir öğe için children ile alt menü oluşturulabilir."
        - "Dikey kullanımda accordion (açılır kapanır alt menü) davranışı eklenir."
        - "collapsed ile sidebar tarzı sade ikonlu menü yapılabilir, tooltip veya popover ile detay verilebilir."
        - "tooltip ve popover global veya item bazında tanımlanabilir."
        - "highlight ile aktif item için kenarlık veya özel vurgu gösterilir."
        - "color, variant, orientation, trailingIcon, contentOrientation gibi görsel/işlevsel kontrol seçenekleri vardır."
        - "Her item'da avatar, badge, ikon, tooltip, trailingIcon gibi özel props tanımlanabilir."
        - "Slot sistemiyle tüm öğe, başlık, içerik vs. %100 özelleştirilebilir."
        - "Menüdeki aktif öğe v-model veya defaultValue ile kontrol edilir."
        - "Tüm Link props'larını ve route özelliklerini (to, target, vs.) kullanabilirsin."
        - "App-wide stil ve ikon değişimleri app.config.ts üzerinden yapılabilir."
        - "unmountOnHide ile performans amaçlı, açılır içerik kapatıldığında DOM'dan tamamen çıkarılabilir."
    - name: "UPagination"
      link: "https://ui.nuxt.com/components/pagination"
      usage: >
        Sayfalama (pagination) için kullanılan, ileri/geri, kenar ve numaralı butonlar ile sayfa geçişi sağlayan, buton veya link formatında kullanılabilen arayüz bileşenidir.
        Kaç adet toplam kayıt var, sayfa başına kaç adet gösterilecek, kaçıncı sayfadasın gibi tüm durumları props veya v-model ile yönetebilirsin.
      props:
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Hangi HTML element/component olarak render edileceğini belirtir."
        - name: "firstIcon"
          type: "string"
          default: "undefined"
          description: "İlk sayfa için özel ikon."
        - name: "prevIcon"
          type: "string"
          default: "undefined"
          description: "Önceki sayfa için özel ikon."
        - name: "nextIcon"
          type: "string"
          default: "undefined"
          description: "Sonraki sayfa için özel ikon."
        - name: "lastIcon"
          type: "string"
          default: "undefined"
          description: "Son sayfa için özel ikon."
        - name: "ellipsisIcon"
          type: "string"
          default: "undefined"
          description: "... (ellipsis) için özel ikon."
        - name: "color"
          type: "'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'neutral'"
          default: "'neutral'"
          description: "Pasif (inaktif) butonların rengi."
        - name: "variant"
          type: "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost'"
          default: "'outline'"
          description: "Pasif (inaktif) butonların varyantı."
        - name: "activeColor"
          type: "'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'neutral'"
          default: "'primary'"
          description: "Aktif (seçili) butonun rengi."
        - name: "activeVariant"
          type: "'link' | 'solid' | 'outline' | 'soft' | 'subtle' | 'ghost'"
          default: "'solid'"
          description: "Aktif (seçili) butonun varyantı."
        - name: "showControls"
          type: "boolean"
          default: "true"
          description: "İlk, önceki, sonraki, son butonlarını gösterir/gizler."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Butonların boyutu."
        - name: "to"
          type: "function"
          default: "undefined"
          description: "Sayfa numarası ile bir route nesnesi/URL döndüren fonksiyon (butonları linke çevirir)."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Stil ve layout özelleştirme nesnesi."
        - name: "disabled"
          type: "boolean"
          default: "undefined"
          description: "Tüm sayfalama kontrollerini devre dışı bırakır."
        - name: "page"
          type: "number"
          default: "undefined"
          description: "Geçerli (aktif) sayfa (v-model:page ile iki yönlü kontrol)."
        - name: "defaultPage"
          type: "number"
          default: "undefined"
          description: "İlk renderda aktif olacak sayfa numarası."
        - name: "itemsPerPage"
          type: "number"
          default: "10"
          description: "Her sayfada gösterilecek kayıt adedi."
        - name: "showEdges"
          type: "boolean"
          default: "false"
          description: "Her zaman kenarlarda (ilk/son) sayfaları, ellipsis ile birlikte gösterir."
        - name: "siblingCount"
          type: "number"
          default: "2"
          description: "Aktif sayfanın yanındaki gösterilecek kardeş (sibling) sayısı."
        - name: "total"
          type: "number"
          default: "0"
          description: "Toplam kayıt adedi (sayfa hesaplaması için zorunludur)."
      slots:
        - name: "first"
          type: "VNode"
          description: "İlk sayfa butonu için özelleştirme."
        - name: "prev"
          type: "VNode"
          description: "Önceki sayfa butonu için özelleştirme."
        - name: "next"
          type: "VNode"
          description: "Sonraki sayfa butonu için özelleştirme."
        - name: "last"
          type: "VNode"
          description: "Son sayfa butonu için özelleştirme."
        - name: "ellipsis"
          type: "VNode"
          description: "... (ellipsis) bölümü için slot."
        - name: "item"
          type: "VNode"
          description: "Her sayfa numarası için slot (tamamen özelleştirilebilir)."
      emits:
        - name: "update:page"
          payload: "[value: number]"
          description: "Geçerli (aktif) sayfa değiştiğinde tetiklenir."
      example: |
        <template>
          <UPagination :page="5" :total="100" show-edges :sibling-count="1" />
        </template>
      notes:
        - "v-model:page ile tam kontrol veya defaultPage ile ilk değer atanabilir."
        - "toplam kayıt (total) ve itemsPerPage ile otomatik sayfa sayısı belirlenir."
        - "Butonlar, link veya router-link şeklinde render edilebilir."
        - "color, activeColor, variant, activeVariant ile aktif/inaktif buton stilleri ayrılır."
        - "showControls ve showEdges ile buton/kenar görünümü ayarlanır."
        - "slot'lar ile ikon, etiket, item özelleştirilebilir."
        - "disabled ile tüm pagination devre dışı kalır."
        - "itemsPerPage ile sayfalama dinamik olarak ayarlanabilir."
        - "Sayfa butonlarında ellipsis otomatik gösterilir, showEdges ile her zaman sabitlenir."
        - "Çok satırlı veya mobilde responsive çalışır."
    - name: "UPinInput"
      link: "https://ui.nuxt.com/components/pin-input"
      usage: >
        Bir PIN, OTP veya doğrulama kodu girişi için ardışık input alanlarından oluşan gelişmiş bir giriş bileşenidir.
        v-model ile tüm değerler array olarak kontrol edilir. Mask, otp, sayı tipi, uzunluk, placeholder, renk, varyant gibi zengin props desteği sunar.
        Hem klasik PIN, hem SMS OTP (One Time Password) kullanım senaryosu için uygundur.
      props:
        - name: "as"
          type: "any"
          default: "'div'"
          description: "Hangi element/component olarak render edileceğini belirtir."
        - name: "color"
          type: "'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'neutral'"
          default: "'primary'"
          description: "Odaklanıldığında ring rengi."
        - name: "variant"
          type: "'outline' | 'soft' | 'subtle' | 'ghost' | 'none'"
          default: "'outline'"
          description: "Input alanlarının görünüm tipi."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Input kutucuklarının boyutu."
        - name: "length"
          type: "string | number"
          default: "5"
          description: "Kaç adet input gösterileceği."
        - name: "autofocus"
          type: "boolean"
          default: "undefined"
          description: "Bileşen mount olduğunda otomatik odaklanır."
        - name: "autofocusDelay"
          type: "number"
          default: "0"
          description: "Autofocus ile odaklanma gecikmesi (ms)."
        - name: "highlight"
          type: "boolean"
          default: "undefined"
          description: "Odak veya hata durumunda ekstra vurgulu ring gösterimi."
        - name: "defaultValue"
          type: "string[]"
          default: "undefined"
          description: "İlk yüklenirken input değerleri (kontrolsüz kullanım için)."
        - name: "disabled"
          type: "boolean"
          default: "undefined"
          description: "Tüm inputları devre dışı bırakır."
        - name: "id"
          type: "string"
          default: "undefined"
          description: "Ana container'ın id değeri."
        - name: "mask"
          type: "boolean"
          default: "undefined"
          description: "true ise, şifre/pin gibi karakterleri gizler (password tipi)."
        - name: "modelValue"
          type: "string[]"
          default: "null"
          description: "v-model ile kontrol edilen aktif değerler dizisi."
        - name: "name"
          type: "string"
          default: "undefined"
          description: "Inputların form gönderiminde kullanılacak name değeri."
        - name: "otp"
          type: "boolean"
          default: "undefined"
          description: "true ise, mobilde OTP otomatik doldurma (SMS'den çekme, autocomplete) aktiftir."
        - name: "placeholder"
          type: "string"
          default: "undefined"
          description: "Boş alanlar için gösterilecek karakter."
        - name: "required"
          type: "boolean"
          default: "undefined"
          description: "Formda doldurulması zorunlu olarak işaretler."
        - name: "type"
          type: "'number' | 'text'"
          default: "'text'"
          description: "Input tipini (yalnızca sayı veya metin) belirler."
        - name: "ui"
          type: "{ root?: ClassNameValue; base?: ClassNameValue; }"
          default: "undefined"
          description: "Stil özelleştirme nesnesi."
      slots: []
      emits:
        - name: "blur"
          payload: "[payload: Event]"
          description: "Herhangi bir input odaktan çıkınca tetiklenir."
        - name: "change"
          payload: "[payload: Event]"
          description: "Inputlarda bir değişiklik olduğunda tetiklenir."
        - name: "update:modelValue"
          payload: "[value: string[]]"
          description: "v-model ile bağlı değer değiştiğinde tetiklenir."
        - name: "complete"
          payload: "[value: string[]]"
          description: "Tüm inputlar doldurulduğunda tetiklenir."
      example: |
        <template>
          <UPinInput v-model="value" :length="6" mask otp placeholder="○" color="primary" variant="subtle" />
        </template>
      notes:
        - "v-model ile anlık tüm kutucuk değerleri array olarak izlenir."
        - "otp özelliği ile SMS'ten OTP kodu mobilde otomatik çekilebilir."
        - "mask ile pin girişini gizli (•••• gibi) gösterebilirsin."
        - "type='number' ile sadece rakam girişi kabul edilir."
        - "length ile kutucuk adedi kolayca değiştirilebilir."
        - "color, variant, size ile farklı temalarda ve boyutlarda kullanılabilir."
        - "placeholder ile her kutucuk için karakter (örn: ○) belirtebilirsin."
        - "disable ile tüm alanlar pasif olur; required ile form validasyonu yapılır."
        - "blur, change, complete gibi eventler ile gelişmiş etkileşimler yakalanabilir."
        - "slot kullanılmaz, inputlar otomatik oluşturulur."
        - "inputlara erişim için template ref üzerinden inputsRef özelliği kullanılabilir."
    - name: "UPopover"
      link: "https://ui.nuxt.com/components/popover"
      usage: >
        Bir tetikleyici (buton, input veya başka bir öğe) üzerine tıklanınca veya üzerine gelindiğinde (hover) açılan, modal olmayan, kayan içerik kutusu (popover) bileşeni.
        Açılır içeriği #content slot ile tanımlarsın. Mode, arrow, delay, dismissible gibi gelişmiş seçeneklerle çok yönlüdür.
      props:
        - name: "mode"
          type: "'click' | 'hover'"
          default: "'click'"
          description: "Popover’ın açılma tetikleyicisi (tıkla veya hover)."
        - name: "content"
          type: "object"
          default: "undefined"
          description: "Popover içeriğinin hizalama, konum gibi özelliklerini yönetir."
        - name: "arrow"
          type: "boolean | object"
          default: "undefined"
          description: "Açılır kutuda ok (arrow) gösterir veya özelleştirir."
        - name: "portal"
          type: "string | boolean | HTMLElement"
          default: "true"
          description: "Popover farklı bir portal veya root elementte render edilir."
        - name: "reference"
          type: "ReferenceElement"
          default: "undefined"
          description: "Popover’ın konumunu bağlayacağı özel referans elementi."
        - name: "dismissible"
          type: "boolean"
          default: "true"
          description: "Dışarıya tıklandığında veya esc ile kapanır. false ile engellenir."
        - name: "ui"
          type: "{ content?: ClassNameValue; arrow?: ClassNameValue; }"
          default: "undefined"
          description: "Stil özelleştirme nesnesi."
        - name: "defaultOpen"
          type: "boolean"
          default: "undefined"
          description: "İlk açılışta açık olup olmayacağını belirler."
        - name: "open"
          type: "boolean"
          default: "undefined"
          description: "Popover'ın açık/kapalı durumu (v-model:open ile kontrol edilebilir)."
        - name: "modal"
          type: "boolean"
          default: "undefined"
          description: "true ise dışarıyı devre dışı bırakır, erişilebilirlik için."
        - name: "openDelay"
          type: "number"
          default: "0"
          description: "Hover modunda, mouse ile üstüne gelince açılma gecikmesi (ms)."
        - name: "closeDelay"
          type: "number"
          default: "0"
          description: "Hover modunda, mouse ayrıldıktan sonra kapanma gecikmesi (ms)."
      slots:
        - name: "default"
          type: "VNode"
          description: "Popover'ı tetikleyen ana içerik (buton vb.)."
        - name: "content"
          type: "VNode"
          description: "Popover açıldığında gösterilecek asıl içerik."
        - name: "anchor"
          type: "VNode"
          description: "Özel bir referans elemanına göre pozisyonlandırmak için (mode='click' ile)."
      emits:
        - name: "close:prevent"
          payload: "[]"
          description: "dismissible=false iken dış tık/esc ile kapama denemesi olursa tetiklenir."
        - name: "update:open"
          payload: "[value: boolean]"
          description: "Açık/kapalı state’i v-model:open ile dışarıya aktarılır."
      example: |
        <template>
          <UPopover arrow mode="hover" :open-delay="300">
            <UButton label="Open" color="neutral" variant="subtle" />
            <template #content>
              <Placeholder class="size-48 m-4 inline-flex" />
            </template>
          </UPopover>
        </template>
      notes:
        - "mode='click' veya 'hover' ile tıklama veya hover ile açma davranışı seçilir."
        - "default slot ile tetikleyici öğe, #content slot ile açılır içerik tanımlanır."
        - "arrow ile popover içeriğine ok eklenebilir, okun yeri ve rengi ui props ile değiştirilebilir."
        - "reference ile konum, anchor slot ile özel referans üzerinde konumlandırma yapılabilir."
        - "open ve defaultOpen ile kontrollü veya kontrolsüz açma-kapama mümkündür."
        - "dismissible=false ile dış tık/esc kapama engellenir; close:prevent eventi fırlatılır."
        - "openDelay ve closeDelay ile hover modunda animasyon/gecikme kontrolü sağlanır."
        - "Portal ile body dışında render (z-index ve overflow sorunlarını aşmak için) yapılabilir."
        - "Slot sistemiyle içerik ve anchor %100 özelleştirilebilir."
    - name: "UProgress"
      link: "https://ui.nuxt.com/components/progress"
      usage: >
        Bir görevin, yüklemenin ya da işlemin ilerleyişini görsel olarak gösteren, yatay veya dikey kullanılabilen progress bar bileşeni.
        v-model ile değer (yüzde veya adım), max ile toplam adım, status ile mevcut değeri gösterebilirsin. İndeterminate, animasyon, renk, boyut, dikey/yatay yön gibi birçok özelliğe sahiptir.
      props:
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Hangi element/component olarak render edileceğini belirtir."
        - name: "max"
          type: "number | any[]"
          default: "undefined"
          description: "Bar’ın maksimum değeri ya da adım array'i (steps)."
        - name: "status"
          type: "boolean"
          default: "undefined"
          description: "Bar üzerinde anlık değeri (yüzde/label) gösterir."
        - name: "inverted"
          type: "boolean"
          default: "false"
          description: "Görsel olarak bar’ı terse çevirir (sağdan/alta)."
        - name: "size"
          type: "'2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'"
          default: "'md'"
          description: "Progress bar’ın kalınlığını/boyutunu ayarlar."
        - name: "color"
          type: "'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'neutral'"
          default: "'primary'"
          description: "Bar’ın rengini belirler."
        - name: "orientation"
          type: "'horizontal' | 'vertical'"
          default: "'horizontal'"
          description: "Bar’ın yönünü belirler."
        - name: "animation"
          type: "'carousel' | 'carousel-inverse' | 'swing' | 'elastic'"
          default: "'carousel'"
          description: "İndeterminate (belirsiz) modunda bar’ın animasyon tipini seçer."
        - name: "ui"
          type: "{ root?: ClassNameValue; base?: ClassNameValue; indicator?: ClassNameValue; status?: ClassNameValue; steps?: ClassNameValue; step?: ClassNameValue; }"
          default: "undefined"
          description: "Stil özelleştirme nesnesi."
        - name: "modelValue"
          type: "number | null"
          default: "null"
          description: "Anlık ilerleme değeri (yüzde/adım) — v-model ile iki yönlü kontrol edilir."
        - name: "getValueLabel"
          type: "function"
          default: "undefined"
          description: "Erişilebilirlik için label üretici fonksiyon."
        - name: "getValueText"
          type: "function"
          default: "undefined"
          description: "Erişilebilirlik için value metni üretici fonksiyon."
      slots:
        - name: "status"
          type: "VNode"
          description: "Mevcut ilerleme değerini göstermek için slot."
      emits:
        - name: "update:modelValue"
          payload: "[value: string[] | undefined]"
          description: "v-model ile ilerleme değiştiğinde tetiklenir."
        - name: "update:max"
          payload: "[value: number]"
          description: "max değeri değiştiğinde tetiklenir."
      example: |
        <template>
          <UProgress :model-value="45" max="100" status color="primary" size="lg" />
        </template>
      notes:
        - "modelValue ve max ile klasik yüzde (progress) veya adım tabanlı ilerleme gösterilir."
        - "max dizi ise adım başlıkları otomatik olarak bar altında listelenir."
        - "Bar animasyonu indeterminate modda (modelValue verilmezse) otomatik etkinleşir."
        - "orientation ile yatay/dikey kullanım; inverted ile yön terse çevrilebilir."
        - "status prop’u ile bar üstünde değer veya label gösterimi sağlanır."
        - "animation prop’u ile carousel, swing, elastic gibi efektler seçilebilir."
        - "color ve size ile tüm tema ve boyut varyasyonları desteklenir."
        - "Tamamen slot’lanabilir ve ui ile detaylı class ayarı yapılabilir."
        - "Kullanıcı etkileşimi gerektirmez; yükleme ve proses göstergesi için idealdir."
    - name: "URadioGroup"
      link: "https://ui.nuxt.com/components/radio-group"
      usage: >
        Birden fazla seçenekten sadece bir tanesinin seçilebildiği, buton veya kart şeklinde gösterilebilen radio grup bileşeni.
        v-model ile kontrol edilebilir veya default-value ile ilk seçim atanabilir. Her seçenek string, number veya obje olarak tanımlanabilir.
        Kart, tablo, liste varyantları ve renk/boyut/legend/etiket desteği ile form, ayar veya wizard gibi arayüzlerde sıklıkla kullanılır.
      props:
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Hangi element/component olarak render edileceğini belirtir."
        - name: "legend"
          type: "string"
          default: "undefined"
          description: "RadioGroup başlığı (legend)."
        - name: "valueKey"
          type: "string"
          default: "'value'"
          description: "Obje türü items dizisinde hangi property'nin değer olarak alınacağını belirtir."
        - name: "labelKey"
          type: "string"
          default: "'label'"
          description: "Obje türü items dizisinde hangi property'nin etiket olarak alınacağını belirtir."
        - name: "descriptionKey"
          type: "string"
          default: "'description'"
          description: "Obje türü items dizisinde açıklama property’si olarak alınacak anahtar."
        - name: "items"
          type: "RadioGroupItem[]"
          default: "undefined"
          description: "Seçeneklerin dizi olarak tanımlandığı alan (string, number veya obje olabilir)."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Radio butonların boyutu."
        - name: "variant"
          type: "'card' | 'list' | 'table'"
          default: "'list'"
          description: "Görünüm varyantı (klasik, kart, tablo)."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Ana renk (seçili/aktif olanın vurgusu için)."
        - name: "orientation"
          type: "'horizontal' | 'vertical'"
          default: "'vertical'"
          description: "Butonların yatay/dikey sıralanışı."
        - name: "indicator"
          type: "'start' | 'end' | 'hidden'"
          default: "'start'"
          description: "Seçili butonun göstergesinin (işaretin) başında/sonunda/gizli olup olmadığını belirler."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Stil ve layout özelleştirme nesnesi."
        - name: "defaultValue"
          type: "string | number"
          default: "undefined"
          description: "İlk renderda seçili olacak değer."
        - name: "disabled"
          type: "boolean"
          default: "undefined"
          description: "Tüm radio itemları devre dışı bırakır."
        - name: "loop"
          type: "boolean"
          default: "undefined"
          description: "Klavyeyle son itemdan ilk itema, ilk itemdan sona geçişi sağlar."
        - name: "modelValue"
          type: "string | number"
          default: "undefined"
          description: "v-model ile iki yönlü bağlı, seçili radio item değeri."
        - name: "name"
          type: "string"
          default: "undefined"
          description: "Form submit edildiğinde kullanılacak alan adı."
        - name: "required"
          type: "boolean"
          default: "undefined"
          description: "Form validasyonu için doldurulmasını zorunlu kılar."
      slots:
        - name: "legend"
          type: "VNode"
          description: "Başlık (legend) slotu."
        - name: "label"
          type: "VNode"
          description: "Radio item için etiket slotu."
        - name: "description"
          type: "VNode"
          description: "Radio item için açıklama slotu."
      emits:
        - name: "change"
          payload: "[payload: Event]"
          description: "Seçim değiştiğinde tetiklenir."
        - name: "update:modelValue"
          payload: "[payload: string]"
          description: "v-model ile bağlı değer değiştiğinde tetiklenir."
      example: |
        <template>
          <URadioGroup
            v-model="theme"
            legend="Tema Seçimi"
            :items="[
              { label: 'Sistem', value: 'system', description: 'Otomatik tema.' },
              { label: 'Açık', value: 'light', description: 'Açık mod.' },
              { label: 'Koyu', value: 'dark', description: 'Koyu mod.' }
            ]"
            variant="card"
            color="primary"
          />
        </template>
      notes:
        - "items string, number veya detaylı obje olarak tanımlanabilir."
        - "Obje kullanıyorsan valueKey, labelKey, descriptionKey ile property mapping yapılabilir."
        - "variant ile klasik liste, kart ya da tablo tipi görünüm seçilebilir."
        - "legend, label ve description slotları ile tam özelleştirme yapılabilir."
        - "indicator ile radio göstergesinin konumu veya görünürlüğü ayarlanır."
        - "color, size, orientation ile tema ve layout kontrolü sağlanır."
        - "disabled ile tüm grup, item içindeki disabled ile ise tek tek itemlar devre dışı bırakılabilir."
        - "loop özelliği ile klavyede son/ilk itemdan döngüsel geçiş sağlanır."
        - "name ve required props'ları ile formlara entegre edilebilir."
    - name: "USelect"
      link: "https://ui.nuxt.com/components/select"
      usage: >
        Kullanıcıdan tek veya çoklu seçim almak için kullanılan, grup, label, ikon, avatar, chip ve loading destekli gelişmiş dropdown (açılır liste) bileşeni.
        items ile string, sayı, boolean, obje veya dizi dizisi (gruplama) şeklinde seçenekler tanımlanabilir.
        v-model veya default-value ile aktif değer atanır. Placeholder, çoklu seçim, ikon, avatar, loading, varyant, renk ve boyut desteğiyle form ve filtrelerde esnek çözüm sunar.
      props:
        - name: "id"
          type: "string"
          default: "undefined"
          description: "Ana select elementinin id'si."
        - name: "placeholder"
          type: "string"
          default: "undefined"
          description: "Seçim yapılmadığında gösterilecek placeholder metni."
        - name: "color"
          type: "'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'neutral'"
          default: "'primary'"
          description: "Odak ve highlight rengini belirler."
        - name: "variant"
          type: "'outline' | 'soft' | 'subtle' | 'ghost' | 'none'"
          default: "'outline'"
          description: "Görünüm varyantı (klasik, soft, subtle, ghost, none)."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Select kutusunun ve içeriğinin boyutu."
        - name: "trailingIcon"
          type: "string"
          default: "'i-lucide-chevron-down'"
          description: "Açılır ikon (sağdaki arrow)."
        - name: "selectedIcon"
          type: "string"
          default: "'i-lucide-check'"
          description: "Seçilen item’da gösterilecek ikon."
        - name: "content"
          type: "object"
          default: "undefined"
          description: "Açılır içerik hizalama ve davranışını kontrol eder."
        - name: "arrow"
          type: "boolean | object"
          default: "undefined"
          description: "Açılır menüde ok (arrow) gösterir veya özelleştirir."
        - name: "portal"
          type: "string | boolean | HTMLElement"
          default: "true"
          description: "Açılır menü için portal/root (farklı DOM katmanında render) seçimi."
        - name: "valueKey"
          type: "string"
          default: "'value'"
          description: "Obje/dizi içindeki hangi property'nin değer olarak alınacağını belirtir."
        - name: "labelKey"
          type: "string"
          default: "'label'"
          description: "Obje/dizi içindeki hangi property'nin etiket olarak alınacağını belirtir."
        - name: "items"
          type: "ArrayOrNested<SelectItem>"
          default: "undefined"
          description: "Seçeneklerin string, number, boolean, obje veya grup (dizi dizisi) olarak tanımlandığı ana alan."
        - name: "defaultValue"
          type: "any"
          default: "undefined"
          description: "Kontrolsüz kullanımda, ilk renderda seçili değer."
        - name: "modelValue"
          type: "any"
          default: "undefined"
          description: "v-model ile iki yönlü bağlı aktif değer(ler)."
        - name: "multiple"
          type: "boolean"
          default: "undefined"
          description: "Çoklu seçim yapılmasını sağlar."
        - name: "highlight"
          type: "boolean"
          default: "undefined"
          description: "Odak/validasyon durumunda highlight rengiyle vurgu yapar."
        - name: "autofocus"
          type: "boolean"
          default: "undefined"
          description: "Bileşen mount olduğunda otomatik odaklanır."
        - name: "autofocusDelay"
          type: "number"
          default: "0"
          description: "Autofocus gecikmesi (ms)."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Tüm alanlar için stil özelleştirme nesnesi."
        - name: "disabled"
          type: "boolean"
          default: "undefined"
          description: "Bileşeni tamamen devre dışı bırakır."
        - name: "open"
          type: "boolean"
          default: "undefined"
          description: "Açık/kapalı state’i (v-model:open ile kontrol)."
        - name: "defaultOpen"
          type: "boolean"
          default: "undefined"
          description: "İlk renderda menünün açık olup olmayacağı."
        - name: "autocomplete"
          type: "string"
          default: "undefined"
          description: "Native html autocomplete attribute’u."
        - name: "name"
          type: "string"
          default: "undefined"
          description: "Form gönderiminde kullanılacak alan adı."
        - name: "required"
          type: "boolean"
          default: "undefined"
          description: "Form validasyonu için doldurulması zorunlu alan."
        - name: "icon"
          type: "string"
          default: "undefined"
          description: "Sol içte sabit ikon."
        - name: "avatar"
          type: "AvatarProps"
          default: "undefined"
          description: "Sol içte avatar göstermek için."
        - name: "leading"
          type: "boolean"
          default: "undefined"
          description: "Icon’u sol içte göstermek için true yapabilirsin."
        - name: "leadingIcon"
          type: "string"
          default: "undefined"
          description: "Sol içte gösterilecek ikon."
        - name: "trailing"
          type: "boolean"
          default: "undefined"
          description: "Icon’u sağ içte göstermek için true yapabilirsin."
        - name: "loading"
          type: "boolean"
          default: "undefined"
          description: "Yükleniyor animasyonu gösterir."
        - name: "loadingIcon"
          type: "string"
          default: "'i-lucide-loader-circle'"
          description: "Yükleniyor animasyonu sırasında gösterilecek ikon."
      slots:
        - name: "leading"
          type: "VNode"
          description: "Select kutusu solunda gösterilecek özel slot."
        - name: "default"
          type: "VNode"
          description: "Ana içerik slotu."
        - name: "trailing"
          type: "VNode"
          description: "Select kutusu sağında gösterilecek özel slot."
        - name: "item"
          type: "VNode"
          description: "Her item satırı için slot."
        - name: "item-leading"
          type: "VNode"
          description: "Her item’ın solunda gösterilecek özel slot."
        - name: "item-label"
          type: "VNode"
          description: "Her item’ın etiketi için slot."
        - name: "item-trailing"
          type: "VNode"
          description: "Her item’ın sağında gösterilecek özel slot."
        - name: "content-top"
          type: "VNode"
          description: "Açılır menü başında gösterilecek slot."
        - name: "content-bottom"
          type: "VNode"
          description: "Açılır menü sonunda gösterilecek slot."
      emits:
        - name: "blur"
          payload: "[payload: FocusEvent]"
          description: "Select kutusu odaktan çıktığında tetiklenir."
        - name: "change"
          payload: "[payload: Event]"
          description: "Bir seçim yapıldığında tetiklenir."
        - name: "focus"
          payload: "[payload: FocusEvent]"
          description: "Select kutusu odaklandığında tetiklenir."
        - name: "update:modelValue"
          payload: "[payload: any]"
          description: "v-model ile bağlı değer değiştiğinde tetiklenir."
        - name: "update:open"
          payload: "[value: boolean]"
          description: "Menünün açık/kapalı durumu değiştiğinde tetiklenir."
      example: |
        <template>
          <USelect
            v-model="status"
            class="w-48"
            :items="[
              { label: 'Bekliyor', value: 'backlog', icon: 'i-lucide-clock' },
              { label: 'Yapılacak', value: 'todo', icon: 'i-lucide-list' },
              { label: 'Devam Ediyor', value: 'in_progress', icon: 'i-lucide-loader' },
              { label: 'Tamamlandı', value: 'done', icon: 'i-lucide-check' }
            ]"
            placeholder="Durum seçiniz"
            icon="i-lucide-list"
            trailing-icon="i-lucide-chevron-down"
            selected-icon="i-lucide-check"
            color="primary"
            variant="outline"
            size="md"
            :loading="false"
          />
        </template>
      notes:
        - "items prop'u ile string, number, boolean, obje veya grup (array of arrays) olarak seçenekler tanımlanabilir."
        - "valueKey ile objede hangi alanın değer olarak, labelKey ile hangi alanın etiket olarak gösterileceği seçilebilir."
        - "v-model veya defaultValue ile tekli/çoklu seçim kontrolü sağlanır."
        - "multiple ile birden fazla item seçilebilir, değerler dizi olur."
        - "placeholder, icon, avatar, chip, loading gibi ekstra özellikler sunar."
        - "Kendi ikonunu veya avatarını, slotlar aracılığıyla tamamen özelleştirebilirsin."
        - "Tüm slotlar, listede veya ana kutuda içerik eklemeye imkan tanır."
        - "disabled ile select tümden devre dışı bırakılır, required ile form validasyonu yapılabilir."
        - "loading ve loadingIcon ile async veri çekiminde loading durumu gösterilebilir."
        - "Portal ve content ile menü, DOM'da başka bir yere taşınabilir."
        - "app.config.ts üzerinden tema ve slot ayarları genişletilebilir."
    - name: "USelectMenu"
      link: "https://ui.nuxt.com/components/select-menu"
      usage: >
        Aranabilir, çoklu seçim destekli gelişmiş dropdown/combobox bileşeni.
        Reka UI Combobox altyapısıyla; arama, dinamik veri, grup, ikon, avatar, chip, loading, custom item oluşturma, slot ve filtre desteği sunar.
        v-model ile kontrol edilir ve seçili değer (default olarak obje/dizideki item) veya value-key ile belirli property üzerinden iki yönlü bağlı çalışır.
      props:
        - name: "id"
          type: "string"
          default: "undefined"
          description: "Ana SelectMenu elementinin id'si."
        - name: "placeholder"
          type: "string"
          default: "undefined"
          description: "Seçim yapılmadığında gösterilecek placeholder metni."
        - name: "searchInput"
          type: "boolean | InputProps"
          default: "true"
          description: "Arama kutusu görünürlüğü veya InputProps ile özelleştirme (false ile gizlenir)."
        - name: "color"
          type: "'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'neutral'"
          default: "'primary'"
          description: "Odak ve highlight rengini belirler."
        - name: "variant"
          type: "'outline' | 'soft' | 'subtle' | 'ghost' | 'none'"
          default: "'outline'"
          description: "Görünüm varyantı."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Bileşenin ve içeriklerin boyutu."
        - name: "required"
          type: "boolean"
          default: "undefined"
          description: "Form validasyonu için doldurulması zorunlu alan."
        - name: "trailingIcon"
          type: "string"
          default: "'i-lucide-chevron-down'"
          description: "Açılır ikon (sağdaki arrow)."
        - name: "selectedIcon"
          type: "string"
          default: "'i-lucide-check'"
          description: "Seçilen item’da gösterilecek ikon."
        - name: "content"
          type: "object"
          default: "undefined"
          description: "Açılır içerik hizalama ve davranışını kontrol eder."
        - name: "arrow"
          type: "boolean | object"
          default: "undefined"
          description: "Açılır menüde ok (arrow) gösterir veya özelleştirir."
        - name: "portal"
          type: "string | boolean | HTMLElement"
          default: "true"
          description: "Açılır menü için portal/root seçimi."
        - name: "valueKey"
          type: "string"
          default: "undefined"
          description: "Obje/dizi içindeki hangi property'nin değer olarak alınacağını belirtir."
        - name: "labelKey"
          type: "string"
          default: "'label'"
          description: "Obje/dizi içindeki hangi property'nin etiket olarak gösterileceği."
        - name: "items"
          type: "ArrayOrNested<SelectMenuItem>"
          default: "undefined"
          description: "Seçenekler (string, number, obje veya grup dizi olabilir)."
        - name: "defaultValue"
          type: "any"
          default: "undefined"
          description: "Kontrolsüz kullanımda, ilk renderda seçili değer(ler)."
        - name: "modelValue"
          type: "any"
          default: "undefined"
          description: "v-model ile iki yönlü bağlı aktif değer(ler)."
        - name: "multiple"
          type: "boolean"
          default: "undefined"
          description: "Çoklu seçim yapılmasını sağlar."
        - name: "highlight"
          type: "boolean"
          default: "undefined"
          description: "Odak/validasyon durumunda highlight rengiyle vurgu yapar."
        - name: "createItem"
          type: "boolean | 'always' | object"
          default: "undefined"
          description: "Listede olmayan bir değer yaratılmasına izin verir."
        - name: "filterFields"
          type: "string[]"
          default: "undefined"
          description: "Filtreleme yapılacak property anahtarları (varsayılan: labelKey)."
        - name: "ignoreFilter"
          type: "boolean"
          default: "undefined"
          description: "Dahili filtreyi kapatıp, kendi search/async fetch'ini uygulatır."
        - name: "autofocus"
          type: "boolean"
          default: "undefined"
          description: "Bileşen mount olduğunda otomatik odaklanır."
        - name: "autofocusDelay"
          type: "number"
          default: "0"
          description: "Autofocus gecikmesi (ms)."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Tüm alanlar için stil özelleştirme nesnesi."
        - name: "open"
          type: "boolean"
          default: "undefined"
          description: "Açık/kapalı state’i (v-model:open ile kontrol)."
        - name: "defaultOpen"
          type: "boolean"
          default: "undefined"
          description: "İlk renderda menünün açık olup olmayacağı."
        - name: "disabled"
          type: "boolean"
          default: "undefined"
          description: "Bileşeni devre dışı bırakır."
        - name: "name"
          type: "string"
          default: "undefined"
          description: "Form submit edildiğinde kullanılacak alan adı."
        - name: "resetSearchTermOnBlur"
          type: "boolean"
          default: "true"
          description: "Input blur olunca arama terimini sıfırlar."
        - name: "resetSearchTermOnSelect"
          type: "boolean"
          default: "true"
          description: "Seçim yapıldığında arama terimini sıfırlar."
        - name: "highlightOnHover"
          type: "boolean"
          default: "undefined"
          description: "Mouse ile üzerine gelince item’ı highlight yapar."
        - name: "icon"
          type: "string"
          default: "undefined"
          description: "Sol içte ikon gösterir."
        - name: "avatar"
          type: "AvatarProps"
          default: "undefined"
          description: "Sol içte avatar gösterir."
        - name: "leading"
          type: "boolean"
          default: "undefined"
          description: "Icon’u sol içte göster."
        - name: "leadingIcon"
          type: "string"
          default: "undefined"
          description: "Sol içte gösterilecek ikon."
        - name: "trailing"
          type: "boolean"
          default: "undefined"
          description: "Icon’u sağ içte göster."
        - name: "loading"
          type: "boolean"
          default: "undefined"
          description: "Yükleniyor animasyonu gösterir."
        - name: "loadingIcon"
          type: "string"
          default: "'i-lucide-loader-circle'"
          description: "Yükleniyor animasyonu sırasında gösterilecek ikon."
        - name: "searchTerm"
          type: "string"
          default: '""'
          description: "Harici olarak arama terimini kontrol et (v-model:search-term)."
      slots:
        - name: "leading"
          type: "VNode"
          description: "Select kutusu solunda gösterilecek özel slot."
        - name: "default"
          type: "VNode"
          description: "Ana içerik slotu."
        - name: "trailing"
          type: "VNode"
          description: "Select kutusu sağında gösterilecek özel slot."
        - name: "empty"
          type: "VNode"
          description: "Seçenekler bulunamadığında gösterilecek slot."
        - name: "item"
          type: "VNode"
          description: "Her item satırı için slot."
        - name: "item-leading"
          type: "VNode"
          description: "Her item’ın solunda gösterilecek özel slot."
        - name: "item-label"
          type: "VNode"
          description: "Her item’ın etiketi için slot."
        - name: "item-trailing"
          type: "VNode"
          description: "Her item’ın sağında gösterilecek özel slot."
        - name: "content-top"
          type: "VNode"
          description: "Açılır menü başında gösterilecek slot."
        - name: "content-bottom"
          type: "VNode"
          description: "Açılır menü sonunda gösterilecek slot."
        - name: "create-item-label"
          type: "VNode"
          description: "Custom item yaratırken gösterilecek slot."
      emits:
        - name: "blur"
          payload: "[payload: FocusEvent]"
          description: "SelectMenu kutusu odaktan çıktığında tetiklenir."
        - name: "change"
          payload: "[payload: Event]"
          description: "Bir seçim yapıldığında tetiklenir."
        - name: "focus"
          payload: "[payload: FocusEvent]"
          description: "SelectMenu kutusu odaklandığında tetiklenir."
        - name: "update:open"
          payload: "[value: boolean]"
          description: "Menünün açık/kapalı durumu değiştiğinde tetiklenir."
        - name: "create"
          payload: "[item: string]"
          description: "Kullanıcı custom değer oluşturduğunda tetiklenir."
        - name: "highlight"
          payload: "[payload: { ref: HTMLElement; value: any; } | undefined]"
          description: "Bir item’a mouse ile highlight (hover/focus) olduğunda tetiklenir."
        - name: "update:modelValue"
          payload: "[payload: any]"
          description: "v-model ile bağlı değer değiştiğinde tetiklenir."
        - name: "update:searchTerm"
          payload: "[value: string]"
          description: "Arama terimi değiştiğinde tetiklenir."
      example: |
        <template>
          <USelectMenu
            v-model="selected"
            class="w-48"
            :items="[
              { label: 'Backlog', id: 'backlog', icon: 'i-lucide-clock' },
              { label: 'Yapılacak', id: 'todo', icon: 'i-lucide-list' },
              { label: 'Devam Ediyor', id: 'in_progress', icon: 'i-lucide-loader' },
              { label: 'Tamamlandı', id: 'done', icon: 'i-lucide-check' }
            ]"
            value-key="id"
            placeholder="Durum seçiniz"
            icon="i-lucide-list"
            trailing-icon="i-lucide-chevron-down"
            selected-icon="i-lucide-check"
            color="primary"
            variant="outline"
            size="md"
            :loading="false"
            search-input
            multiple
          />
        </template>
      notes:
        - "Tüm item türlerini ve property’leri Select ile aynı şekilde destekler, ama ek olarak arama ve çoklu seçim için optimize edilmiştir."
        - "Varsayılan olarak v-model'e seçili objenin tamamını verir; value-key ile sadece belirli property alınabilir."
        - "Arama inputu için searchInput prop'una InputProps geçerek (ör: { placeholder: 'Ara...' }) inputu özelleştirebilirsin."
        - "createItem ile listedeki seçenekler dışında kullanıcıya yeni item eklettirebilirsin."
        - "ignoreFilter ile kendi async arama/fetch/filter işlemini dışarıdan yönetebilirsin."
        - "filterFields ile objelerde arama yapılacak alanları belirleyebilirsin."
        - "Tüm slotlar (ör: item-label, leading, empty, create-item-label) ile içerik tamamen özelleştirilebilir."
        - "multiple ile çoklu seçim yapılabilir, değer dizi olur."
        - "loading, loadingIcon, avatar, chip, icon, grup (array of arrays), label ve separator desteğiyle tam kapsamlı dropdown/combobox."
        - "Dışarıdan arama terimi yönetmek için v-model:search-term kullanılır."
        - "disabled, required, open, defaultOpen, autofocus gibi tüm advanced state kontrolleri var."
        - "Teması, app.config.ts ile tümden genişletilebilir."
    - name: "USeparator"
      link: "https://ui.nuxt.com/components/separator"
      usage: >
        İçerikleri yatay veya dikey şekilde ayırmak için kullanılır. Ortada label, ikon veya avatar gösterilebilir. Farklı renk, tip (solid, dashed, dotted), boyut ve oryantasyon seçenekleri vardır.
      props:
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Bileşenin render edeceği element ya da component."
        - name: "label"
          type: "string"
          default: "undefined"
          description: "Ayraç ortasında metin etiketi."
        - name: "icon"
          type: "string"
          default: "undefined"
          description: "Ayraç ortasında gösterilecek ikon ismi."
        - name: "avatar"
          type: "AvatarProps"
          default: "undefined"
          description: "Ayraç ortasında avatar göstermek için kullanılır."
        - name: "color"
          type: "'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'neutral'"
          default: "'neutral'"
          description: "Separator'ın çizgi rengi."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'xs'"
          description: "Separator kalınlığı/boyutu."
        - name: "type"
          type: "'solid' | 'dashed' | 'dotted'"
          default: "'solid'"
          description: "Çizgi tipi: düz, kesik veya noktalı."
        - name: "orientation"
          type: "'horizontal' | 'vertical'"
          default: "'horizontal'"
          description: "Separator'ın yönü."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Stil özelleştirme anahtarı (root, border, container, label, icon, avatar vs)."
        - name: "decorative"
          type: "boolean"
          default: "undefined"
          description: "true ise tamamen dekoratif olup accessibility (erişilebilirlik) ağacından kaldırılır."
      slots:
        - name: "default"
          type: "VNode"
          description: "Separator içine custom içerik eklemek için."
      example: |
        <template>
          <USeparator label="Kayıt ol" />
          <USeparator icon="i-lucide-check" color="primary" type="dashed" />
          <USeparator orientation="vertical" size="lg" class="h-48" />
        </template>
      notes:
        - "Klasik <hr> yerine kullanılır; oryantasyon, renk, tip, kalınlık ve içerik ortalaması ile tamamen esnektir."
        - "label, icon veya avatar birlikte ya da ayrı ayrı kullanılabilir; içerik ortalanır."
        - "Tailwind veya custom class ile daha fazla özelleştirilebilir."
        - "Solid/dashed/dotted tipi, kalınlığı ve rengiyle temaya tam entegredir."
        - "vertical orientation ile yan yana ayrım sağlar, horizontal ile alt alta içerik böler."
        - "Kullanımı son derece sade ve erişilebilirlik odaklıdır."
    - name: "USkeleton"
      link: "https://ui.nuxt.com/components/skeleton"
      usage: >
        Yüklenen içeriklerin yerine geçici olarak gösterilen iskelet/placeholder alanıdır. Genellikle içerik yüklenirken arayüzde ani kayma ve boşluk oluşmasını engeller.
      props:
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Hangi element veya bileşen olarak render edileceği (örn. div, span, custom component)."
      slots:
        - name: "default"
          type: "VNode"
          description: "Skeleton içine özel içerik eklemek için kullanılabilir."
      example: |
        <template>
          <div class="flex items-center gap-4">
            <USkeleton class="h-12 w-12 rounded-full" />
            <div class="grid gap-2">
              <USkeleton class="h-4 w-[250px]" />
              <USkeleton class="h-4 w-[200px]" />
            </div>
          </div>
        </template>
      notes:
        - "Tailwind ve app.config.ts ile stilleri kolayca özelleştirilebilir (default: animate-pulse, bg-elevated, rounded-md)."
        - "Kapsamı ve şekli tamamen class ile belirlenir (örn. yuvarlak, dikdörtgen, yazı boyunda vs)."
        - "Veri yüklenme sürecinde kullanıcıya loading hissi verir, arayüzde ani kaymayı azaltır."
        - "Herhangi bir içeriğin yerine, istenen her yerde kullanılabilir."
    - name: "USlideover"
      link: "https://ui.nuxt.com/components/slideover"
      usage: >
        Sayfanın herhangi bir kenarından kayan, açılır/kapanır dialog panelidir. Slideover; form, detay, aksiyon veya yan menü göstermek için kullanılır.
        UButton veya herhangi bir tetikleyici component ile açılır. #content slotunda içerik gösterilir. Header, body, footer slotlarıyla tamamen özelleştirilebilir.
        side ile kayma yönü, overlay ile arka plan, transition ile animasyon kontrol edilir.
        Modal davranışında, kullanıcı dışarı tıklayınca veya ESC tuşu ile kapanır.
      props:
        - name: "title"
          type: "string"
          default: "undefined"
          description: "Slideover başlığını belirler. #header slotu yoksa header'da otomatik gösterilir."
        - name: "description"
          type: "string"
          default: "undefined"
          description: "Slideover başlığının altında açıklama metni."
        - name: "content"
          type: "object"
          default: "undefined"
          description: "DialogContentProps ile içerik alanının tüm detay ayarlarını yapmanı sağlar."
        - name: "overlay"
          type: "boolean"
          default: "true"
          description: "Slideover açıldığında arka plana overlay ekler."
        - name: "transition"
          type: "boolean"
          default: "true"
          description: "Slideover'ın açılış/kapanış animasyonunu kontrol eder."
        - name: "side"
          type: "'top' | 'bottom' | 'right' | 'left'"
          default: "'right'"
          description: "Slideover'ın hangi kenardan açılacağını belirler."
        - name: "portal"
          type: "string | boolean | HTMLElement"
          default: "true"
          description: "Slideover'ın hangi DOM node'da render edileceği."
        - name: "close"
          type: "boolean | Partial<ButtonProps>"
          default: "true"
          description: "Kapatma butonunu gösterir, veya özelleştirir."
        - name: "closeIcon"
          type: "string"
          default: "'i-lucide-x'"
          description: "Kapatma butonu ikonu (varsayılan i-lucide-x)."
        - name: "dismissible"
          type: "boolean"
          default: "true"
          description: "Dışarı tıklayınca/ESC ile kapanıp kapanmayacağını kontrol eder."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot ve class ayarlarını override etmek için."
        - name: "open"
          type: "boolean"
          default: "undefined"
          description: "Açık/kapalı state'i dışarıdan (v-model:open ile) kontrol etmek için."
        - name: "defaultOpen"
          type: "boolean"
          default: "undefined"
          description: "İlk yüklemede açık gelmesini sağlar."
        - name: "modal"
          type: "boolean"
          default: "true"
          description: "Modal davranışı. true ise dış etkileşim engellenir."
      slots:
        - name: "default"
          type: "VNode"
          description: "Slideover'ı tetikleyen element."
        - name: "content"
          type: "VNode"
          description: "Ana içerik alanı. Slideover açıkken gösterilir."
        - name: "header"
          type: "VNode"
          description: "Başlık ve açıklama için özel slot."
        - name: "title"
          type: "VNode"
          description: "Başlık slotu. Prop ile birlikte kullanılabilir."
        - name: "description"
          type: "VNode"
          description: "Açıklama slotu. Prop ile birlikte kullanılabilir."
        - name: "actions"
          type: "VNode"
          description: "Header sağında aksiyon slotu."
        - name: "close"
          type: "VNode"
          description: "Kapatma butonunu override etmek için."
        - name: "body"
          type: "VNode"
          description: "Ana gövde alanı. Form, tablo, detay gibi içerikler için."
        - name: "footer"
          type: "VNode"
          description: "Gövde altı ek alan. Butonlar, notlar, ek aksiyonlar için."
      emits:
        - name: "update:open"
          payload: "[value: boolean]"
          description: "Açık/kapalı state değiştiğinde tetiklenir (v-model:open ile)."
        - name: "after:leave"
          payload: "[]"
          description: "Slideover kapanma animasyonu bitince tetiklenir."
        - name: "after:enter"
          payload: "[]"
          description: "Slideover açılma animasyonu bitince tetiklenir."
        - name: "close:prevent"
          payload: "[]"
          description: "dismissible=false ise dışarı tıklama ile kapatma engellendiğinde tetiklenir."
      example: |
        <template>
          <USlideover title="Slideover with title">
            <UButton label="Open" color="neutral" variant="subtle" />
            <template #body>
              <Placeholder class="h-full" />
            </template>
          </USlideover>
        </template>
      notes:
        - "side prop'u ile slideover yönünü ayarlayabilirsin (top, right, bottom, left)."
        - "overlay ve transition ile arka plan ve animasyon davranışı yönetilir."
        - "Kapatma butonu close ve closeIcon ile tam kontrol edilebilir."
        - "dismissible=false ile kullanıcı dışarı tıklasa da kapanmaz, close:prevent eventi tetiklenir."
        - "Programatik açma için useOverlay() composable ile instance yönetebilirsin."
        - "header, body, footer slotları ile tamamen özelleştirilebilir."
        - "v-model:open ile açık/kapalı durumu dışarıdan kontrol edebilirsin."
    - name: "USlider"
      link: "https://ui.nuxt.com/components/slider"
      usage: >
        Sayısal bir değeri veya aralığı seçmek için kullanılır. v-model veya model-value ile kontrol edilir.
        min, max, step ile aralık ve hassasiyet belirlenir. Tekli ya da çoklu (range) thumb ile kullanılabilir.
        Tooltip, renk, boyut, dikey/yatay oryantasyon gibi özelliklerle tam özelleştirilebilir.
        Formlarda, ayar panellerinde, filtrelerde çok sık kullanılır.
      props:
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Hangi HTML element/Component olarak render edileceğini belirler."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Slider thumb ve track boyutunu belirler."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Slider'ın temasını belirler."
        - name: "orientation"
          type: "'horizontal' | 'vertical'"
          default: "'horizontal'"
          description: "Slider'ın yatay (varsayılan) veya dikey olup olmadığını belirler."
        - name: "tooltip"
          type: "boolean | TooltipProps"
          default: "undefined"
          description: "Thumb üzerinde değer gösteren tooltip aktif edilir. true veya özelleştirilebilir Tooltip props'u alır."
        - name: "defaultValue"
          type: "number | number[]"
          default: "undefined"
          description: "Kontrolsüz kullanımda başlangıç değerini belirler (tek değer veya dizi - range)."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot ve class özelleştirmeleri için."
        - name: "name"
          type: "string"
          default: "undefined"
          description: "Form submit sırasında gönderilecek alan adı."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Slider'ın pasif olup olmadığını belirler."
        - name: "inverted"
          type: "boolean"
          default: "false"
          description: "Slider'ı görsel olarak terse çevirir."
        - name: "min"
          type: "number"
          default: "0"
          description: "Slider'ın minimum değeri."
        - name: "max"
          type: "number"
          default: "100"
          description: "Slider'ın maksimum değeri."
        - name: "step"
          type: "number"
          default: "1"
          description: "Her bir artışta/değişimde ilerleme miktarı."
        - name: "minStepsBetweenThumbs"
          type: "number"
          default: "undefined"
          description: "Çoklu thumb'da minimum mesafe (adım) sınırı."
        - name: "modelValue"
          type: "number | number[]"
          default: "undefined"
          description: "Slider değerini dışarıdan kontrol etmek için (tek veya dizi - range). v-model ile bağlanır."
      emits:
        - name: "change"
          payload: "[payload: Event]"
          description: "Kullanıcı slider'ı değiştirince tetiklenir."
        - name: "update:modelValue"
          payload: "[value: number | number[] | undefined]"
          description: "Slider değeri değişince tetiklenir (v-model ile senkron)."
      example: |
        <template>
          <USlider :min="0" :max="100" :step="5" v-model="value" tooltip size="lg" color="success" />
        </template>
        <script setup lang="ts">
        const value = ref(50)
        </script>
      notes:
        - "Tek bir thumb için modelValue/ defaultValue number, range için array ([min, max]) kullanılabilir."
        - "tooltip=true ile thumb üstünde canlı değer göstergesi açılır."
        - "orientation='vertical' ile dikey slider elde edilir (class ile yüksekliği ayarlaman gerekir)."
        - "color ve size ile tema ve boyut hızlıca değiştirilebilir."
        - "disabled=true ile slider pasifleşir ve etkileşim kapanır."
        - "minStepsBetweenThumbs ile çoklu thumb arası minimum mesafeyi belirleyebilirsin."
        - "inverted ile görsel olarak scale ters döner."
    - name: "UStepper"
      link: "https://ui.nuxt.com/components/stepper"
      usage: >
        Çok adımlı işlemler için adım/adım ilerlemeyi ve hangi aşamada olunduğunu göstermek amacıyla kullanılır.
        Her adım bir nesneyle tanımlanır (title, description, icon, vs.). Adımlar arası geçiş tıklama veya kontrol butonları ile yapılabilir.
        Özellikle form wizard, kayıt süreçleri ve onboarding ekranlarında tercih edilir.
      props:
        - name: "items"
          type: "StepperItem[]"
          default: "undefined"
          description: "Her adım için başlık, açıklama, ikon, içerik, slot vs. barındıran adım nesneleri dizisi."
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Component'in hangi HTML elemanı olarak render edileceğini belirler."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Stepper’ın ve adım butonlarının genel boyutu."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Adım tamamlandı/aktif stil renklerini belirler."
        - name: "orientation"
          type: "'horizontal' | 'vertical'"
          default: "'horizontal'"
          description: "Stepper’ın yatay (varsayılan) veya dikey olarak gösterilmesi."
        - name: "defaultValue"
          type: "string | number"
          default: "undefined"
          description: "İlk yüklemede hangi adımın aktif olacağını belirler."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Tüm stepper adımları pasif olur, kullanıcı tıklayamaz."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/class tabanlı stil ve yapı override için."
        - name: "linear"
          type: "boolean"
          default: "true"
          description: "Adımlar sırayla mı tamamlanmalı, rastgele adım seçilebilsin mi?"
        - name: "modelValue"
          type: "string | number"
          default: "undefined"
          description: "Aktif adımı dışarıdan kontrol etmek için (v-model ile)."
      slots:
        - name: "indicator"
          type: "VNode"
          description: "Adım simgesi/ikonunu özelleştirmek için."
        - name: "title"
          type: "VNode"
          description: "Adım başlığını özelleştirmek için."
        - name: "description"
          type: "VNode"
          description: "Adım açıklamasını özelleştirmek için."
        - name: "content"
          type: "VNode"
          description: "Aktif adımda gösterilecek ana içerik."
        # Her adım için slot: #{{item.slot}} şeklinde özel içerik verilebilir.
      emits:
        - name: "next"
          payload: "[payload: StepperItem]"
          description: "Kullanıcı bir sonraki adıma geçtiğinde tetiklenir."
        - name: "prev"
          payload: "[payload: StepperItem]"
          description: "Kullanıcı bir önceki adıma döndüğünde tetiklenir."
        - name: "update:modelValue"
          payload: "[value: string | number | undefined]"
          description: "Aktif adım değiştiğinde v-model senkronu için tetiklenir."
      expose:
        - name: "next"
          type: "() => void"
          description: "Programatik olarak bir sonraki adıma geç."
        - name: "prev"
          type: "() => void"
          description: "Programatik olarak bir önceki adıma dön."
        - name: "hasNext"
          type: "Ref<boolean>"
          description: "Bir sonraki adım var mı bilgisini verir."
        - name: "hasPrev"
          type: "Ref<boolean>"
          description: "Bir önceki adım var mı bilgisini verir."
      example: |
        <script setup lang="ts">
        import type { StepperItem } from '@nuxt/ui'
        const items = ref<StepperItem[]>([
          { title: 'Address', description: 'Add your address here', icon: 'i-lucide-house' },
          { title: 'Shipping', description: 'Set your preferred shipping method', icon: 'i-lucide-truck' },
          { title: 'Checkout', description: 'Confirm your order' }
        ])
        </script>
        <template>
          <UStepper :items="items" size="lg" color="success" class="w-full" />
        </template>
      notes:
        - "Her adımda title, description, icon, slot, content gibi alanlar kullanılabilir."
        - "Slot ile (#content veya #{{item.slot}}) adım içeriği tamamen özelleştirilebilir."
        - "linear=false ile kullanıcı dilediği adımı seçebilir; aksi halde sıralı geçiş yapılır."
        - "v-model ile aktif adımı dışarıdan yönetebilirsin."
        - "next/prev fonksiyonları ile programatik geçiş sağlanır."
        - "orientation='vertical' ile dikey stepper yapılabilir."
        - "disabled ile tüm stepper pasifleşir, yalnızca kontrol butonlarıyla ilerleme yapılır."
    - name: "USwitch"
      link: "https://ui.nuxt.com/components/switch"
      usage: >
        İki durum (açık/kapalı) arasında hızlıca geçiş yapmak için kullanılır. v-model ile kontrol edilir.
        Etiket, açıklama, ikon, yükleniyor animasyonu, renk ve boyut gibi pek çok özelliğiyle formlarda ve ayar panellerinde sıkça kullanılır.
        Geniş erişilebilirlik ve keyboard desteğine sahiptir.
      props:
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Component'in hangi HTML elemanı olarak render edileceğini belirler."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Switch’in aktif durumda alacağı ana tema rengi."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Switch’in genel boyutu (base, thumb, label vs.)."
        - name: "loading"
          type: "boolean"
          default: "false"
          description: "Switch tıklanamaz ve yükleniyor animasyonu gösterilir."
        - name: "loadingIcon"
          type: "string"
          default: "'i-lucide-loader-circle'"
          description: "Yükleniyor animasyonu için ikon. (Varsayılan: i-lucide-loader-circle)"
        - name: "checkedIcon"
          type: "string"
          default: "undefined"
          description: "Aktif (checked) durumunda thumb üzerinde gösterilecek ikon."
        - name: "uncheckedIcon"
          type: "string"
          default: "undefined"
          description: "Pasif (unchecked) durumunda thumb üzerinde gösterilecek ikon."
        - name: "label"
          type: "string"
          default: "undefined"
          description: "Switch yanına gösterilecek etiket."
        - name: "description"
          type: "string"
          default: "undefined"
          description: "Label altına ek açıklama/metin."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot ve class özelleştirmeleri için."
        - name: "defaultValue"
          type: "boolean"
          default: "undefined"
          description: "Kontrolsüz kullanımda başlangıç durumu."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Switch pasif, tıklanamaz olur."
        - name: "id"
          type: "string"
          default: "undefined"
          description: "Switch için özel id tanımı."
        - name: "name"
          type: "string"
          default: "undefined"
          description: "Form submit sırasında gönderilecek alan adı."
        - name: "required"
          type: "boolean"
          default: "false"
          description: "Zorunlu alan; label sonunda yıldız (*) ile gösterilir."
        - name: "value"
          type: "string"
          default: "undefined"
          description: "Form submit edildiğinde gönderilecek değer."
        - name: "modelValue"
          type: "boolean"
          default: "undefined"
          description: "Switch durumunu dışarıdan kontrol etmek için (v-model ile)."
      slots:
        - name: "label"
          type: "VNode"
          description: "Etiket alanını özelleştirmek için."
        - name: "description"
          type: "VNode"
          description: "Açıklama alanını özelleştirmek için."
      emits:
        - name: "change"
          payload: "[payload: Event]"
          description: "Kullanıcı Switch’in durumunu değiştirdiğinde tetiklenir."
        - name: "update:modelValue"
          payload: "[value: boolean]"
          description: "Switch durumu değiştiğinde v-model ile senkronizasyon için tetiklenir."
      example: |
        <template>
          <USwitch v-model="checked" label="E-posta bildirimleri" color="success" size="lg" description="Bülten aboneliği için etkinleştir." />
        </template>
        <script setup lang="ts">
        const checked = ref(false)
        </script>
      notes:
        - "checkedIcon ve uncheckedIcon ile aktif/pasif durumda farklı ikonlar gösterilebilir."
        - "loading=true ile kullanıcıya yükleniyor/işleniyor gösterimi yapılır."
        - "label ve description hem prop ile hem slot ile özelleştirilebilir."
        - "disabled ile tüm etkileşim kapatılır; required ile formda zorunlu hale getirilir."
        - "color ve size ile tema ve boyut hızlıca ayarlanır."
        - "v-model veya modelValue ile kontrol sağlanır."
    - name: "UTable"
      link: "https://ui.nuxt.com/components/table"
      usage: >
        Satır ve sütunlardan oluşan esnek, responsive ve yüksek performanslı bir tablo bileşenidir.
        TanStack Table tabanlıdır, Vue'da tam type-safe API ve gelişmiş özellikler sunar.
        Veri, sütunlar ve seçenekler ile tamamen özelleştirilebilir; sticky header/footer, sıralama, filtreleme, seçim, gruplama, pagination, infinite scroll, drag-drop ve slot ile içerik özelleştirme desteği bulunur.
      props:
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Tablonun hangi HTML elemanı/Component olarak render edileceği."
        - name: "data"
          type: "unknown[]"
          default: "[]"
          description: "Tabloda gösterilecek veri dizisi (her satır bir obje)."
        - name: "columns"
          type: "TableColumn<unknown, unknown>[]"
          default: "[]"
          description: "Sütun tanımları, başlık, cell, footer, özelleştirici fonksiyonlar içerebilir."
        - name: "caption"
          type: "string"
          default: "undefined"
          description: "Tablonun altına eklenebilecek açıklama/caption."
        - name: "meta"
          type: "TableMeta<unknown>"
          default: "undefined"
          description: "Satır, sütun ve tabloya özel meta bilgi veya class/inline stil eklemek için."
        - name: "empty"
          type: "string"
          default: "undefined"
          description: "Tablo boşken gösterilecek mesaj."
        - name: "sticky"
          type: "boolean | 'header' | 'footer'"
          default: "undefined"
          description: "Header/footer'ın sticky olmasını sağlar."
        - name: "loading"
          type: "boolean"
          default: "false"
          description: "Tablo yükleniyor durumunu gösterir."
        - name: "loadingColor"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Yükleniyor animasyonunun rengini belirler."
        - name: "loadingAnimation"
          type: "'carousel' | 'carousel-inverse' | 'swing' | 'elastic'"
          default: "'carousel'"
          description: "Yükleniyor animasyonu stilini belirler."
        - name: "watchOptions"
          type: "WatchOptions<boolean>"
          default: "{ deep: true }"
          description: "Reactivity ayarları; performans için optimize edilebilir."
        - name: "globalFilterOptions"
          type: "object"
          default: "undefined"
          description: "Global filtre opsiyonları."
        - name: "columnFiltersOptions"
          type: "object"
          default: "undefined"
          description: "Kolon bazlı filtre opsiyonları."
        - name: "columnPinningOptions"
          type: "object"
          default: "undefined"
          description: "Kolon sabitleme opsiyonları."
        - name: "columnSizingOptions"
          type: "object"
          default: "undefined"
          description: "Kolon genişliği opsiyonları."
        - name: "visibilityOptions"
          type: "object"
          default: "undefined"
          description: "Kolon görünürlüğü opsiyonları."
        - name: "sortingOptions"
          type: "object"
          default: "undefined"
          description: "Sıralama opsiyonları."
        - name: "groupingOptions"
          type: "object"
          default: "undefined"
          description: "Gruplama opsiyonları."
        - name: "expandedOptions"
          type: "object"
          default: "undefined"
          description: "Satır expand opsiyonları."
        - name: "rowSelectionOptions"
          type: "object"
          default: "undefined"
          description: "Satır seçimi opsiyonları."
        - name: "rowPinningOptions"
          type: "object"
          default: "undefined"
          description: "Satır sabitleme opsiyonları."
        - name: "paginationOptions"
          type: "object"
          default: "undefined"
          description: "Pagination ayarları."
        - name: "facetedOptions"
          type: "object"
          default: "undefined"
          description: "Ekstra facet özellikleri."
        - name: "onSelect"
          type: "function"
          default: "undefined"
          description: "Satır seçimi olunca çalışacak fonksiyon."
        - name: "onHover"
          type: "function"
          default: "undefined"
          description: "Satır hover olunca çalışacak fonksiyon."
        - name: "onContextmenu"
          type: "function | function[]"
          default: "undefined"
          description: "Satır sağ tıklanınca çalışacak fonksiyon."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/class bazlı özelleştirme için."
        - name: "state"
          type: "Partial<TableState>"
          default: "undefined"
          description: "Tablonun mevcut state’i."
        - name: "onStateChange"
          type: "function"
          default: "undefined"
          description: "State değişikliklerinde tetiklenecek fonksiyon."
        - name: "renderFallbackValue"
          type: "any"
          default: "undefined"
          description: "Fallback (render edilemeyen hücreler için) değer."
        - name: "_features"
          type: "TableFeature<any>[]"
          default: "undefined"
          description: "Ek table özellikleri için."
        - name: "autoResetAll"
          type: "boolean"
          default: "undefined"
          description: "Tüm state’in resetlenmesi."
        - name: "debugAll"
          type: "boolean"
          default: "undefined"
          description: "Debug için."
        - name: "debugCells"
          type: "boolean"
          default: "undefined"
          description: "Debug için."
        - name: "debugColumns"
          type: "boolean"
          default: "undefined"
          description: "Debug için."
        - name: "debugHeaders"
          type: "boolean"
          default: "undefined"
          description: "Debug için."
        - name: "debugRows"
          type: "boolean"
          default: "undefined"
          description: "Debug için."
        - name: "debugTable"
          type: "boolean"
          default: "undefined"
          description: "Debug için."
        - name: "defaultColumn"
          type: "Partial<ColumnDef<unknown, unknown>>"
          default: "undefined"
          description: "Varsayılan tüm kolonlar için opsiyonlar."
        - name: "getRowId"
          type: "function"
          default: "undefined"
          description: "Satır id’si üreten fonksiyon."
        - name: "getSubRows"
          type: "function"
          default: "undefined"
          description: "Alt satır üreten fonksiyon."
        - name: "initialState"
          type: "InitialTableState"
          default: "undefined"
          description: "Tablonun ilk state’i."
        - name: "mergeOptions"
          type: "function"
          default: "undefined"
          description: "Table opsiyonlarını override etmek için."
        - name: "globalFilter"
          type: "string"
          default: "undefined"
          description: "Tüm tabloya global filtre uygular."
        - name: "columnFilters"
          type: "ColumnFiltersState"
          default: "[]"
          description: "Kolon filtreleme state’i."
        - name: "columnOrder"
          type: "ColumnOrderState"
          default: "[]"
          description: "Kolon sıralama state’i."
        - name: "columnVisibility"
          type: "VisibilityState"
          default: "{}"
          description: "Kolon görünürlüğü state’i."
        - name: "columnPinning"
          type: "ColumnPinningState"
          default: "{}"
          description: "Kolon sabitleme state’i."
        - name: "columnSizing"
          type: "ColumnSizingState"
          default: "{}"
          description: "Kolon genişlikleri state’i."
        - name: "columnSizingInfo"
          type: "ColumnSizingInfoState"
          default: "{}"
          description: "Kolon genişliği bilgi state’i."
        - name: "rowSelection"
          type: "RowSelectionState"
          default: "{}"
          description: "Satır seçim state’i."
        - name: "rowPinning"
          type: "RowPinningState"
          default: "{}"
          description: "Satır sabitleme state’i."
        - name: "sorting"
          type: "SortingState"
          default: "[]"
          description: "Kolon sıralama state’i."
        - name: "grouping"
          type: "GroupingState"
          default: "[]"
          description: "Satır gruplama state’i."
        - name: "expanded"
          type: "ExpandedState"
          default: "{}"
          description: "Satır açılır state’i."
        - name: "pagination"
          type: "PaginationState"
          default: "{}"
          description: "Sayfalandırma state’i."
      slots:
        - name: "expanded"
          type: "VNode"
          description: "Expand edilen satır içeriğini gösterir."
        - name: "empty"
          type: "VNode"
          description: "Tablo boşken gösterilecek içerik."
        - name: "loading"
          type: "VNode"
          description: "Tablo yüklenirken gösterilecek içerik."
        - name: "caption"
          type: "VNode"
          description: "Tablo altına caption içerik eklemek için."
        - name: "body-top"
          type: "VNode"
          description: "Tbody başında özel slot."
        - name: "body-bottom"
          type: "VNode"
          description: "Tbody sonunda özel slot."
      expose:
        - name: "tableRef"
          type: "Ref<HTMLTableElement | null>"
          description: "Gerçek DOM table elementine erişim."
        - name: "tableApi"
          type: "Ref<Table | null>"
          description: "TanStack Table API referansı."
      example: |
        <template>
          <UTable :data="data" :columns="columns" sticky loading loading-color="primary" />
        </template>
      notes:
        - "TanStack Table özelliklerinin çoğu desteklenir; gelişmiş filtreleme, sıralama, gruplama, seçim, expandable row, slot ile özelleştirme, sticky header/footer, drag-drop, pagination gibi tüm modern özellikler mevcut."
        - "Vue h() fonksiyonu ile hücre ve header'larda component render edilebilir."
        - "Slot ile header ve hücrede tam özelleştirme imkanı sunar (örn: #column-cell, #column-header, #expanded)."
        - "sticky, loading, globalFilter, pagination gibi props ile UI ve davranışlar anında yönetilebilir."
        - "Context menu, satır tıklama, hover gibi etkileşimler için event listener props (onSelect, onHover, onContextmenu) eklenebilir."
        - "Tüm tablo state'i v-model ile kontrol edilebilir (ör: v-model:row-selection, v-model:sorting)."
        - "Her türlü tablo senaryosu için örnekleri inceleyebilirsin."
    - name: "UTabs"
      link: "https://ui.nuxt.com/components/tabs"
      usage: >
        Birden fazla paneli sekmeli yapıda, tek seferde yalnızca birinin görünür olacağı şekilde yönetmek için kullanılır.
        items prop'u ile sekmeler, ikon, avatar, badge, özel slot ve içerik ayarlanır.
        Form, ayar, detay ve dashboard gibi modüllerde sıklıkla tercih edilir.
        Farklı renk, varyant, oryantasyon, boyut ve slot özelleştirmeleriyle esnek bir yapı sunar.
      props:
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Bileşenin hangi HTML element/Component olarak render edileceği."
        - name: "items"
          type: "TabsItem[]"
          default: "undefined"
          description: "Her sekme için label, icon, avatar, badge, içerik vs. belirleyen dizi."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Aktif sekme ve indicator rengi."
        - name: "variant"
          type: "'pill' | 'link'"
          default: "'pill'"
          description: "Sekmelerin görünümü (düğme ya da bağlantı)."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Sekme başlıklarının genel boyutu."
        - name: "orientation"
          type: "'horizontal' | 'vertical'"
          default: "'horizontal'"
          description: "Sekmelerin yatay veya dikey yerleşimi."
        - name: "content"
          type: "boolean"
          default: "true"
          description: "Sekmelerde içerik gösterilip gösterilmeyeceğini kontrol eder."
        - name: "labelKey"
          type: "string"
          default: "'label'"
          description: "items nesnesinde hangi property'nin başlık olarak kullanılacağını belirler."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot ve class bazlı style override için."
        - name: "defaultValue"
          type: "string | number"
          default: "'0'"
          description: "İlk yüklemede hangi sekmenin aktif olacağını belirtir."
        - name: "modelValue"
          type: "string | number"
          default: "undefined"
          description: "Aktif sekmeyi dışarıdan kontrol etmek için (v-model ile)."
        - name: "activationMode"
          type: "'automatic' | 'manual'"
          default: "undefined"
          description: "Sekmenin odakla (automatic) veya tıklama ile (manual) aktifleşip aktifleşmeyeceği."
        - name: "unmountOnHide"
          type: "boolean"
          default: "true"
          description: "Sekme kapanınca içeriğin DOM'dan kaldırılıp kaldırılmayacağını belirler."
      slots:
        - name: "leading"
          type: "VNode"
          description: "Sekme başlıklarının solunda özel içerik göstermek için."
        - name: "default"
          type: "VNode"
          description: "Sekme butonlarının ana slotu (özelleştirmek için)."
        - name: "trailing"
          type: "VNode"
          description: "Sekme başlıklarının sağında özel içerik göstermek için."
        - name: "content"
          type: "VNode"
          description: "Sekme içerik alanı (her item için)."
        - name: "list-leading"
          type: "VNode"
          description: "Sekmeler listesinin başında özel alan."
        - name: "list-trailing"
          type: "VNode"
          description: "Sekmeler listesinin sonunda özel alan."
        # Her sekme için slot: #{{item.slot}} şeklinde özel içerik verilebilir.
      emits:
        - name: "update:modelValue"
          payload: "[payload: string | number]"
          description: "Aktif sekme değiştiğinde v-model ile tetiklenir."
      expose:
        - name: "triggersRef"
          type: "Ref<ComponentPublicInstance[]>"
          description: "Sekme başlıklarının referansına erişim."
      example: |
        <script setup lang="ts">
        import type { TabsItem } from '@nuxt/ui'
        const items = ref<TabsItem[]>([
          { label: 'Account', icon: 'i-lucide-user', content: 'Account içeriği.' },
          { label: 'Password', icon: 'i-lucide-lock', content: 'Şifre içeriği.' }
        ])
        </script>
        <template>
          <UTabs :items="items" color="success" variant="pill" size="lg" class="w-full" />
        </template>
      notes:
        - "Sekme başlıkları, içerik ve tüm stiller prop ve slotlarla tam kontrol edilebilir."
        - "content=false ile sadece toggle/filtre gibi butonlu sekme kontrolü sağlanır."
        - "slot özelliğiyle sekme içeriğini tam özelleştirebilir, form, tablo veya detay gösterebilirsin."
        - "Dikey sekme için orientation='vertical', link tarzı sekme için variant='link' kullanılır."
        - "unmountOnHide=false ile içerikler DOM'da saklanır (performans/animasyon amaçlı)."
        - "v-model ile aktif sekme dışarıdan kontrol edilebilir."
    - name: "UTextarea"
      link: "https://ui.nuxt.com/components/textarea"
      usage: >
        Çok satırlı metin girişi için kullanılır.
        v-model ile iki yönlü veri bağlama yapılabilir. Otomatik boyutlandırma, ikon, avatar, renk, boyut, varyant ve loading gibi gelişmiş özellikleri destekler.
        Formlarda, yorum/mesaj kutularında veya büyük metin girişlerinde tercih edilir.
      props:
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Hangi HTML element/component olarak render edileceğini belirler."
        - name: "id"
          type: "string"
          default: "undefined"
          description: "Textarea için id."
        - name: "name"
          type: "string"
          default: "undefined"
          description: "Form submit sırasında gönderilecek alan adı."
        - name: "placeholder"
          type: "string"
          default: "undefined"
          description: "Boşken gösterilecek placeholder metni."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Odak ve highlight rengi."
        - name: "variant"
          type: "'outline' | 'soft' | 'subtle' | 'ghost' | 'none'"
          default: "'outline'"
          description: "Görsel varyant stili."
        - name: "size"
          type: "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
          default: "'md'"
          description: "Textarea'nın genel boyutu."
        - name: "required"
          type: "boolean"
          default: "false"
          description: "Form için zorunlu olup olmadığını belirtir."
        - name: "autofocus"
          type: "boolean"
          default: "false"
          description: "Bileşen yüklendiğinde otomatik odaklanır."
        - name: "autofocusDelay"
          type: "number"
          default: "0"
          description: "Otomatik odaklanmada milisaniye cinsinden gecikme."
        - name: "autoresize"
          type: "boolean"
          default: "false"
          description: "Metin arttıkça yüksekliğin otomatik artmasını sağlar."
        - name: "autoresizeDelay"
          type: "number"
          default: "0"
          description: "Autoresize için gecikme süresi."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Textarea'nın pasif olup olmadığını belirler."
        - name: "rows"
          type: "number"
          default: "3"
          description: "Başlangıçta kaç satır görüneceğini belirler."
        - name: "maxrows"
          type: "number"
          default: "0"
          description: "Autoresize modunda maksimum satır sayısı. 0 ise sınırsız."
        - name: "highlight"
          type: "boolean"
          default: "false"
          description: "Odakta ring rengini vurgular."
        - name: "modelValue"
          type: "TextareaValue"
          default: "undefined"
          description: "Textarea değerini dışarıdan kontrol etmek için (v-model ile)."
        - name: "defaultValue"
          type: "TextareaValue"
          default: "undefined"
          description: "Kontrolsüz kullanımda başlangıç değeri."
        - name: "modelModifiers"
          type: "object"
          default: "undefined"
          description: "v-model modifikasyonları (string, number, trim, lazy, nullify)."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/class bazlı özelleştirme."
        - name: "icon"
          type: "string"
          default: "undefined"
          description: "Sol/sağda ikon göstermek için."
        - name: "avatar"
          type: "AvatarProps"
          default: "undefined"
          description: "Sol tarafta avatar göstermek için."
        - name: "leading"
          type: "boolean"
          default: "false"
          description: "Sol ikon/slot aktif etme."
        - name: "leadingIcon"
          type: "string"
          default: "undefined"
          description: "Sol tarafa ikon ekler."
        - name: "trailing"
          type: "boolean"
          default: "false"
          description: "Sağ ikon/slot aktif etme."
        - name: "trailingIcon"
          type: "string"
          default: "undefined"
          description: "Sağ tarafa ikon ekler."
        - name: "loading"
          type: "boolean"
          default: "false"
          description: "Sağda loading animasyonu gösterir."
        - name: "loadingIcon"
          type: "string"
          default: "'i-lucide-loader-circle'"
          description: "Yükleniyor animasyonu için ikon."
      slots:
        - name: "leading"
          type: "VNode"
          description: "Textarea'nın solunda özel slot/ikon/avatar."
        - name: "default"
          type: "VNode"
          description: "Ana içerik slotu (genellikle input)."
        - name: "trailing"
          type: "VNode"
          description: "Textarea'nın sağında özel slot/ikon."
      emits:
        - name: "blur"
          payload: "[event: FocusEvent]"
          description: "Textarea focus kaybedince tetiklenir."
        - name: "change"
          payload: "[event: Event]"
          description: "Değeri değişince tetiklenir."
        - name: "update:modelValue"
          payload: "[payload: TextareaValue]"
          description: "Değer değişiminde v-model ile senkronizasyon."
      expose:
        - name: "textareaRef"
          type: "Ref<HTMLTextAreaElement | null>"
          description: "Gerçek textarea DOM elementine erişim."
      example: |
        <template>
          <UTextarea v-model="desc" rows="6" placeholder="Yorumunuzu yazın..." icon="i-lucide-message-square-text" />
        </template>
        <script setup lang="ts">
        const desc = ref('')
        </script>
      notes:
        - "autoresize=true ile textarea yazdıkça satır yüksekliği artar, maxrows ile sınırlandırılabilir."
        - "icon, leadingIcon, trailingIcon ile her iki yana ikon eklenebilir."
        - "avatar ile sol tarafta profil fotoğrafı gösterilebilir."
        - "loading, disabled, highlight ve diğer tüm özellikler ile formlarda tam kontrol sağlanır."
        - "variant, color ve size ile tüm görsel ve tema detayları değiştirilebilir."
        - "Slot ile ikon, buton, loader gibi özel içerikler ekleyebilirsin."
    - name: "UTimeline"
      link: "https://ui.nuxt.com/components/timeline"
      usage: >
        Zaman içerisinde gerçekleşen olayları, adım adım tarih, başlık, açıklama, ikon ya da avatar ile göstermek için kullanılır.
        Proje akışı, süreç yönetimi, kullanıcı aktiviteleri, iş geçmişi veya teslimat planı gibi uygulama alanlarında tercih edilir.
        Olay dizisini yatay veya dikey gösterebilir; aktif adım, renk, boyut ve yön ayarlanabilir, slot ve özel sınıflarla esnekleştirilebilir.
      props:
        - name: "items"
          type: "TimelineItem[]"
          default: "[]"
          description: "Her olay/adım için tarih, başlık, açıklama, ikon, avatar ve stil içeren nesne dizisi."
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Bileşenin hangi HTML element/component olarak render edileceği."
        - name: "size"
          type: "'3xs' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl'"
          default: "'md'"
          description: "Tüm timeline ve içeriklerin boyutu."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Aktif ve tamamlanan adımların rengi."
        - name: "orientation"
          type: "'vertical' | 'horizontal'"
          default: "'vertical'"
          description: "Dikey ya da yatay yönlendirme."
        - name: "defaultValue"
          type: "string | number"
          default: "undefined"
          description: "Başlangıçta aktif olacak adımın index veya value değeri."
        - name: "reverse"
          type: "boolean"
          default: "false"
          description: "Olay sırasını tersine çevirir (sondan başa gösterim)."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/class bazlı tasarım özelleştirme."
        - name: "modelValue"
          type: "string | number"
          default: "undefined"
          description: "Aktif adımı dışarıdan v-model ile kontrol etmek için."
      slots:
        - name: "indicator"
          type: "VNode"
          description: "Adım göstergesini (ikon, avatar vb.) özelleştirmek için."
        - name: "date"
          type: "VNode"
          description: "Adımın tarih bilgisini slot ile özelleştirmek için."
        - name: "title"
          type: "VNode"
          description: "Başlığı slot ile özel içerik olarak göstermek için."
        - name: "description"
          type: "VNode"
          description: "Açıklama alanını slot ile değiştirmek için."
        # Özel slot kullanımı: #{{item.slot}}-indicator, #{{item.slot}}-date, #{{item.slot}}-title, #{{item.slot}}-description
      emits:
        - name: "update:modelValue"
          payload: "[value: string | number | undefined]"
          description: "Aktif adım değiştiğinde tetiklenir, v-model ile kullanılır."
      example: |
        <script setup lang="ts">
        import type { TimelineItem } from '@nuxt/ui'
        const items = ref<TimelineItem[]>([
          { date: '2025-03-15', title: 'Başlangıç', description: 'Proje başlatıldı', icon: 'i-lucide-rocket' },
          { date: '2025-03-22', title: 'Tasarım', description: 'Wireframe ve prototipler hazırlandı', icon: 'i-lucide-palette' },
          { date: '2025-03-29', title: 'Geliştirme', description: 'Çekirdek özellikler kodlandı', icon: 'i-lucide-code' },
          { date: '2025-04-05', title: 'Yayın', description: 'Test ve canlıya alma', icon: 'i-lucide-check-circle' }
        ])
        </script>
        <template>
          <UTimeline :items="items" :default-value="2" color="success" size="sm" class="w-96" />
        </template>
      notes:
        - "Her bir adım için ikon, avatar, başlık, açıklama ve tarih gösterebilirsin."
        - "Yatay ve dikey yönler desteklenir; orientation='horizontal' ile yatay zaman akışı."
        - "defaultValue veya v-model ile aktif adım kontrolü sağlanır."
        - "Slotlarla özel tasarımlar veya step başlıklarında ekstra içerik gösterebilirsin."
        - "reverse ile ters akış yapılabilir, ör: son yapılanlar en üstte."
        - "ui prop'u ile item, container, indicator, separator, wrapper, title vb. stillerine class verebilirsin."
    - name: "UToast"
      link: "https://ui.nuxt.com/components/toast"
      usage: >
        Kısa bilgi, durum ya da kullanıcıya aksiyon sonrası geri bildirim vermek için kullanılır.
        useToast composable'ı ile programatik olarak tetiklenir. Başlık, açıklama, ikon, avatar, renk, aksiyon butonları ve progress bar gibi özellikleriyle esnek şekilde yapılandırılabilir.
        Uygulamanın tamamında App bileşeni ile birlikte global olarak konum, süre, yığınlanma davranışı gibi ayarlar yapılabilir.
      props:
        - name: "as"
          type: "any"
          default: "undefined"
          description: "Bileşenin hangi HTML element/component olarak render edileceği."
        - name: "title"
          type: "StringOrVNode"
          default: "undefined"
          description: "Toast başlığı (kısa başlık veya VNode)."
        - name: "description"
          type: "StringOrVNode"
          default: "undefined"
          description: "Açıklama veya ek bilgi alanı."
        - name: "icon"
          type: "string"
          default: "undefined"
          description: "Başlık veya açıklama yanında ikon gösterimi."
        - name: "avatar"
          type: "AvatarProps"
          default: "undefined"
          description: "Küçük avatar resmi göstermek için."
        - name: "color"
          type: "'error' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'neutral'"
          default: "'primary'"
          description: "Toast'un temasal rengi (örn. hata, başarı, uyarı)."
        - name: "orientation"
          type: "'horizontal' | 'vertical'"
          default: "'vertical'"
          description: "İçerik ve aksiyonların hizalamasını ayarlar."
        - name: "close"
          type: "boolean | Partial<ButtonProps>"
          default: "true"
          description: "Kapatma butonu veya özelleştirme objesi, false ise gizlenir."
        - name: "closeIcon"
          type: "string"
          default: "'i-lucide-x'"
          description: "Kapatma butonundaki ikon."
        - name: "actions"
          type: "ButtonProps[]"
          default: "undefined"
          description: "Toast üzerinde bir veya daha fazla buton eklemek için (örn. Yeniden Dene, İptal)."
        - name: "progress"
          type: "boolean | { color?: string, ui?: any }"
          default: "true"
          description: "Kalan süreyi gösteren progress bar. false ile gizlenir."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/class bazlı stil özelleştirme."
        - name: "defaultOpen"
          type: "boolean"
          default: "undefined"
          description: "Başlangıçta açık olup olmayacağı."
        - name: "open"
          type: "boolean"
          default: "undefined"
          description: "Dışarıdan kontrol edilen açık/kapalı durumu (v-model:open)."
        - name: "type"
          type: "'foreground' | 'background'"
          default: "undefined"
          description: "Erişilebilirlik için toast duyarlılık tipi."
        - name: "duration"
          type: "number"
          default: "undefined"
          description: "Toast'un ekranda kalma süresi (ms)."
      slots:
        - name: "leading"
          description: "Başındaki özel ikon, avatar veya içerik."
        - name: "title"
          description: "Başlığı slot ile özelleştirmek için."
        - name: "description"
          description: "Açıklamayı slot ile özelleştirmek için."
        - name: "actions"
          description: "Aksiyon butonları için slot."
        - name: "close"
          description: "Kapatma butonunu slot ile değiştirmek için."
      emits:
        - name: "pause"
          payload: "[]"
          description: "Toast zamanlayıcısı durdurulduğunda (örn. mouse ile üzerine gelindiğinde) tetiklenir."
        - name: "escapeKeyDown"
          payload: "[event: KeyboardEvent]"
          description: "Escape tuşuna basınca tetiklenir."
        - name: "resume"
          payload: "[]"
          description: "Toast zamanlayıcısı devam ettiğinde tetiklenir."
        - name: "swipeStart"
          payload: "[event: SwipeEvent]"
          description: "Toast üzerinde swipe hareketi başladığında."
        - name: "swipeMove"
          payload: "[event: SwipeEvent]"
          description: "Swipe hareketi sırasında."
        - name: "swipeCancel"
          payload: "[event: SwipeEvent]"
          description: "Swipe hareketi iptal edildiğinde."
        - name: "swipeEnd"
          payload: "[event: SwipeEvent]"
          description: "Swipe hareketi bittiğinde."
        - name: "update:open"
          payload: "[value: boolean]"
          description: "v-model:open ile kontrol için açık/kapalı durumu güncellemesi."
      example: |
        <script setup lang="ts">
        const toast = useToast()
        function showSuccess() {
          toast.add({
            title: 'Kayıt Başarılı',
            description: 'Bilgileriniz kaydedildi.',
            icon: 'i-lucide-check-circle',
            color: 'success',
            actions: [
              { label: 'Kapat', color: 'neutral', variant: 'outline', onClick: () => toast.remove() }
            ]
          })
        }
        </script>
        <template>
          <UButton label="Göster" @click="showSuccess" />
        </template>
      notes:
        - "UToast bileşeni doğrudan kullanılmaz, toast.add({ ... }) ile tetiklenir."
        - "App bileşeninde :toaster prop'u ile tüm uygulamada konum, süre gibi global ayarları yapılandırabilirsin."
        - "Başlık, açıklama, ikon, avatar, renk ve aksiyon butonlarıyla özelleştirilebilir."
        - "Toast yığınlanma, progress bar, orientation (dikey/yatay) ve slotlarla esnek yapı sunar."
        - "Programatik kontrol (toast.remove, toast.clear vb.) ve v-model:open ile açık/kapalı durumu yönetilebilir."
    - name: "UTooltip"
      link: "https://ui.nuxt.com/components/tooltip"
      usage: >
        Herhangi bir elementin (genellikle bir butonun) üzerine gelindiğinde veya odaklandığında kısa açıklama/püf noktası göstermek için kullanılır.
        UTooltip bileşeni, bir slot içeriği ile sarmalanır ve `text` ile gösterilecek bilgi tanımlanır. İsteğe göre klavye kısayolu (`kbds`), gecikme süresi (`delay-duration`), içerik özelleştirme (`content`), ok simgesi (`arrow`), konum ve açma/kapama kontrolü gibi gelişmiş özellikler sunar.
        Tüm uygulamada App bileşeni ile global tooltip ayarları yapılabilir.
      props:
        - name: "text"
          type: "string"
          default: "undefined"
          description: "Tooltip'te gösterilecek kısa metin içeriği."
        - name: "kbds"
          type: "(string | undefined)[] | KbdProps[]"
          default: "undefined"
          description: "Tooltip içinde bir veya birden fazla klavye tuşu göstermek için kullanılır."
        - name: "content"
          type: "object"
          default: "undefined"
          description: "Tooltip'in içerik özelleştirmesi (örn. hizalama, side, offset, vs)."
        - name: "arrow"
          type: "boolean | object"
          default: "false"
          description: "Tooltip kutusunun ucunda ok simgesi gösterir."
        - name: "portal"
          type: "string | boolean | HTMLElement"
          default: "true"
          description: "Tooltip içeriğinin portal olarak render edilmesini sağlar."
        - name: "reference"
          type: "ReferenceElement"
          default: "undefined"
          description: "Konumlandırma için referans element (örneğin takip eden imleç için kullanılır)."
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/class bazlı stil özelleştirmeleri."
        - name: "defaultOpen"
          type: "boolean"
          default: "undefined"
          description: "Başlangıçta açık olup olmayacağını belirler."
        - name: "open"
          type: "boolean"
          default: "undefined"
          description: "Tooltip'in açık/kapalı state'ini dışarıdan kontrol etmek için (v-model:open)."
        - name: "delayDuration"
          type: "number"
          default: "undefined"
          description: "Tooltip'in açılmadan önce bekleyeceği gecikme süresi (ms)."
        - name: "disableHoverableContent"
          type: "boolean"
          default: "undefined"
          description: "Hover ile açık kalma davranışını kapatır (erişilebilirlik etkiler)."
        - name: "disableClosingTrigger"
          type: "boolean"
          default: "undefined"
          description: "Tıklayınca kapanmayı engeller."
        - name: "disabled"
          type: "boolean"
          default: "undefined"
          description: "Tooltip'i devre dışı bırakır."
        - name: "ignoreNonKeyboardFocus"
          type: "boolean"
          default: "undefined"
          description: "Klavye ile gelmeyen focuslarda açılmayı engeller."
      slots:
        - name: "default"
          description: "Tooltip'in açılmasını tetikleyen slot (genellikle bir buton ya da başka bir element)."
        - name: "content"
          description: "Tooltip kutusunun içeriğini slot ile tamamen özelleştirmek için."
      emits:
        - name: "update:open"
          payload: "[value: boolean]"
          description: "Açık/kapalı state değiştiğinde tetiklenir (v-model:open)."
      example: |
        <template>
          <UTooltip text="Kopyala">
            <UButton icon="i-lucide-copy" color="neutral" variant="soft" />
          </UTooltip>
        </template>
      notes:
        - "UTooltip, App bileşeni ile global sağlayıcıya (TooltipProvider) bağlanarak uygulama genelinde yapılandırılabilir."
        - "Tooltip imleci takip edebilir (`reference` prop ile), ok gösterebilir (`arrow`), klavye kısayolu gösterebilir (`kbds`)."
        - "Açılma/kapanma kontrolü hem v-model:open ile hem de defaultOpen ile sağlanabilir."
        - "Stil, yön, konum, içerik slotu ve gecikme ile detaylı şekilde özelleştirilebilir."
    - name: "UTree"
      link: "https://ui.nuxt.com/components/tree"
      usage: >
        Hiyerarşik (ağaç) veri yapısını görsel olarak göstermek, gezinmek ve seçim yapmak için kullanılır.
        Her bir item nesnesi, çocuk elemanlar ile iç içe dallanabilir. Dosya gezgini, kategori, navigasyon veya proje dizini gibi karmaşık veri ağaçlarında idealdir.
        Gelişmiş seçim, çoklu seçim, slot ile özelleştirme, renk ve ikon desteği sunar.
      props:
        - name: "items"
          type: "TreeItem[]"
          default: "undefined"
          description: "Ağaç yapısında gösterilecek ana veri dizisi. Her item kendi içinde children ile alt ağaç oluşturabilir."
        - name: "color"
          type: '"primary" | "secondary" | "success" | "info" | "warning" | "error" | "neutral"'
          default: "primary"
          description: "Seçili veya aktif item'ların rengi."
        - name: "size"
          type: '"xs" | "sm" | "md" | "lg" | "xl"'
          default: "md"
          description: "Ağaç ve ikon boyutu."
        - name: "multiple"
          type: "boolean"
          default: "false"
          description: "Çoklu seçim desteği. Aktifken birden fazla item seçilebilir."
        - name: "disabled"
          type: "boolean"
          default: "false"
          description: "Tüm ağaç için veya item bazında seçimi ve etkileşimi kapatır."
        - name: "modelValue"
          type: "any"
          default: "undefined"
          description: "Seçili item'ı veya item'ları v-model ile kontrol etmek için."
        - name: "defaultValue"
          type: "any"
          default: "undefined"
          description: "Varsayılan seçili item değeri (kontrolsüz kullanım için)."
        - name: "expanded"
          type: "string[]"
          default: "undefined"
          description: "Genişletilmiş item'ların değerleri (v-model:expanded ile kontrol edilir)."
        - name: "defaultExpanded"
          type: "string[]"
          default: "undefined"
          description: "Varsayılan açık (expand) item değerleri."
        - name: "trailingIcon"
          type: "string"
          default: "i-lucide-chevron-down"
          description: "Kapanabilir dallar için sağda gösterilecek ikon."
        - name: "expandedIcon"
          type: "string"
          default: "i-lucide-folder-open"
          description: "Bir dal açıkken kullanılacak ikon."
        - name: "collapsedIcon"
          type: "string"
          default: "i-lucide-folder"
          description: "Bir dal kapalıyken kullanılacak ikon."
        - name: "selectionBehavior"
          type: '"toggle" | "replace"'
          default: "toggle"
          description: "Çoklu seçimde seçim davranışı (toggle: her tık ayrı, replace: sadece birini seçer)."
        - name: "propagateSelect"
          type: "boolean"
          default: "false"
          description: "Bir parent seçilirse tüm çocukları da seçili olsun mu?"
        - name: "bubbleSelect"
          type: "boolean"
          default: "false"
          description: "Çocuklardan biri seçilirse parent'ın durumu güncellensin mi?"
        - name: "ui"
          type: "object"
          default: "undefined"
          description: "Slot/class bazlı stil özelleştirmeleri (root, item, link, ikon, label vb)."
      itemProps:
        - name: "label"
          type: "string"
          description: "Her dal veya yaprak için görünen metin. (Zorunlu, benzersiz olmalı)"
        - name: "icon"
          type: "string"
          description: "Başında gösterilecek ikon."
        - name: "trailingIcon"
          type: "string"
          description: "Sağda gösterilecek özel ikon."
        - name: "defaultExpanded"
          type: "boolean"
          description: "Başlangıçta açık mı gelsin?"
        - name: "disabled"
          type: "boolean"
          description: "O item için etkileşim kapalı."
        - name: "value"
          type: "string"
          description: "Item'ın benzersiz anahtarı. Yoksa label kullanılır."
        - name: "children"
          type: "TreeItem[]"
          description: "Alt dal/listesi."
        - name: "onToggle"
          type: "(e: Event) => void"
          description: "Item genişletildiğinde veya kapatıldığında tetiklenir, e.preventDefault() ile kontrol edilebilir."
        - name: "onSelect"
          type: "(e?: Event) => void"
          description: "Item seçildiğinde tetiklenir, e.preventDefault() ile seçilme engellenebilir."
        - name: "slot"
          type: "string"
          description: "Slot özelleştirmesi için anahtar."
        - name: "class"
          type: "any"
          description: "Ekstra stil sınıfları."
        - name: "ui"
          type: "object"
          description: "Slot/class bazlı item stil özelleştirmeleri."
      slots:
        - name: "item-wrapper"
          description: "Her item için dış sarmalayıcı slot."
        - name: "item"
          description: "Item'ın tamamını özelleştirmek için slot."
        - name: "item-leading"
          description: "Başındaki ikon veya görsel slotu."
        - name: "item-label"
          description: "Label için slot."
        - name: "item-trailing"
          description: "Sağdaki ikon/aksiyon slotu."
      emits:
        - name: "update:modelValue"
          payload: "[payload: any]"
          description: "Seçili item(lar) değiştiğinde tetiklenir."
        - name: "update:expanded"
          payload: "[val: string[]]"
          description: "Açık/gizli dallar değiştiğinde tetiklenir."
      example: |
        <template>
          <UTree
            :items="[
              {
                label: 'src/',
                defaultExpanded: true,
                children: [
                  { label: 'App.vue', icon: 'i-vscode-icons-file-type-vue' },
                  { label: 'main.ts', icon: 'i-vscode-icons-file-type-typescript' }
                ]
              },
              { label: 'nuxt.config.ts', icon: 'i-vscode-icons-file-type-nuxt' }
            ]"
          />
        </template>
      notes:
        - "Her item'ın benzersiz bir value veya label'ı olmalı."
        - "Çoklu seçim, açılır/kapanır dallar ve slot ile tam özelleştirme destekler."
        - "Item içinde onToggle/onSelect eventleri ile davranışları tamamen kontrol edebilirsin."
        - "Bileşenin temasını app.config.ts üzerinden, ikonları ise global olarak özelleştirmek mümkündür."
  notes:
    - "Tüm componentlerde renk prop’larında alias (örn: primary, error, success) kullanılmalı."
    - "Custom veya override edilen componentler packages/ui/ dizininde tutulur."
    - "Bileşenlerin tip tanımları için resmi Nuxt UI/TypeScript dökümanları referans alınır."
