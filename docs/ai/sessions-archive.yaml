sessions_archive:
  title: "Günlüğüm - Arşiv"
  description: >
    Bu dosya, TT Panel görevlerine dair haftalık üretim kayıtlarını arşivler.
    Aktif olmayan, geçmişte tamamlanmış tüm haftalar bu dosyada saklanır.
    Yapı `sessions.yaml` ile birebir aynıdır; sadece zamansal olarak geride kalan haftalar buraya taşınır.
    Amacı, geçmiş üretimleri düzenli tutmak ve sistem dosyasını sadeleştirmektir.
  weeks:
    - week: "2025-07-14 → 2025-07-20"
      days:
        - date: "2025-07-14"
          summary:
            - "Proje hedefleri, modül yapısı ve kullanılacak teknolojiler değerlendirildi"
        - date: "2025-07-15"
          summary:
            - "`ai-meta.yaml` dosyası oluşturuldu, `goals`, `modules`, `tech` blokları eklendi"
            - "Yol haritası planlandı, `ai-meta.yaml` dosyasına `roadmap` bloğu eklendi"
        - date: "2025-07-16"
          summary:
            - "`memory-tasarimteknesi.md` ve `memory-system.yaml` dosyaları oluşturuldu"
            - "Üretim günlüğü `sessions.yaml` dosyası oluşturuldu, haftalık üretim yapısı tanımlandı"
            - "Teknik üretim süreci başlatıldı, AI (Copilot GPT, Claude Sonnet 4) yapı kurucu olarak devreye alındı"
            - "Modül yapısı, faz planı, teknoloji yığını ve AI davranışları tanımlandı"
        - date: "2025-07-17"
          summary:
            - "AI ile mimari kavramlar ve proje yapılandırmaları çalışıldı"
            - "Büyük ölçekli projelerde klasör yapısı üzerine öğrenme derinleştirildi"
        - date: "2025-07-18"
          summary:
            - "TT Panel için temel mimari kararlar ve geliştirme prensipleri belirlendi"
            - "TT Panel’in klasör yapısı ve servis mimarisi kesinleştirildi"
        - date: "2025-07-19"
          summary:
            - "`memory-tasarimteknesi.md` ve `memory-system.yaml` dosyaları `context.yaml` dosyasında birleştirildi"
        - date: "2025-07-20"
          summary:
            - "Tüm sistem dosyaları gözden geçirilerek içeriksel ve yapısal olarak düzenlendi"
            - "Yol haritası faz ve sprint mantığıyla planlandı, ilk sprint hedefi belirlendi."
      summary:
        - "..."

    - week: "2025-07-21 → 2025-07-27"
      days:
        - date: "2025-07-21"
          summary:
            - "`projects/ttpanel/` klasörü oluşturuldu"
            - "`apps/`, `modules/`, `services/`, `config/`, `tests/`, `scripts/`, `packages/`, `docs/` dizinleri açıldı"
            - "AI sistemi `docs/ai/` dizinine taşındı"
        - date: "2025-07-22"
          summary:
            - "Her servis için `.env` ve `.env.example` dosyaları konumlandırıldı"
            - "`docker-compose.yml` yapılandırıldı, ortak `traefik` ağı tanımlandı"
            - "PostgreSQL, Redis, MinIO, Mailpit ve PGWeb servisleri kuruldu"
            - "Her servis için `env` ve `Dockerfile` düzenlemeleri yapıldı"
            - "Ortam değişkenleri `.env.*` dosyaları ile izole edildi"
        - date: "2025-07-23"
          summary:
            - "Subdomain yapısı `.test` uzantısıyla güncellendi: `api`, `admin`, `shop`, `mail`, `db`"
            - "Makefile hazırlandı, `make up`, `make reset`, `make logs`, `make psql` komutları tanımlandı"
            - "Proje klasör yapısı `tree` çıktısıyla gözden geçirildi, tüm ana dizinler oluşturuldu"
        - date: "2025-07-24"
          summary:
            - "`ai-meta.yaml` dosyasına `workspace` bloğu eklendi, ortam ve servis yapılandırmaları bu dosyada toplandı"
            - "`.env` dosyaları `path`, `description`, `content` formatında işlendi"
            - "`CHANGELOG.md` dosyası `v0.0.0` etiketiyle başlatıldı"
        - date: "2025-07-25"
          summary:
            - "VSCode eklentileri yüklendi, `settings.json` dosyası hazırlandı"
            - "GitHub Copilot kurulumu yapıldı, AI üretim sistemi entegre edildi"
        - date: "2025-07-26"
          summary:
            - "Terminal yapılandırıldı, `.zshrc` ve `aliases.zsh` dosyaları ayrıştırıldı"
            - "Powerlevel10k prompt ve Oh My Zsh dizini optimize edildi"
            - "`extensions.json` dosyası oluşturuldu"
      summary:
        - "..."

    - week: "2025-07-28 → 2025-08-03"
      days:
        - date: "2025-07-28"
          summary:
            - "NestJS mimarisi ve temel yapı taşları örneklerle öğrenildi"
            - "`main.ts` → `AppModule` → `HelloModule` → `HelloController` → `HelloService` zinciri kuruldu"
            - "Controller, Service, Module görevleri ve decorator yapıları test edildi"
            - "`@Query()`, `@Param()`, `@Body()` kullanımı öğrenildi"
            - "`CreateHelloDto` oluşturuldu, `class-validator` ile doğrulama kuralları uygulandı"
            - "`ValidationPipe` global olarak tanımlandı (`whitelist`, `forbidNonWhitelisted`, `transform`)"
            - "`curl` ve Postman ile testler yapıldı, otomatik hata mesajları incelendi"
            - "`@Transform()` ile veri dönüşümleri denendi"
            - "`@typescript-eslint/no-unsafe-call` kuralı DTO dosyalarında devre dışı bırakıldı (`eslint.config.mjs` override)"
            - "`modules/` klasörünün proje kökünde kalmasına karar verildi"
        - date: "2025-07-29"
          summary:
            - "DDD ve mikroservis yaklaşımı için bu yapının uygun olduğu teyit edildi"
            - "`apps/`, `modules/`, `packages/` klasörlerinin görevleri netleştirildi"
            - "Monolit içinde `commerce`, `content`, `system` modülleriyle başlama kararı alındı"
            - "Frontend tarafı API client olarak çalışacak şekilde kurgulandı"
            - "Vendure, Shopware, Drupal karşılaştırmaları üzerinden kavramsal değerlendirmeler yapıldı"
            - "Klasör yapısının son hali netleştirildi ve listelendi"
            - "Başta `modules/` klasörünün frontend ilişkili sanıldığı, sonra NestJS yapısıyla bunun düzeltildiği öğrenildi"
            - "Headless yapı ve bağımsız frontend ilişkisi kavramsal olarak netleştirildi"
        - date: "2025-07-30"
          summary:
            - "AI üretim sistemine dair tüm davranış, yetki ve çıktı kuralları güncellendi"
            - "`ai-meta.yaml`, `sessions.yaml` dosyaları revize edildi"
            - "AI çıktı kuralları: `code block`, geçerli uzantı, dosya bağlantısı yasağı gibi maddelerle netleştirildi"
            - "`ai-meta.yaml` dosyasına project bloğu eklendi"
            - "`sessions.yaml` dosyası sadeleştirildi, sadece günlük üretim notları ve özetler tutuldu"
            - "Dosyalar arası sorumluluk dağılımı netleştirildi (`meta`, `sessions`, `guide`)"
        - date: "2025-07-31"
          summary:
            - "`modules/` dizini yeniden yapılandırıldı: `content/` grubu `commerce/` altına taşındı"
            - "`integration/` modülü kaldırıldı, alt modüller `automation/` altına taşındı"
            - "`reporting/` grubu `commerce/` altında ayrı bir yapı olarak tanımlandı"
            - "`apps/public` klasörü `apps/shop` olarak yeniden adlandırıldı"
            - "`apps/{api, admin, shop}` uygulamaları birlikte geliştirilecek şekilde planlandı"
            - "Her modül tamamlandığında admin ve shop arayüzleri birlikte ele alınacak"
            - "`goals`, `modules`, `tech` bloklara yapısal kararlara göre güncellendi"
        - date: "2025-08-01"
          summary:
            - "Tüm modül adlandırmaları gözden geçirildi, tekrar eden ifadeler ayıklandı"
            - "`tests/integration/` klasörünün anlamı netleştirildi, teknik açıklama eklendi"
            - "`roadmap` bloğu sıfırdan yazılmasına karar verildi"
            - "Yeni klasör yapısı: `modules/` altında `commerce`, `automation`, `system` grupları tanımlandı"
            - "`apps/shop` adı altında frontend yapısı sabitlendi"
            - "Modüllerin hem API hem admin hem shop tarafında birlikte geliştirileceği kararlaştırıldı"
            - "E-ticaret süreci 3 ana faza bölündü (temel, gelişmiş, operasyonel)"
            - "Tüm roadmap faz sıralaması yeniden tanımlandı, 7 faza çıkarıldı"
            - "Modüller `group / subgroup / module` formatında listelendi ve fazlara atandı"
            - "Bazı modüller ileri fazlara taşındı (wishlist, testimonial, note, login-history)"
            - "Her faz için: hedef, modüller, tamamlanma kriterleri ve sprint alanları oluşturuldu"
            - "`roadmap` bloğu içine entegrasyon, takip ve revizyon stratejisi eklenecek şekilde planlandı"
        - date: "2025-08-02"
          summary:
        - date: "2025-08-03"
          summary:
            - "Variant yapısı detaylı konuşuldu, modül klasörleri ayrı ayrı değerlendirildi"
            - "Faz 2 ve Faz 4 modül kapsamları sadeleştirildi"
            - "Faz sıralaması yönlendirmene göre yeniden düzenlendi"
            - "TT Panel projesindeki tüm modüller üzerine sohbet edildi, `modules` bloğu ve `modules/` klasörü güncellendi"
            - "`goals`, `tech`, `roadmap` içerikleri yeniden düzenlendi"
            - "Roadmap fazları sıfırdan belirlendi, Faz 1 sprintleri oluşturuldu"
            - "`ai-meta.yaml` dosyası blok blok incelendi; tekrarlar temizlendi, `behavior` kuralları sade ve tutarlı hale getirildi."
            - "`modules` yapısı klasör ağacıyla eşleştirildi; `concept` ve `notes` alanları optimize edildi."
            - "`tech` ve `workspace` bölümleri güncellendi, gereksiz tekrarlar kaldırıldı."
            - "Faz ve sprint bilgisi artık yalnızca `roadmap.stage` içinde tutuluyor."
            - "`roadmap.stage.updated_at` alanı şimdilik korunuyor, ihtiyaç kalmazsa ileride kaldırılacak."
            - "`behavior.planning` kuralları yeniden yazıldı; üretim yalnızca `roadmap.phases[*].sprints[*].modules` ve gerektiğinde `roadmap.phases[*].sprints[*].tasks` alanlarına göre yürütülüyor."

    - week: "2025-08-04 → 2025-08-10"
      days:
        - date: "2025-08-04"
          summary:
            - "Modül üretimi tanımı genişletildi: Her modül, API, admin, shop, test, seed, i18n ve dokümantasyon dahil tüm bileşenleriyle birlikte tek blok olarak ele alınıyor."
            - "Faz 1 tüm sprintleri tamamlandı: Sprint 1’den Sprint 10’a kadar tüm `modules`, `tasks` ve `done_criteria` alanları netleştirildi."
            - "Her sprint için versiyon etiketi belirlendi (`v0.1.0 → v1.0.0`) ve AI üretim davranışıyla birebir uyumlu hale getirildi."
            - "Sprint 10’daki modül faz karışıklığı fark edildi, düzeltildi ve sprint yalnızca yayınlama & geçiş odaklı olarak yeniden kurgulandı."
            - "Bu süreçte `ai-meta.yaml`, `context.yaml` ve `sessions.yaml` dosyaları onlarca kez evrim geçirdi; sistem sadeleşti ve netleşti."
            - "Fazlar, sprintler, modüller ve üretim rehberi artık birbirine tamamen entegre; AI üretim sistemi kullanıma hazır."
        - date: "2025-08-05"
          summary:
            - "NestJS framework felsefesi ve modüler yapısı üzerine derinlemesine inceleme yapıldı."
            - "Prisma, Drizzle, MikroORM, TypeORM gibi ORM araçları karşılaştırıldı. Prisma'nın kullanım kolaylığı ve esnekliği öne çıktı."
            - "TT Panel projesi için Makefile komutları ve script yapısı belirlendi."
            - "TT Panel üretim mantığı ve felsefesi üzerine kapsamlı bir değerlendirme yapıldı."
            - "Modüllerin roadmap içindeki veri bağımlılıklarına göre sıralanması gündeme alındı; ancak MVP hedefi açısından gerekli olmadığı değerlendirildi. Mükemmeliyetçi yaklaşım yerine, modüllerin bağımsız ve iteratif biçimde üretileceği bir yapı tercih edildi."
            - "Dosya ve klasör isimlendirmelerinde kebab-case, YAML içi anahtar adlandırmalarında ise snake_case standardı benimsendi. ai-identity anahtarı ai_identity olarak güncellendi."
            - "`ai-meta.yaml > workspace` bloğu proje yapısıyla uyumlu hale getirildi."
            - "Ortam yönetimi ve kullanım mantığı üzerine detaylı açıklamalar yapıldı."
            - "Tüm `.env.*` dosyaları `config/env/` klasörüne taşındı ve `docker-compose.yml` içinde yolları güncellendi."
            - "`api` servisi için `test` ve `prod` ortam dosyaları eklendi."
            - "Ortam ayrımı (dev / test / prod) sistemi netleştirildi."
        - date: "2025-08-06"
          summary:
            - "`Makefile` komutları (up, down, migrate, seed, test) doğrulandı."
            - "build.context ve dockerfile yolları düzenlendi (apps/* + config/docker/*)"
            - "healthcheck tanımları yazıldı (api, admin, shop)"
            - "volume mount hatası (postgres/data) çözüldü"
            - "Redis requirepass hatası düzeltildi (komut sabitlendi)"
            - "make up ile tüm sistem ayağa kaldırıldı"
            - "NestJS ve Nuxt 3 projeleri bootstrap edildi (api, admin, shop)"
            - "Veritabanı migration ve seed işlemleri başarıyla gerçekleştirildi."
            - "Pgweb üzerinden veritabanı erişimi ve tablolar doğrulandı."
            - "Test altyapısı (Jest, Supertest, Cypress) ve UI bileşen geliştirme sonraki sprintlere bırakıldı."
            - "Sprint 1 kapsamındaki `system/access` modülleri için üretim sıralaması belirlendi: `role` → `permission` → `user` → `auth` → `token`. Bu sıralama, veri ilişkileri ve bağımlılık zincirine göre planlandı. Shop arayüzü bu sprintte yer almayacak; tüm geliştirme sadece API ve Admin tarafını kapsayacak."
            - "`modules/` klasörünün yalnızca NestJS tabanlı backend (API) modüllerini içerdiği tanımı netleştirildi; admin ve shop arayüzlerinin `apps/` altında bağımsız uygulamalar olduğu açıklandı."
            - "Bu ayrım `modules.concept`, `modules.notes`, `behavior.architecture` ve `behavior.coding` alanlarında kavramsal ve teknik olarak tanımlandı."
            - "Artık frontend bileşenleri yalnızca `apps/admin` ve `apps/shop` içinde üretilecek; `modules/` yalnızca API-first üretimlere ayrılmış olacak."
            - "`ai-meta.yaml > ai` bloğu baştan sona gözden geçirildi; `role`, `scope`, `behavior.allowed.architecture` ve `behavior.allowed.coding` başlıkları detaylı şekilde revize edildi."
            - "`architecture` alanına eksik kalan teknik dizin yapıları (`guard`, `pipe`, `factory`, `interceptor`, `helper` vb.) yeniden dahil edildi."
            - "`coding` alanına test stratejisi, üretim klasör düzeni ve örnek sistem modülleri eklendi; yapı bütünlük kazandı."
            - "`ai-meta.yaml` içindeki `tech.tooling`, `tech.config`, `workspace.directories.apps` gibi alanlar, merkezî yapılandırma kararları doğrultusunda güncellendi."
        - date: "2025-08-07"
          summary:
            - "`scripts/module-create.sh` dosyası oluşturuldu; modül klasörlerini ve içerik dosyalarını (service, controller, dto, test, seed vs.) otomatik üreten yapı kuruldu."
            - "`make mc` komutu tanımlandı; `make mc system/access/role` gibi çağrılarla yeni modül oluşturulabiliyor."
            - "`scripts/module-seed.sh` dosyası oluşturuldu; verilen modül için seed dosyasını çalıştırıyor."
            - "`make ms` komutu tanımlandı; `make ms system/access/role` gibi çağrılarla modül bazlı seed çalıştırılabiliyor."
            - "`scripts/module-test.sh` dosyası oluşturuldu; modülün test klasörünü çalıştırıyor."
            - "`make mt` komutu tanımlandı; `make mt system/access/role` çağrısı ile modül testleri yürütülüyor."
            - "`Makefile` içeriği güncellendi; `mc`, `ms`, `mt` komutları eklendi, `make help` menüsü detaylandırıldı."
            - "`scripts/module-register.ts` eklendi. Bu betik `AppModule` içine otomatik `import` ve `imports[]` kaydı yapar."
            - "Kök dizine ts-node, typescript ve tsconfig.json eklendi; `make mr` komutu yeniden çalışır hale getirildi."
            - ".vscode/settings.json içine `typescript.tsdk` tanımı eklendi; VSCode artık `apps/api/node_modules` içindeki NestJS paketlerini tanıyabiliyor."
            - "`tsconfig.json` içindeki hatalı `@nestjs/*` → `apps/api/node_modules/@nestjs/*` paths tanımı kaldırıldı; sistem kararlılığı sağlandı."
            - "`apps/api` içinde Prisma kurulumu yapıldı (`prisma`, `@prisma/client` eklendi, `npx prisma init` ile yapı başlatıldı)."
            - "`make mc` komutu iki modlu hale getirildi (`minimal` ve `full`); yalnızca gerekli klasörlerin üretildiği sade ve sürdürülebilir yapı benimsendi."
            - "Modül klasör yapısına dair anlam temelli değerlendirme yapıldı; 6 temel klasör `minimal` modda varsayılan kabul edildi."
            - "`scripts/module-create.ts`, `module-seed.ts`, `module-test.ts`, `module-register.ts` dosyaları yazıldı; CLI komutları TypeScript'e taşındı."
            - "`scripts/*.ts` dosyalarının başına kullanım açıklamaları eklendi (örn: make mc, ms, mt, mr)."
            - "`tsx` paketi workspace root'a devDependency olarak eklendi."
            - "`Makefile` içindeki mc, ms, mt, mr komutları pnpm tsx uyumlu hale getirildi."
            - "Shell script (.sh) bağımlılığı tamamen kaldırıldı; tüm CLI komutları pnpm + tsx üzerinden çağrılacak şekilde yeniden yapılandırıldı."
        - date: "2025-08-08"
          summary:
            - "Ana dizindeki package-lock.json dosyası silindi, pnpm sistemine geçiş için temizlendi."
            - "`pnpm-workspace.yaml` dosyası eklendi, apps/* düzeyinde workspace tanımı yapıldı."
            - "`pnpm-lock.yaml` dosyası ilk kez üretildi, pnpm install ile tüm bağımlılıklar merkezi olarak kuruldu."
            - "admin ve shop uygulamaları pnpm workspace'e dahil edildi, kendi package.json dosyaları korunarak postinstall süreçleri başarıyla tamamlandı."
            - "Tüm `scripts/*.sh` dosyaları silindi; CLI betikleri tamamen TypeScript (`.ts`) formatına taşındı."
            - "`config/docker/{api,admin,shop}/Dockerfile` dosyaları pnpm ve corepack desteğiyle yeniden yazıldı; monorepo uyumlu hale getirildi."
            - "`docker-compose.yml` dosyasına node_modules mount'u eklendi, modüller canlı izlenebilir hale getirildi."
            - "`scripts/tsconfig.json` ve `apps/api/tsconfig.json` dosyaları root tsconfig'e extend edecek şekilde sadeleştirildi."
            - "Ana `tsconfig.json` dosyası, `baseUrl` ve `paths` ayarlarıyla tüm modül yollarını çözecek şekilde yeniden yapılandırıldı."
            - "pnpm workspace yapısı ve pnpm install süreci dün geceden bir sürü eziyet etti. Toplam 18 saatten fazla zaman harcandı."
            - "Traefik network ve label konfigürasyonları gözden geçirildi; doğru network ve port yönlendirmesi ayarlandı."
            - "Makefile içine traefik kontrol ve restart komutları eklendi, böylece traefik servisinin düzgün başlatılması sağlandı."
            - "Root dizinde pnpm-lock.yaml ve node_modules silinip temiz kurulum yapılarak frozen-lockfile problemi giderildi."
            - "Tüm containerlar (api, admin, shop, traefik vs.) sorunsuz ayağa kalktı ve trafiğe açıldı."
            - "Makefile komutları (up, down, restart, traefik, clean vs.) üretildi ve süreç otomasyona bağlandı."
            - "pnpm workspace packages tanımları, injectWorkspacePackages ayarları, package.json isimlendirmeleri detaylı incelendi."
            - "Docker build sırasında cache ve katman sıralaması optimize edildi."
            - "Geliştirme ortamında Docker, Traefik ve pnpm entegrasyonu için kapsamlı debug yapıldı."
            - "Workspace monorepo yapısına adaptasyon ve CI/CD için ön hazırlıklar yapıldı."
            - "NestJS, Nuxt 4 ve pnpm workspace entegrasyonu başarıyla tamamlandı."
        - date: "2025-08-09"
          summary:
            - "Makefile komutları ve Docker Compose ile tüm ortam ayağa kaldırıldı."
            - "Pnpm workspace kullanımı detaylandırıldı, Docker ile uyumluluğu sağlandı."
            - "Ortam değişkenleri için `config/env` yapısı oluşturuldu, env dosyalarının yönetimi kolaylaştırıldı."
            - "Production ve development için ayrı Dockerfile’lar (`Dockerfile.prod`, `Dockerfile.dev`) hazırlandı."
            - "Docker Compose dosyaları `docker-compose.yml` (dev) ve `docker-compose.prod.yml` (prod) olarak yapılandırıldı."
            - "Traefik, Postgres, Redis, Minio, Mailpit gibi destekleyici servisler entegre edildi."
            - "Makefile ile ortam bazlı (`ENV=dev` veya `ENV=prod`) docker-compose yönetimi sağlandı."
            - "Makefile’a `up`, `up-build`, `down`, `logs`, `migrate`, `seed` gibi otomasyon komutları eklendi."
            - "Geliştirme ortamı için live reload destekli Dockerfile.dev dosyaları oluşturuldu."
            - "Api, Admin, Shop servislerinin domain bazlı erişimleri ve çalışmaları test edilip onaylandı."
            - "İlerleyen aşamalarda worker servisi entegrasyonu, test kapsamı genişletilmesi ve CI/CD pipeline kurulumu planlandı."
            - "make rebuild sonrası bazı servislerde 504/502 hataları alındı"
            - "traefik container'ı ttpanel ağı içine alındı (daha önce dış ağdaydı)"
            - "traefik ile ilgili path ve dış servis yapısı makefile’dan kaldırıldı"
            - "tüm servislerin healthcheck'leri ve depends_on yapısı gözden geçirildi"
        - date: "2025-08-10"
          summary:
            - "curl ve curl-all make komutları tanımlandı"
            - "make help komutu yeniden tasarlandı, açıklamalar ve hizalama eklendi"
            - "DTO yapıları tanımlandı ve `class-validator` ile kurallar eklendi."
            - "Seed fonksiyonu doğrudan dosya içinde çalıştırılarak sorun çözüldü."
            - "Geliştirme modeli yeniden tanımlandı: Yerel geliştirme pnpm ile, Docker yalnızca infra/prod için kullanılacak şekilde yapılandırıldı."
            - "docker-compose.yml sadeleştirildi; tek dosyada `infra` ve `apps` profilleriyle prod ortam tanımlandı."
            - "Makefile baştan yazıldı: Yeni komutlar dahil edildi."
            - "Tüm yapı dosyaları optimize edildi: .gitignore, eslint, prettier, tsconfig, pnpm-workspace.yaml güncellendi."
            - "apps/api yeniden düzenlendi: .env birleşti, global ConfigModule kuruldu, prisma modülü dışa alındı."
            - "MonoRepo yapısı netleştirildi: apps, services, packages, scripts dizinleri tanımlandı."
            - "Prod build’ler, Makefile komutları ve Docker bağımlılıkları çalışır durumda; yerel geliştirme stabil hale getirildi."
            - "project-ttpanel.yaml dosyasında `goals`, `tech`, `roadmap`, `workspace` bloklarının içeriği düzenlendi."
            - "main.ts dosyasına Swagger kurulumu ve yapı analizi yapıldı"
            - "CORS ayarları açık bırakıldı (app.enableCors())"
            - "ValidationPipe eklendi ve yapılandırıldı (whitelist, transform, forbidNonWhitelisted)"
            - "ExceptionFilter ve Interceptor anlatıldı ancak henüz eklenmedi"
            - "Prettier otomatik formatlama sorunu çözüldü (prettier-plugin-prisma eksikliği giderildi, requireConfig çözümüne gidildi)"
            - "Modül sayısı arttıkça AppModule'un sade kalması gerektiği not edildi"
            - "Alt modüllerin AccessModule gibi üst modüller içinde gruplanması gerektiği kararlaştırıldı"
            - "AppController, AppService ve test dosyası analiz edildi, şimdilik yerlerinde bırakılmasına karar verildi"
            - "Prisma Client generate süreci ve Docker ortam sorunları çözüldü."
            - "DATABASE_URL içindeki hostname hatası düzeltildi."
            - "Alias çözümleme sorunu giderildi; jest.config alias yerine package.json içi moduleNameMapper ile çözüldü."
